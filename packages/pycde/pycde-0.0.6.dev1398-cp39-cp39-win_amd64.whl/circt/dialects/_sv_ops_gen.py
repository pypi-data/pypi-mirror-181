
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _sv_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "sv"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AliasOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.alias"

  _ODS_REGIONS = (0, True)

  def __init__(self, aliases, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(aliases))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def aliases(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AlwaysCombOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.alwayscomb"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AlwaysFFOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.alwaysff"

  _ODS_REGIONS = (2, True)

  @builtins.property
  def clock(self):
    return self.operation.operands[0]

  @builtins.property
  def reset(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def bodyBlk(self):
    return self.regions[0]

  @builtins.property
  def resetBlk(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AlwaysOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.always"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def clocks(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ArrayIndexInOutOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.array_index_inout"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(index))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def index(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssertConcurrentOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.assert.concurrent"

  _ODS_REGIONS = (0, True)

  def __init__(self, event, clock, property, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(clock))
    operands.append(_get_op_result_or_value(property))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["event"] = event
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def clock(self):
    return self.operation.operands[0]

  @builtins.property
  def property(self):
    return self.operation.operands[1]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssertOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, expression, defer, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(expression))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["defer"] = defer
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def expression(self):
    return self.operation.operands[0]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssignInterfaceSignalOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface.signal.assign"

  _ODS_REGIONS = (0, True)

  def __init__(self, iface, signalName, rhs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(iface))
    operands.append(_get_op_result_or_value(rhs))
    attributes["signalName"] = signalName
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def iface(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssignOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.assign"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    operands.append(_get_op_result_or_value(src))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssumeConcurrentOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.assume.concurrent"

  _ODS_REGIONS = (0, True)

  def __init__(self, event, clock, property, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(clock))
    operands.append(_get_op_result_or_value(property))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["event"] = event
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def clock(self):
    return self.operation.operands[0]

  @builtins.property
  def property(self):
    return self.operation.operands[1]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AssumeOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.assume"

  _ODS_REGIONS = (0, True)

  def __init__(self, expression, defer, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(expression))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["defer"] = defer
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def expression(self):
    return self.operation.operands[0]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BPAssignOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.bpassign"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    operands.append(_get_op_result_or_value(src))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BindInterfaceOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.bind.interface"

  _ODS_REGIONS = (0, True)

  def __init__(self, instance, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["instance"] = instance
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BindOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.bind"

  _ODS_REGIONS = (0, True)

  def __init__(self, instance, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["instance"] = instance
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CaseOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.case"

  _ODS_REGIONS = (0, False)

  def __init__(self, cond, casePatterns, num_caseRegions, *, caseStyle=None, validationQualifier=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(cond))
    if caseStyle is not None: attributes["caseStyle"] = caseStyle
    attributes["casePatterns"] = casePatterns
    if validationQualifier is not None: attributes["validationQualifier"] = validationQualifier
    _ods_successors = None
    regions = 0 + num_caseRegions
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def cond(self):
    return self.operation.operands[0]

  @builtins.property
  def caseRegions(self):
    return self.regions[0:]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantXOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.constantX"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstantZOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.constantZ"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CoverConcurrentOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.cover.concurrent"

  _ODS_REGIONS = (0, True)

  def __init__(self, event, clock, property, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(clock))
    operands.append(_get_op_result_or_value(property))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["event"] = event
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def clock(self):
    return self.operation.operands[0]

  @builtins.property
  def property(self):
    return self.operation.operands[1]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 3 + 1
    return self.operation.operands[2:2 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CoverOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.cover"

  _ODS_REGIONS = (0, True)

  def __init__(self, expression, defer, substitutions, *, label=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(expression))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["defer"] = defer
    if label is not None: attributes["label"] = label
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def expression(self):
    return self.operation.operands[0]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["label"])

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DepositOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.nonstandard.deposit"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    operands.append(_get_op_result_or_value(src))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ErrorOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.error"

  _ODS_REGIONS = (0, True)

  def __init__(self, substitutions, *, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExitOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.exit"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FWriteOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.fwrite"

  _ODS_REGIONS = (0, True)

  def __init__(self, fd, format_string, substitutions, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(fd))
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["format_string"] = format_string
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def fd(self):
    return self.operation.operands[0]

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1:1 + _ods_variadic_group_length]

  @builtins.property
  def format_string(self):
    return _ods_ir.StringAttr(self.operation.attributes["format_string"])

  @format_string.setter
  def format_string(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format_string"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FatalOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.fatal"

  _ODS_REGIONS = (0, True)

  def __init__(self, substitutions, *, verbosity=None, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    if verbosity is not None: attributes["verbosity"] = verbosity
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def verbosity(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["verbosity"])

  @verbosity.setter
  def verbosity(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["verbosity"] = value

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FinishOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.finish"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, verbosity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if verbosity is not None: attributes["verbosity"] = verbosity
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def verbosity(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["verbosity"])

  @verbosity.setter
  def verbosity(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["verbosity"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ForceOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.force"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    operands.append(_get_op_result_or_value(src))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GenerateCaseOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.generate.case"

  _ODS_REGIONS = (0, False)

  def __init__(self, cond, casePatterns, caseNames, num_caseRegions, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["cond"] = cond
    attributes["casePatterns"] = casePatterns
    attributes["caseNames"] = caseNames
    _ods_successors = None
    regions = 0 + num_caseRegions
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def caseRegions(self):
    return self.regions[0:]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GenerateOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.generate"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["sym_name"] = sym_name
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["sym_name"])

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetModportOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.modport.get"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, iface, field, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(iface))
    attributes["field"] = field
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def iface(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IfDefOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.ifdef"

  _ODS_REGIONS = (2, True)

  @builtins.property
  def thenRegion(self):
    return self.regions[0]

  @builtins.property
  def elseRegion(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IfDefProceduralOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.ifdef.procedural"

  _ODS_REGIONS = (2, True)

  @builtins.property
  def thenRegion(self):
    return self.regions[0]

  @builtins.property
  def elseRegion(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IfOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.if"

  _ODS_REGIONS = (2, True)

  @builtins.property
  def cond(self):
    return self.operation.operands[0]

  @builtins.property
  def thenRegion(self):
    return self.regions[0]

  @builtins.property
  def elseRegion(self):
    return self.regions[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IndexedPartSelectInOutOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.indexed_part_select_inout"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, base, width, *, decrement=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(base))
    attributes["width"] = width
    if bool(decrement): attributes["decrement"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(IndexedPartSelectInOutOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def base(self):
    return self.operation.operands[1]

  @builtins.property
  def width(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["width"])

  @width.setter
  def width(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["width"] = value

  @builtins.property
  def decrement(self):
    return "decrement" in self.operation.attributes

  @decrement.setter
  def decrement(self, value):
    if bool(value):
      self.operation.attributes["decrement"] = _ods_ir.UnitAttr.get()
    elif "decrement" in self.operation.attributes:
      del self.operation.attributes["decrement"]

  @decrement.deleter
  def decrement(self):
    del self.operation.attributes["decrement"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IndexedPartSelectOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.indexed_part_select"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, base, width, *, decrement=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(base))
    attributes["width"] = width
    if bool(decrement): attributes["decrement"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(IndexedPartSelectOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def base(self):
    return self.operation.operands[1]

  @builtins.property
  def width(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["width"])

  @width.setter
  def width(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["width"] = value

  @builtins.property
  def decrement(self):
    return "decrement" in self.operation.attributes

  @decrement.setter
  def decrement(self, value):
    if bool(value):
      self.operation.attributes["decrement"] = _ods_ir.UnitAttr.get()
    elif "decrement" in self.operation.attributes:
      del self.operation.attributes["decrement"]

  @decrement.deleter
  def decrement(self):
    del self.operation.attributes["decrement"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InfoOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.info"

  _ODS_REGIONS = (0, True)

  def __init__(self, substitutions, *, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InitialOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.initial"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceInstanceOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface.instance"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, name, *, inner_sym=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["name"] = name
    if inner_sym is not None: attributes["inner_sym"] = inner_sym
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def inner_sym(self):
    if "inner_sym" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["inner_sym"])

  @inner_sym.setter
  def inner_sym(self, value):
    if value is not None:
      self.operation.attributes["inner_sym"] = value
    elif "inner_sym" in self.operation.attributes:
      del self.operation.attributes["inner_sym"]

  @inner_sym.deleter
  def inner_sym(self):
    del self.operation.attributes["inner_sym"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceModportOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface.modport"

  _ODS_REGIONS = (0, True)

  def __init__(self, sym_name, ports, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["sym_name"] = sym_name
    attributes["ports"] = ports
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["sym_name"])

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface"

  _ODS_REGIONS = (1, True)

  @builtins.property
  def sym_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["sym_name"])

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def comment(self):
    if "comment" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["comment"])

  @comment.setter
  def comment(self, value):
    if value is not None:
      self.operation.attributes["comment"] = value
    elif "comment" in self.operation.attributes:
      del self.operation.attributes["comment"]

  @comment.deleter
  def comment(self):
    del self.operation.attributes["comment"]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterfaceSignalOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface.signal"

  _ODS_REGIONS = (0, True)

  def __init__(self, sym_name, type, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["sym_name"] = sym_name
    attributes["type"] = type
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["sym_name"])

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LocalParamOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.localparam"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["value"] = value
    attributes["name"] = name
    _ods_result_type_source_attr = attributes["value"]
    _ods_derived_result_type = (
        _ods_ir.TypeAttr(_ods_result_type_source_attr).value
        if _ods_ir.TypeAttr.isinstance(_ods_result_type_source_attr) else
        _ods_result_type_source_attr.type)
    results.extend([_ods_derived_result_type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return _ods_ir.Attribute(self.operation.attributes["value"])

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LogicOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.logic"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def inner_sym(self):
    if "inner_sym" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["inner_sym"])

  @inner_sym.setter
  def inner_sym(self, value):
    if value is not None:
      self.operation.attributes["inner_sym"] = value
    elif "inner_sym" in self.operation.attributes:
      del self.operation.attributes["inner_sym"]

  @inner_sym.deleter
  def inner_sym(self):
    del self.operation.attributes["inner_sym"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MacroRefExprOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.macro.ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, ident, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["ident"] = ident
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MacroRefExprSEOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.macro.ref.se"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, ident, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["ident"] = ident
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OrderedOutputOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.ordered"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PAssignOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.passign"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, src, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    operands.append(_get_op_result_or_value(src))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

  @builtins.property
  def src(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReadInOutOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.read_inout"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, input, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReadInterfaceSignalOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.interface.signal.read"

  _ODS_REGIONS = (0, True)

  def __init__(self, signalData, iface, signalName, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(iface))
    attributes["signalName"] = signalName
    results.append(signalData)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def iface(self):
    return self.operation.operands[0]

  @builtins.property
  def signalData(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReadMemOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.readmem"

  _ODS_REGIONS = (0, True)

  def __init__(self, inner_sym, filename, base, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["inner_sym"] = inner_sym
    attributes["filename"] = filename
    attributes["base"] = base
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inner_sym(self):
    return _ods_ir.StringAttr(self.operation.attributes["inner_sym"])

  @inner_sym.setter
  def inner_sym(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["inner_sym"] = value

  @builtins.property
  def filename(self):
    return _ods_ir.StringAttr(self.operation.attributes["filename"])

  @filename.setter
  def filename(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["filename"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RegOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.reg"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def inner_sym(self):
    if "inner_sym" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["inner_sym"])

  @inner_sym.setter
  def inner_sym(self, value):
    if value is not None:
      self.operation.attributes["inner_sym"] = value
    elif "inner_sym" in self.operation.attributes:
      del self.operation.attributes["inner_sym"]

  @inner_sym.deleter
  def inner_sym(self):
    del self.operation.attributes["inner_sym"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReleaseOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.release"

  _ODS_REGIONS = (0, True)

  def __init__(self, dest, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(dest))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def dest(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SampledOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.system.sampled"

  _ODS_REGIONS = (0, True)

  def __init__(self, expression, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(expression))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def expression(self):
    return self.operation.operands[0]

  @builtins.property
  def sampledValue(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class StopOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.stop"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, verbosity=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if verbosity is not None: attributes["verbosity"] = verbosity
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def verbosity(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["verbosity"])

  @verbosity.setter
  def verbosity(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["verbosity"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class StructFieldInOutOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.struct_field_inout"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, field, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    attributes["field"] = field
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(StructFieldInOutOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def field(self):
    return _ods_ir.StringAttr(self.operation.attributes["field"])

  @field.setter
  def field(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["field"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class VerbatimExprOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.verbatim.expr"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, format_string, substitutions, *, symbols=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["format_string"] = format_string
    if symbols is not None: attributes["symbols"] = symbols
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def format_string(self):
    return _ods_ir.StringAttr(self.operation.attributes["format_string"])

  @format_string.setter
  def format_string(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format_string"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class VerbatimExprSEOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.verbatim.expr.se"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, format_string, substitutions, *, symbols=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["format_string"] = format_string
    if symbols is not None: attributes["symbols"] = symbols
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def format_string(self):
    return _ods_ir.StringAttr(self.operation.attributes["format_string"])

  @format_string.setter
  def format_string(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format_string"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class VerbatimOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.verbatim"

  _ODS_REGIONS = (0, True)

  def __init__(self, format_string, substitutions, *, symbols=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    attributes["format_string"] = format_string
    if symbols is not None: attributes["symbols"] = symbols
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def format_string(self):
    return _ods_ir.StringAttr(self.operation.attributes["format_string"])

  @format_string.setter
  def format_string(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["format_string"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class WarningOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.warning"

  _ODS_REGIONS = (0, True)

  def __init__(self, substitutions, *, message=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    if message is not None: attributes["message"] = message
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def message(self):
    if "message" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["message"])

  @message.setter
  def message(self, value):
    if value is not None:
      self.operation.attributes["message"] = value
    elif "message" in self.operation.attributes:
      del self.operation.attributes["message"]

  @message.deleter
  def message(self):
    del self.operation.attributes["message"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class WireOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.wire"

  _ODS_REGIONS = (0, True)

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

  @builtins.property
  def inner_sym(self):
    if "inner_sym" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["inner_sym"])

  @inner_sym.setter
  def inner_sym(self, value):
    if value is not None:
      self.operation.attributes["inner_sym"] = value
    elif "inner_sym" in self.operation.attributes:
      del self.operation.attributes["inner_sym"]

  @inner_sym.deleter
  def inner_sym(self):
    del self.operation.attributes["inner_sym"]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class XMROp(_ods_ir.OpView):
  OPERATION_NAME = "sv.xmr"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, path, terminal, *, isRooted=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if bool(isRooted): attributes["isRooted"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    attributes["path"] = path
    attributes["terminal"] = terminal
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def isRooted(self):
    return "isRooted" in self.operation.attributes

  @isRooted.setter
  def isRooted(self, value):
    if bool(value):
      self.operation.attributes["isRooted"] = _ods_ir.UnitAttr.get()
    elif "isRooted" in self.operation.attributes:
      del self.operation.attributes["isRooted"]

  @isRooted.deleter
  def isRooted(self):
    del self.operation.attributes["isRooted"]

  @builtins.property
  def terminal(self):
    return _ods_ir.StringAttr(self.operation.attributes["terminal"])

  @terminal.setter
  def terminal(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["terminal"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class XMRRefOp(_ods_ir.OpView):
  OPERATION_NAME = "sv.xmr.ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, ref, *, stringLeaf=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["ref"] = ref
    if stringLeaf is not None: attributes["stringLeaf"] = stringLeaf
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ref(self):
    return _ods_ir.StringAttr(self.operation.attributes["ref"])

  @ref.setter
  def ref(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["ref"] = value

  @builtins.property
  def stringLeaf(self):
    return _ods_ir.StringAttr(self.operation.attributes["stringLeaf"])

  @stringLeaf.setter
  def stringLeaf(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["stringLeaf"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]
