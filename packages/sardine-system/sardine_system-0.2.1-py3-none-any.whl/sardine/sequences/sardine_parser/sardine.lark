// A pattern is a succession of things ////////////////////////////////////////

?start: pattern
pattern: sum ("," sum?)* -> return_pattern


///////////////////////////////////////////////////////////////////////////////

// Rules concerning numbers ///////////////////////////////////////////////////

?sum: product
    | product "+" sum                  -> addition
    | product "-" sum                  -> substraction
    | product "%" sum                  -> modulo

?product: atom
     | product "*" atom                -> multiplication
     | product "/" atom                -> division
     | product "//" atom               -> floor_division
     | product "|" atom                -> choice
     | product "~" atom                -> random_in_range
     | product "!" atom                -> extend
     | product "!!" atom               -> extend_repeat
     | product "^" atom                -> chord_reverse
     | product "&" atom                -> get_slice

?atom: NUMBER                                              -> number
     | col
     | patname
     | "-" atom                                            -> negation
     | "$"                                                 -> get_time
     | "$" "." "m"                                         -> get_measure
     | "$" "." "p"                                         -> get_phase
     | "r"                                                 -> get_random_number
     | "i" "." LETTER                                      -> get_iterator
     | "i" "." LETTER "=" sum                              -> set_iterator
     | "i" "." LETTER "=" "[" sum "," sum "]"              -> set_iterator_step
     | "i" "." LETTER "." "reset"                          -> reset_iterator
     | "v" "." LETTER                                      -> get_variable
     | "v" "." LETTER "=" sum                              -> set_variable
     | "v" "." LETTER "." "reset"                          -> reset_variable
     | "T" "." "U"                                         -> get_unix_time
     | "T" "." "Y"                                         -> get_year
     | "T" "." "M"                                         -> get_month
     | "T" "." "D"                                         -> get_day
     | "T" "." "h"                                         -> get_hour
     | "T" "." "m"                                         -> get_minute
     | "T" "." "s"                                         -> get_second
     | "T" "." "µ"                                         -> get_microsecond // Unicode character U+00B5
     | "T" "." "μ"                                         -> get_microsecond // Unicode character U+03BC
     | "[" sum ":" sum "]"                                 -> generate_ramp
     | "[" sum ":" sum "," sum  "]"                        -> generate_ramp_with_range
     | "[" sum ("," sum)* ","? "]"                         -> make_list
     | "<" sum ("," sum)* ","? ">"                         -> make_chord
     | SILENCE+                                            -> silence
     | "(" sum ")"
     | NAME "(" sum ("," sum)* ")"                         -> function_call


///////////////////////////////////////////////////////////////////////////////

// Rules concerning names /////////////////////////////////////////////////////

?patname: name_sum

?name_sum: name_product
    | name_sum "!" sum                                    -> extend
    | name_sum "!!" sum                                   -> extend_repeat
    | name_sum "/" name_product                           -> specify_address
    | name_sum ":" sum                                    -> assoc_sp_number

?name_product: name_atom
    | name_product "|" name_atom                          -> choice

?name_atom: NAME                                          -> name
    | "(" name_sum ")"
    | "[" name_sum ("," name_sum)* ","? "]"               -> make_list

///////////////////////////////////////////////////////////////////////////////

// Rules about notes /////////////////////////////////////////////////////////

?col0 : note
      | note "@" NAME             -> add_qualifier

?col1 : col0
      | col0 "^" sum              -> chord_reverse

?col : col1


// Add sugar for chord inversions

?note0: NOTE                     -> make_note

?note1: note0
    | note0 "b"                  -> note_flat
    | note0 "#"                  -> note_sharp

?note2: note1
    | note1 NUMBER               -> note_set_octave

?note3: note2
    | note3 "'"                  -> note_octave_up
    | note3 "."                  -> note_octave_down

?note: note3                     -> finish_note

///////////////////////////////////////////////////////////////////////////////

// Tokens /////////////////////////////////////////////////////////////////////

// Notes start with an uppercase letter, other names start with a lower case letter.
// This helps disambiguating the syntax.
NOTE: "A"|"La"|"B"|"Si"|"Ti"|"D"|"Re"|"Ré"|"C"|"Do"|"E"|"Mi"|"F"|"Fa"|"G"|"Sol"
NAME: LCASE_LETTER (LETTER|DIGIT+)*

SILENCE: "."

%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.LETTER -> LETTER
%import common.DIGIT  -> DIGIT
%import common.NUMBER
%import common.WS_INLINE
%ignore WS_INLINE
