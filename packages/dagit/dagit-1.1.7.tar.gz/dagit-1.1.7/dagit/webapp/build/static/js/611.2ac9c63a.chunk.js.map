{"version":3,"file":"static/js/611.2ac9c63a.chunk.js","mappings":"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","sources":["../../core/src/ui/TimeFromNow.tsx","../../core/src/workspace/CodeLocationMenu.tsx","../../core/src/workspace/RepositoryCountTags.tsx","../../core/src/workspace/CodeLocationRowSet.tsx","../../core/src/workspace/RepositoryLocationsList.tsx","../../core/src/instance/CodeLocationsPage.tsx","../../core/src/nav/InstanceWarningIcon.tsx","../../core/src/nav/WorkspaceStatus.tsx","../../core/src/instance/InstanceTabs.tsx","../../core/src/instance/useCanSeeConfig.tsx","../../core/src/ui/TabLink.tsx","../../core/src/workspace/ReloadAllButton.tsx","../../ui/src/components/Menu.tsx","../../ui/src/components/NonIdealState.tsx"],"sourcesContent":["import {Tooltip} from '@dagster-io/ui';\nimport moment from 'moment-timezone';\nimport * as React from 'react';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: true};\n\nexport const TimeFromNow: React.FC<{unixTimestamp: number}> = ({unixTimestamp}) => {\n  return (\n    <Tooltip\n      placement=\"top\"\n      content={<Timestamp timestamp={{unix: unixTimestamp}} timeFormat={TIME_FORMAT} />}\n    >\n      {moment.unix(unixTimestamp).fromNow()}\n    </Tooltip>\n  );\n};\n","import {\n  Button,\n  Dialog,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Popover,\n  StyledReadOnlyCodeMirror,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport * as yaml from 'yaml';\n\nimport {WorkspaceRepositoryLocationNode} from './WorkspaceContext';\n\nexport const CodeLocationMenu: React.FC<{locationNode: WorkspaceRepositoryLocationNode}> = ({\n  locationNode,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  return (\n    <>\n      <Popover\n        position=\"bottom-left\"\n        content={\n          <Menu>\n            <MenuItem icon=\"info\" text=\"View configuration\" onClick={() => setIsOpen(true)} />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />}></Button>\n      </Popover>\n      <CodeLocationConfigDialog\n        metadata={locationNode.displayMetadata}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n      />\n    </>\n  );\n};\n\nexport const CodeLocationConfigDialog: React.FC<{\n  isOpen: boolean;\n  setIsOpen: (next: boolean) => void;\n  metadata: WorkspaceRepositoryLocationNode['displayMetadata'];\n}> = ({isOpen, setIsOpen, metadata}) => {\n  return (\n    <Dialog\n      title=\"Code location configuration\"\n      icon=\"info\"\n      isOpen={isOpen}\n      onClose={() => setIsOpen(false)}\n      style={{width: '600px'}}\n    >\n      <CodeLocationConfig displayMetadata={metadata} />\n      <DialogFooter topBorder>\n        <Button onClick={() => setIsOpen(false)} intent=\"primary\">\n          Done\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst CodeLocationConfig: React.FC<{\n  displayMetadata: WorkspaceRepositoryLocationNode['displayMetadata'];\n}> = ({displayMetadata}) => {\n  const yamlString = React.useMemo(() => {\n    const kvPairs = displayMetadata.reduce((accum, item) => {\n      return {...accum, [item.key]: item.value};\n    }, {});\n    return yaml.stringify(kvPairs);\n  }, [displayMetadata]);\n\n  return (\n    <StyledReadOnlyCodeMirror\n      value={yamlString}\n      options={{lineNumbers: true, mode: 'yaml'}}\n      theme={['config-editor']}\n    />\n  );\n};\n","import {Box, Tag, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {DagsterRepoOption} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nexport const RepositoryCountTags: React.FC<{\n  repo: DagsterRepoOption['repository'];\n  repoAddress: RepoAddress;\n}> = ({repo, repoAddress}) => {\n  const assetGroupCount = repo.assetGroups.length;\n  const jobCount = repo.pipelines.filter(({name}) => !isHiddenAssetGroupJob(name)).length;\n  const scheduleCount = repo.schedules.length;\n  const sensorCount = repo.sensors.length;\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Tooltip\n        content={assetGroupCount === 1 ? '1 asset group' : `${assetGroupCount} asset groups`}\n        placement=\"top\"\n      >\n        <CountLink to={workspacePathFromAddress(repoAddress, '/assets')}>\n          <Tag interactive icon=\"asset_group\">\n            {assetGroupCount}\n          </Tag>\n        </CountLink>\n      </Tooltip>\n      <Tooltip content={jobCount === 1 ? '1 job' : `${jobCount} jobs`} placement=\"top\">\n        <CountLink to={workspacePathFromAddress(repoAddress, '/jobs')}>\n          <Tag interactive icon=\"job\">\n            {jobCount}\n          </Tag>\n        </CountLink>\n      </Tooltip>\n      <Tooltip\n        content={scheduleCount === 1 ? '1 schedule' : `${scheduleCount} schedules`}\n        placement=\"top\"\n      >\n        <CountLink to={workspacePathFromAddress(repoAddress, '/schedules')}>\n          <Tag interactive icon=\"schedule\">\n            {scheduleCount}\n          </Tag>\n        </CountLink>\n      </Tooltip>\n      <Tooltip content={sensorCount === 1 ? '1 sensor' : `${sensorCount} sensors`} placement=\"top\">\n        <CountLink to={workspacePathFromAddress(repoAddress, '/sensors')}>\n          <Tag interactive icon=\"sensors\">\n            {sensorCount}\n          </Tag>\n        </CountLink>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst CountLink = styled(Link)`\n  :hover,\n  :active {\n    outline: none;\n    text-decoration: none;\n  }\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Icon,\n  JoinedButtons,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {usePermissions} from '../app/Permissions';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\nimport {\n  buildReloadFnForLocation,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\nimport {TimeFromNow} from '../ui/TimeFromNow';\n\nimport {CodeLocationMenu} from './CodeLocationMenu';\nimport {RepositoryCountTags} from './RepositoryCountTags';\nimport {RepositoryLocationNonBlockingErrorDialog} from './RepositoryLocationErrorDialog';\nimport {WorkspaceRepositoryLocationNode} from './WorkspaceContext';\nimport {buildRepoAddress} from './buildRepoAddress';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  locationNode: WorkspaceRepositoryLocationNode;\n}\n\nexport const CodeLocationRowSet: React.FC<Props> = ({locationNode}) => {\n  const {name, locationOrLoadError} = locationNode;\n\n  if (!locationOrLoadError || locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <tr>\n        <td style={{maxWidth: '400px', color: Colors.Gray500}}>\n          <MiddleTruncate text={name} />\n        </td>\n        <td>\n          <LocationStatus location={name} locationOrError={locationNode} />\n        </td>\n        <td style={{whiteSpace: 'nowrap'}}>\n          <TimeFromNow unixTimestamp={locationNode.updatedTimestamp} />\n        </td>\n        <td>{'\\u2013'}</td>\n        <td style={{width: '180px'}}>\n          <JoinedButtons>\n            <ReloadButton location={name} />\n            <CodeLocationMenu locationNode={locationNode} />\n          </JoinedButtons>\n        </td>\n      </tr>\n    );\n  }\n\n  const repositories = [...locationOrLoadError.repositories].sort((a, b) =>\n    a.name.localeCompare(b.name),\n  );\n\n  return (\n    <>\n      {repositories.map((repository) => {\n        const repoAddress = buildRepoAddress(repository.name, name);\n        return (\n          <tr key={repoAddressAsHumanString(repoAddress)}>\n            <td style={{maxWidth: '400px', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress)}>\n                <MiddleTruncate text={repoAddressAsHumanString(repoAddress)} />\n              </Link>\n            </td>\n            <td>\n              <LocationStatus location={repository.name} locationOrError={locationNode} />\n            </td>\n            <td style={{whiteSpace: 'nowrap'}}>\n              <TimeFromNow unixTimestamp={locationNode.updatedTimestamp} />\n            </td>\n            <td>\n              <RepositoryCountTags repo={repository} repoAddress={repoAddress} />\n            </td>\n            <td style={{width: '180px'}}>\n              <JoinedButtons>\n                <ReloadButton location={name} />\n                <CodeLocationMenu locationNode={locationNode} />\n              </JoinedButtons>\n            </td>\n          </tr>\n        );\n      })}\n    </>\n  );\n};\n\nconst LocationStatus: React.FC<{\n  location: string;\n  locationOrError: WorkspaceRepositoryLocationNode;\n}> = (props) => {\n  const {location, locationOrError} = props;\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  const reloadFn = React.useMemo(() => buildReloadFnForLocation(location), [location]);\n  const {reloading, tryReload} = useRepositoryLocationReload({\n    scope: 'location',\n    reloadFn,\n  });\n\n  if (locationOrError.loadStatus === 'LOADING') {\n    if (locationOrError.locationOrLoadError) {\n      return (\n        <Tag minimal intent=\"primary\">\n          Updating...\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag minimal intent=\"primary\">\n          Loading...\n        </Tag>\n      );\n    }\n  }\n\n  if (locationOrError.locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <>\n        <Box flex={{alignItems: 'center', gap: 12}}>\n          <Tag minimal intent=\"danger\">\n            Failed\n          </Tag>\n          <ButtonLink onClick={() => setShowDialog(true)}>\n            <span style={{fontSize: '14px'}}>View error</span>\n          </ButtonLink>\n        </Box>\n        <RepositoryLocationNonBlockingErrorDialog\n          location={location}\n          isOpen={showDialog}\n          error={locationOrError.locationOrLoadError}\n          reloading={reloading}\n          onDismiss={() => setShowDialog(false)}\n          onTryReload={() => tryReload()}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tag minimal intent=\"success\">\n      Loaded\n    </Tag>\n  );\n};\n\nconst ReloadButton: React.FC<{\n  location: string;\n}> = (props) => {\n  const {location} = props;\n  const {canReloadRepositoryLocation} = usePermissions();\n\n  if (!canReloadRepositoryLocation.enabled) {\n    return (\n      <Tooltip content={canReloadRepositoryLocation.disabledReason} useDisabledButtonTooltipFix>\n        <Button icon={<Icon name=\"refresh\" />} disabled>\n          Reload\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <ReloadRepositoryLocationButton location={location}>\n      {({reloading, tryReload}) => (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n          <Button icon={<Icon name=\"refresh\" />} loading={reloading} onClick={() => tryReload()}>\n            Reload\n          </Button>\n        </Box>\n      )}\n    </ReloadRepositoryLocationButton>\n  );\n};\n","import {Box, NonIdealState, Spinner, Table} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {CodeLocationRowSet} from './CodeLocationRowSet';\nimport {WorkspaceContext} from './WorkspaceContext';\n\nexport const RepositoryLocationsList = () => {\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  if (loading && !locationEntries.length) {\n    return (\n      <Box flex={{gap: 8, alignItems: 'center'}} padding={{horizontal: 24}}>\n        <Spinner purpose=\"body-text\" />\n        <div>Loading...</div>\n      </Box>\n    );\n  }\n\n  if (!locationEntries.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"folder\"\n          title=\"No code locations\"\n          description=\"When you add a code location, your definitions will appear here.\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table $monospaceFont={false}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Status</th>\n          <th>Updated</th>\n          <th>Definitions</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {locationEntries.map((location) => (\n          <CodeLocationRowSet key={location.name} locationNode={location} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import {Box, Heading, PageHeader, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepositoryLocationsList} from '../workspace/RepositoryLocationsList';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\n\nexport const CodeLocationsPage = () => {\n  useTrackPageView();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  // Consider each loaded repository to be a \"code location\".\n  const entryCount = React.useMemo(() => {\n    let count = 0;\n    locationEntries.forEach((entry) => {\n      if (!entry.locationOrLoadError || entry.locationOrLoadError?.__typename === 'PythonError') {\n        count += 1;\n      } else {\n        count += entry.locationOrLoadError.repositories.length;\n      }\n    });\n    return count;\n  }, [locationEntries]);\n\n  const subheadingText = () => {\n    if (loading || !entryCount) {\n      return 'Code locations';\n    }\n    return entryCount === 1 ? '1 code location' : `${entryCount} code locations`;\n  };\n\n  return (\n    <>\n      <PageHeader title={<Heading>{pageTitle}</Heading>} tabs={<InstanceTabs tab=\"locations\" />} />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n        style={{height: '64px'}} // Preserve height whether \"Reload all\" is present or not\n      >\n        <Subheading id=\"repository-locations\">{subheadingText()}</Subheading>\n        {entryCount > 1 ? <ReloadAllButton /> : null}\n      </Box>\n      <RepositoryLocationsList />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default CodeLocationsPage;\n","import {Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {InstanceConfigHasInfo} from './types/InstanceConfigHasInfo';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfo>(INSTANCE_CONFIG_HAS_INFO);\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      hasInfo\n    }\n  }\n`;\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {canReloadWorkspace} = usePermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace.enabled) {\n    return (\n      <Tooltip content={canReloadWorkspace.disabledReason}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n","/* eslint-disable no-restricted-imports */\nimport {\n  Intent,\n  Menu as BlueprintMenu,\n  MenuDivider as BlueprintMenuDivider,\n  MenuItem as BlueprintMenuItem,\n} from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Colors} from './Colors';\nimport {IconName, Icon, IconWrapper} from './Icon';\n\ninterface Props extends React.ComponentProps<typeof BlueprintMenu> {}\n\nexport const Menu: React.FC<Props> = (props) => {\n  return <StyledMenu {...props} />;\n};\n\nconst intentToTextColor = (intent: React.ComponentProps<typeof BlueprintMenuItem>['intent']) => {\n  switch (intent) {\n    case 'primary':\n      return Colors.Blue500;\n    case 'danger':\n      return Colors.Red500;\n    case 'success':\n      return Colors.Green500;\n    case 'warning':\n      return Colors.Yellow500;\n    case 'none':\n    default:\n      return Colors.Gray900;\n  }\n};\n\nconst intentToIconColor = (intent: React.ComponentProps<typeof BlueprintMenuItem>['intent']) => {\n  switch (intent) {\n    case 'primary':\n      return Colors.Blue500;\n    case 'danger':\n      return Colors.Red500;\n    case 'success':\n      return Colors.Green500;\n    case 'warning':\n      return Colors.Yellow500;\n    case 'none':\n    default:\n      return Colors.Gray900;\n  }\n};\n\nexport const iconWithColor = (icon?: IconName | JSX.Element, intent?: Intent) => {\n  if (icon) {\n    if (typeof icon === 'string') {\n      return <Icon name={icon} color={intentToIconColor(intent)} />;\n    }\n    return icon;\n  }\n  return null;\n};\n\nexport interface CommonMenuItemProps {\n  icon?: IconName | JSX.Element;\n}\n\ninterface ItemProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof BlueprintMenuItem>, 'href' | 'icon'> {}\n\nexport const MenuItem: React.FC<ItemProps> = (props) => {\n  const {icon, intent, ...rest} = props;\n  return (\n    <StyledMenuItem\n      {...rest}\n      $textColor={intentToTextColor(intent)}\n      icon={iconWithColor(icon, intent)}\n    />\n  );\n};\n\ninterface MenuExternalLinkProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof BlueprintMenuItem>, 'href' | 'icon'> {\n  href: string;\n}\n\n/**\n * If you want to use a menu item as a link, use `MenuLink` and provide a `to` prop.\n */\nexport const MenuExternalLink: React.FC<MenuExternalLinkProps> = (props) => {\n  const {icon, intent, ...rest} = props;\n  return (\n    <StyledMenuItem\n      {...rest}\n      target=\"_blank\"\n      rel=\"noreferrer nofollow\"\n      $textColor={intentToTextColor(intent)}\n      icon={iconWithColor(icon, intent)}\n    />\n  );\n};\n\nexport const MenuDivider = styled(BlueprintMenuDivider)`\n  border-top: 1px solid ${Colors.Gray100};\n  margin: 2px 0;\n`;\n\nconst StyledMenu = styled(BlueprintMenu)`\n  border-radius: 4px;\n  padding: 8px 4px;\n`;\n\ninterface StyledMenuItemProps extends React.ComponentProps<typeof BlueprintMenuItem> {\n  $textColor: string;\n}\n\nconst StyledMenuItem = styled(BlueprintMenuItem)<StyledMenuItemProps>`\n  border-radius: 4px;\n  color: ${({$textColor}) => $textColor};\n  line-height: 20px;\n  padding: 6px 8px 6px 12px;\n  transition: background-color 50ms, box-shadow 150ms;\n  align-items: flex-start;\n  font-size: 14px;\n\n  /**\n   * Use margin instead of align-items: center because the contents of the menu item may wrap \n   * in unusual circumstances.\n   */\n  ${IconWrapper} {\n    margin-top: 2px;\n  }\n\n  &.bp3-intent-primary.bp3-active {\n    background-color: ${Colors.Blue500};\n\n    ${IconWrapper} {\n      background-color: ${Colors.White};\n    }\n  }\n\n  &.bp3-disabled ${IconWrapper} {\n    opacity: 0.5;\n  }\n\n  &.bp3-active ${IconWrapper} {\n    color: ${Colors.White};\n  }\n\n  ${IconWrapper}:first-child {\n    margin-left: -4px;\n  }\n\n  &:hover {\n    background: ${Colors.Gray100};\n    color: ${({$textColor}) => $textColor};\n  }\n\n  &:focus {\n    color: ${({$textColor}) => $textColor};\n    box-shadow: rgba(58, 151, 212, 0.6) 0 0 0 2px;\n    outline: none;\n  }\n`;\n","import * as React from 'react';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {IconName, Icon} from './Icon';\nimport {Spinner} from './Spinner';\nimport {Subheading} from './Text';\n\nexport type NonIdealStateProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n> & {\n  icon: 'error' | 'no-results' | 'spinner' | IconName;\n  title: string;\n  description?: React.ReactNode;\n  action?: React.ReactNode;\n  shrinkable?: boolean;\n};\n\nexport const NonIdealState: React.FC<NonIdealStateProps> = ({\n  title,\n  description,\n  icon,\n  action,\n  shrinkable,\n}) => {\n  const singleContentElement = [title, description, action].filter(Boolean).length === 1;\n\n  return (\n    <Box\n      flex={{gap: 20, alignItems: singleContentElement ? 'center' : 'flex-start'}}\n      background={Colors.Gray50}\n      padding={24}\n      style={{\n        margin: 'auto',\n        borderRadius: 8,\n        width: shrinkable ? 'initial' : 'max-content',\n        maxWidth: 500,\n      }}\n    >\n      {icon === 'spinner' ? (\n        <Spinner purpose=\"section\" />\n      ) : icon === 'no-results' ? (\n        <Icon name=\"search\" size={48} color={Colors.Gray400} />\n      ) : (\n        <Icon name={icon} size={48} color={Colors.Gray400} />\n      )}\n      <Box\n        flex={{\n          gap: 8,\n          direction: 'column',\n          alignItems: 'flex-start',\n        }}\n      >\n        {title && <Subheading style={{color: Colors.Gray900}}>{title}</Subheading>}\n        {description && <div style={{color: Colors.Gray500}}>{description}</div>}\n        {action}\n      </Box>\n    </Box>\n  );\n};\n"],"names":["TIME_FORMAT","showSeconds","showTimezone","TimeFromNow","unixTimestamp","Tooltip","placement","content","Timestamp","timestamp","unix","timeFormat","moment","fromNow","CodeLocationMenu","locationNode","React","isOpen","setIsOpen","Popover","position","Menu","icon","text","onClick","Button","Icon","name","CodeLocationConfigDialog","metadata","displayMetadata","Dialog","title","onClose","style","width","CodeLocationConfig","topBorder","intent","yamlString","kvPairs","reduce","accum","item","key","value","yaml","options","lineNumbers","mode","theme","RepositoryCountTags","repo","repoAddress","assetGroupCount","assetGroups","length","jobCount","pipelines","filter","isHiddenAssetGroupJob","scheduleCount","schedules","sensorCount","sensors","Box","flex","direction","gap","alignItems","CountLink","to","workspacePathFromAddress","Tag","interactive","styled","Link","CodeLocationRowSet","locationOrLoadError","__typename","maxWidth","color","Colors","MiddleTruncate","LocationStatus","location","locationOrError","whiteSpace","updatedTimestamp","ReloadButton","repositories","sort","a","b","localeCompare","map","repository","buildRepoAddress","fontWeight","repoAddressAsHumanString","props","showDialog","setShowDialog","reloadFn","buildReloadFnForLocation","useRepositoryLocationReload","scope","reloading","tryReload","loadStatus","minimal","ButtonLink","fontSize","error","onDismiss","onTryReload","canReloadRepositoryLocation","usePermissions","enabled","ReloadRepositoryLocationButton","loading","disabledReason","useDisabledButtonTooltipFix","disabled","RepositoryLocationsList","WorkspaceContext","locationEntries","padding","horizontal","Spinner","purpose","Table","$monospaceFont","vertical","NonIdealState","description","CodeLocationsPage","useTrackPageView","pageTitle","InstancePageContext","entryCount","count","forEach","entry","PageHeader","tabs","InstanceTabs","tab","justifyContent","height","id","ReloadAllButton","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","modifiers","offset","WorkspaceStatus","placeholder","codeLocations","type","fillColor","refreshState","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","bottom","QueryRefresh","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","gql","rest","containerProps","getTabA11yProps","getTabContent","titleText","undefined","tabCSS","label","canReloadWorkspace","reloadFnForWorkspace","errorLocationId","canEscapeKeyClose","canOutsideClickClose","StyledMenu","intentToTextColor","intentToIconColor","iconWithColor","MenuItem","StyledMenuItem","$textColor","MenuExternalLink","target","rel","MenuDivider","BlueprintMenuDivider","BlueprintMenu","BlueprintMenuItem","IconWrapper","action","shrinkable","singleContentElement","Boolean","background","margin","borderRadius","size"],"sourceRoot":""}