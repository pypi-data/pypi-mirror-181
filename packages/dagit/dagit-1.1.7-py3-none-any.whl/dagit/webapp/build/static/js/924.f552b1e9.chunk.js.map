{"version":3,"file":"static/js/924.f552b1e9.chunk.js","mappings":"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","sources":["../../core/src/instance/useCanSeeConfig.tsx","../../core/src/runs/RunsRoot.tsx","../../core/src/runs/useCursorPaginatedQuery.tsx","../../core/src/ui/StickyTableContainer.tsx","../../../node_modules/lodash/_arrayAggregator.js","../../../node_modules/lodash/_baseAggregator.js","../../../node_modules/lodash/_createAggregator.js","../../../node_modules/lodash/partition.js"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\n\nimport {InstanceConfigHasInfo} from './types/InstanceConfigHasInfo';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfo>(INSTANCE_CONFIG_HAS_INFO);\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      hasInfo\n    }\n  }\n`;\n","import {ApolloError, gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  tokenToString,\n} from '@dagster-io/ui';\nimport partition from 'lodash/partition';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {InstancePageContext} from '../instance/InstancePageContext';\nimport {useCanSeeConfig} from '../instance/useCanSeeConfig';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\n\nimport {useSelectedRunsTab} from './RunListTabs';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from './RunTable';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from './RunsFilterInput';\nimport {RunsPageHeader} from './RunsPageHeader';\nimport {QueueDaemonStatusQuery} from './types/QueueDaemonStatusQuery';\nimport {RunsRootQuery, RunsRootQueryVariables} from './types/RunsRootQuery';\nimport {useCursorPaginatedQuery} from './useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 25;\n\nexport const RunsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Runs');\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n  const canSeeConfig = useCanSeeConfig();\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter,\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const currentTab = useSelectedRunsTab(filterTokens);\n  const staticStatusTags = currentTab !== 'all';\n  const [statusTokens, nonStatusTokens] = partition(\n    filterTokens,\n    (token) => token.token === 'status',\n  );\n\n  const setFilterTokensWithStatus = React.useCallback(\n    (tokens: RunFilterToken[]) => {\n      if (staticStatusTags) {\n        setFilterTokens([...statusTokens, ...tokens]);\n      } else {\n        setFilterTokens(tokens);\n      }\n    },\n    [setFilterTokens, staticStatusTags, statusTokens],\n  );\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!nonStatusTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokensWithStatus([...nonStatusTokens, token]);\n      }\n    },\n    [nonStatusTokens, setFilterTokensWithStatus],\n  );\n\n  const enabledFilters = React.useMemo(() => {\n    const filters: RunFilterTokenType[] = ['tag', 'snapshotId', 'id', 'job', 'pipeline'];\n\n    if (!staticStatusTags) {\n      filters.push('status');\n    }\n\n    return filters;\n  }, [staticStatusTags]);\n\n  const mutableTokens = React.useMemo(() => {\n    if (staticStatusTags) {\n      return filterTokens.filter((token) => token.token !== 'status');\n    }\n    return filterTokens;\n  }, [filterTokens, staticStatusTags]);\n\n  return (\n    <Page>\n      <RunsPageHeader refreshStates={[refreshState]} />\n      {currentTab === 'queued' && canSeeConfig ? (\n        <Box\n          flex={{direction: 'column', gap: 8}}\n          padding={{horizontal: 24, vertical: 16}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Alert\n            intent=\"info\"\n            title={<Link to=\"/config#run_coordinator\">View queue configuration</Link>}\n          />\n          <QueueDaemonAlert />\n        </Box>\n      ) : null}\n      <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n        <Loading\n          queryResult={queryResult}\n          allowStaleData\n          renderError={(error: ApolloError) => {\n            // In this case, a 400 is most likely due to invalid run filters, which are a GraphQL\n            // validation error but surfaced as a 400.\n            const badRequest = !!(\n              error?.networkError &&\n              'statusCode' in error.networkError &&\n              error.networkError.statusCode === 400\n            );\n            return (\n              <Box\n                flex={{direction: 'column', gap: 32}}\n                padding={{vertical: 8, left: 24, right: 12}}\n              >\n                <RunsFilterInput\n                  tokens={mutableTokens}\n                  onChange={setFilterTokensWithStatus}\n                  loading={queryResult.loading}\n                  enabledFilters={enabledFilters}\n                />\n                <NonIdealState\n                  icon=\"warning\"\n                  title={badRequest ? 'Invalid run filters' : 'Unexpected error'}\n                  description={\n                    badRequest\n                      ? 'The specified run filters are not valid. Please check the filters and try again.'\n                      : 'An unexpected error occurred. Check the console for details.'\n                  }\n                />\n              </Box>\n            );\n          }}\n        >\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={pipelineRunsOrError.results.slice(0, PAGE_SIZE)}\n                    onAddTag={onAddTag}\n                    filter={filter}\n                    actionBarComponents={\n                      <Box flex={{direction: 'column', gap: 8}}>\n                        {currentTab !== 'all' ? (\n                          <Box flex={{direction: 'row', gap: 8}}>\n                            {filterTokens\n                              .filter((token) => token.token === 'status')\n                              .map(({token, value}) => (\n                                <Tag key={token}>{`${token}:${value}`}</Tag>\n                              ))}\n                          </Box>\n                        ) : null}\n                        <RunsFilterInput\n                          tokens={mutableTokens}\n                          onChange={setFilterTokensWithStatus}\n                          loading={queryResult.loading}\n                          enabledFilters={enabledFilters}\n                        />\n                      </Box>\n                    }\n                  />\n                </StickyTableContainer>\n                {pipelineRunsOrError.results.length > 0 ? (\n                  <div style={{marginTop: '16px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </RunsQueryRefetchContext.Provider>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunsRoot;\n\nconst RUNS_ROOT_QUERY = gql`\n  query RunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst QueueDaemonAlert = () => {\n  const {data} = useQuery<QueueDaemonStatusQuery>(QUEUE_DAEMON_STATUS_QUERY);\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const status = data?.instance.daemonHealth.daemonStatus;\n  if (status?.required && !status?.healthy) {\n    return (\n      <Alert\n        intent=\"warning\"\n        title=\"The queued run coordinator is not healthy.\"\n        description={\n          <div>\n            View <Link to=\"/health\">{pageTitle}</Link> for details.\n          </div>\n        }\n      />\n    );\n  }\n  return null;\n};\n\nconst QUEUE_DAEMON_STATUS_QUERY = gql`\n  query QueueDaemonStatusQuery {\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"QUEUED_RUN_COORDINATOR\") {\n          id\n          daemonType\n          healthy\n          required\n        }\n      }\n    }\n  }\n`;\n","import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  variables: Omit<Omit<TVars, 'cusor'>, 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n"],"names":["useCanSeeConfig","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","gql","RunsRoot","useTrackPageView","useDocumentTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","filter","runsFilterForSearchTokens","canSeeConfig","useCursorPaginatedQuery","nextCursorForResult","runs","pipelineRunsOrError","__typename","results","PAGE_SIZE","runId","getResultArray","variables","query","RUNS_ROOT_QUERY","pageSize","queryResult","paginationProps","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","currentTab","useSelectedRunsTab","staticStatusTags","partition","token","statusTokens","nonStatusTokens","setFilterTokensWithStatus","React","tokens","onAddTag","tokenAsString","tokenToString","some","enabledFilters","filters","push","mutableTokens","refreshStates","flex","direction","gap","padding","horizontal","vertical","border","side","width","color","Colors","intent","title","to","QueueDaemonAlert","value","refetch","allowStaleData","renderError","error","badRequest","networkError","statusCode","left","right","onChange","loading","icon","description","message","$top","slice","actionBarComponents","map","length","style","marginTop","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","QUEUE_DAEMON_STATUS_QUERY","pageTitle","InstancePageContext","status","daemonHealth","daemonStatus","required","healthy","options","cursorStack","setCursorStack","useQueryPersistedState","queryKey","cursor","setCursor","queryVars","limit","fetchPolicy","partialRefetch","notifyOnNetworkStatusChange","resultArray","hasPrevCursor","hasNextCursor","popCursor","nextStack","pop","advanceCursor","current","nextCursor","reset","undefined","StickyTableContainer","styled","module","exports","array","setter","iteratee","accumulator","index","baseEach","require","collection","key","arrayAggregator","baseAggregator","baseIteratee","isArray","initializer","func","createAggregator","result"],"sourceRoot":""}