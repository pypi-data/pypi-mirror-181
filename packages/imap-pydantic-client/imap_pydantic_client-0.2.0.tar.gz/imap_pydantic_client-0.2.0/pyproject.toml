[tool.poetry]
name = "imap_pydantic_client"
version = "0.2.0"
description = ""
authors = ["alexander.mescheryakov <avm@sh-inc.ru>"]

keywords = ["keyword", "another_keyword"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/MattiooFR/package_name"
repository = "https://github.com/MattiooFR/package_name"
include = [
    "LICENSE",
]


[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^1.10.2"
IMAPClient = "^2.3.1"
Faker = "^15.3.4"
faker-web = "^0.3.1"
mdgen = "^0.1.10"
email-validator = "^1.3.0"

[tool.poetry.dev-dependencies]
icecream = "^2.1.3"
pytest = "^7.2.0"
pre-commit = "^2.20.0"
pydantic-factories = "^1.15.0"
python-dotenv = "^0.21.0"
pytest-mock = "^3.10.0"
pylint = "^2.15.8"

[tool.poetry.scripts]
cli_command_name = 'package_name:function'

[tool.flake8]
ignore = ['C901', 'B902', 'E501', 'E203', 'W503', 'PT011', 'PT023', 'B902', 'C417']
max-line-length = 120
max-complexity = 6
count = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ['*tests*']

[tool.coverage.report]
ignore_errors = true

# Pylint section
[tool.pylint]
    [tool.pylint.master]
    ignore=['CVS']
    jobs=0
    persistent=['yes']
    unsafe-load-any-extension=['no']

    [tool.pylint.'MESSAGES CONTROL']
    disable=['all']
    enable=['old-ne-operator,old-octal-literal,apply-builtin,basestring-builtin,buffer-builtin,cmp-builtin,unichr-builtin,C0203,C0204,C0303,C0304,C0321,C0325,C1001,E0001,E0101,E0104,E0105,E0108,E0213,E0601,E0602,E0701,E0710,E0711,E0712,E1001-E1004,E1111,E1121,E1122,E1200,E1201,E1205,E1206,E1300-E1306,W0101,W0104,W0107,W0109,W0231,W0401']

    [tool.pylint.'REPORTS']
    evaluation=['10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)']
    output-format=['text']
    reports=['no']
        score=['yes']

    [tool.pylint.'REFACTORING']
    max-nested-blocks=5

    [tool.pylint.'MISCELLANEOUS']
    notes=['FIXME,TODO']

    [tool.pylint.'TYPECHECK']
    contextmanager-decorators=['contextlib.contextmanager']
    ignore-mixin-members=['yes']
    ignore-on-opaque-inference=['yes']
    ignored-classes=['optparse.Values,thread._local,_thread._local']
    missing-member-hint=['yes']
    missing-member-hint-distance=1
    missing-member-max-choices=1

    [tool.pylint.'FORMAT']
    ignore-long-lines=['^\s*(# )?<?https?://\S+>?$']
    indent-after-paren=4
    indent-string='    '

    max-line-length=120
    max-module-lines=1000
    no-space-check=['trailing-comma,dict-separator']
    single-line-class-stmt=['no']
    single-line-if-stmt=['no']

    [tool.pylint.'LOGGING']
    logging-modules=['logging']

    [tool.pylint.'BASIC']
    argument-name-hint=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    argument-rgx=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    attr-name-hint=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    attr-rgx=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    bad-names=['foo,bar,baz,toto,tutu,tata']
    class-attribute-name-hint=['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
    class-attribute-rgx=['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
    class-name-hint=['[A-Z_][a-zA-Z0-9]+$']
    class-rgx=['[A-Z_][a-zA-Z0-9]+$']
    const-name-hint=['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
    const-rgx=['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
    docstring-min-length=-1
    function-name-hint=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    function-rgx=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    good-names=['i,j,k,ex,Run,_,x,y,o,id']
    include-naming-hint=['no']
    inlinevar-name-hint=['[A-Za-z_][A-Za-z0-9_]*$']
    inlinevar-rgx=['[A-Za-z_][A-Za-z0-9_]*$']
    method-name-hint=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    method-rgx=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    module-name-hint=['(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$']
    module-rgx=['(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$']
    no-docstring-rgx=['^_']
    property-classes=['abc.abstractproperty']
    variable-name-hint=['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
    variable-rgx=['(([^lO])|([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']

    [tool.pylint.'VARIABLES']
    allow-global-unused-variables=['yes']
    callbacks=['cb_,_cb']
    dummy-variables-rgx=['_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_']
    ignored-argument-names=['_.*|^ignored_|^unused_']
    init-import=['no']
    redefining-builtins-modules=['six.moves,future.builtins']

    [tool.pylint.'SIMILARITIES']
    ignore-comments=['yes']
    ignore-docstrings=['yes']
    ignore-imports=['no']
    min-similarity-lines=4

    [tool.pylint.'SPELLING']
    spelling-store-unknown-words=['no']

    [tool.pylint.'DESIGN']
    max-args=5
    max-attributes=7
    max-bool-expr=5
    max-branches=12
    max-locals=15
    max-parents=7
    max-public-methods=20
    max-returns=6
    max-statements=50
    min-public-methods=2

    [tool.pylint.'IMPORTS']
    allow-wildcard-with-all=['no']
    analyse-fallback-blocks=['no']
    deprecated-modules=['regsub,TERMIOS,Bastion,rexec']
    known-third-party=['enchant']

    [tool.pylint.'CLASSES']
    defining-attr-methods=['__init__,__new__,setUp']
    exclude-protected=['_asdict,_fields,_replace,_source,_make']
    valid-classmethod-first-arg=['cls']
    valid-metaclass-classmethod-first-arg=['mcs']

    [tool.pylint.'EXCEPTIONS']
    overgeneral-exceptions=['Exception']
