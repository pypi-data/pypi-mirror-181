[tox]
envlist =
    cov-clean
    cov-combine
    cov-report
    py{311,310,39,38,37,36}
    py36-mindeps
skip_missing_interpreters = true
minversion = 3.0.0

[testenv]
usedevelop = true
extras = dev
deps =
    mindeps: requests==2.19.1
    mindeps: pyjwt==2.0.0
    mindeps: cryptography==3.3.1
    mindeps: typing_extensions==4.0
commands = coverage run -m pytest {posargs}
depends =
    py36,py37,py38,py39,py36-mindeps: cov-clean
    cov-combine: py36,py37,py38,py39,py36-mindeps
    cov-report: cov-combine

[testenv:cov-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:cov-combine]
deps = coverage
skip_install = true
commands = coverage combine

[testenv:cov-report]
deps = coverage
skip_install = true
commands = coverage report --skip-covered

[testenv:lint]
deps = pre-commit<3
skip_install = true
commands = pre-commit run --all-files

[testenv:mypy{,-mindeps,-test}]
deps =
    mypy==0.982
    types-docutils
    types-jwt
    types-requests
    typing-extensions>=4.0
    mindeps: typing_extensions==4.0
commands =
    !test: mypy src/ {posargs}
    test: mypy --show-error-codes --warn-unused-ignores tests/non-pytest/mypy-ignore-tests/

[testenv:test-lazy-imports]
# these tests are slow and CPU-bound, so they are run with xdist `-n auto` for speed
# reassess if we start using xdist for the main testsuite
deps = pytest-xdist<3
commands =
    pytest -n auto tests/non-pytest/lazy-imports/test_for_import_cycles.py
    pytest tests/unit/test_lazy_imports.py

[testenv:pylint]
deps = pylint
commands = pylint src/

[testenv:pyright]
deps = pyright
commands = pyright src/ {posargs}

[testenv:docs]
# force use of py310 for doc builds so that we get the same behaviors as the
# readthedocs doc build
basepython = python3.10
extras = dev
allowlist_externals = rm
changedir = docs/
# clean the build dir before rebuilding
commands_pre = rm -rf _build/
commands = sphinx-build -d _build/doctrees -b dirhtml -W . _build/dirhtml {posargs}

[testenv:twine-check]
skip_install = true
deps = build
       twine
allowlist_externals = rm
commands_pre = rm -rf dist/
# check that twine validating package data works
commands = python -m build
           twine check dist/*

[testenv:poetry-check]
skip_install = true
deps = poetry
# remove the dist dir because it can lead to (confusing) spurious failures
allowlist_externals = rm
commands_pre = rm -rf dist/
# use `poetry lock` to ensure that poetry can parse our dependencies
changedir = tests/non-pytest/poetry-lock-test
commands = poetry lock

[testenv:prepare-release]
skip_install = true
deps = scriv
commands =
    python changelog.d/check-version-is-new.py
    scriv collect

[testenv:publish-release]
skip_install = true
deps = build
       twine
# clean the build dir before rebuilding
allowlist_externals = rm
commands_pre = rm -rf dist/
commands = python -m build
           twine upload dist/*
