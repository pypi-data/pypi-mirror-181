- name: Ensure octavia_availability_zones variable is correctly defined
  fail:
    msg: "octavia_availability_zones parameter should contain at least one element (is '{{ octavia_availability_zones | default(None) }}')"
  when:
  - octavia_availability_zones is not defined or (octavia_availability_zones | default([]) | length) == 0

- name: Ensure octavia_controller_availability_zone variable is correctly defined
  fail:
    msg: "octavia_controller_availability_zone parameter should contain at least one element (is '{{ octavia_controller_availability_zone | default(None) }}')"
  when:
  - octavia_controller_availability_zone is not defined or (octavia_controller_availability_zone | length) == 0

- name: Create lb-mgmt networks
  shell: |
    if ! openstack network show {{ network_name }} > /dev/null 2>&1; then
      openstack network create {{ network_name }}
    fi
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    network_name: "{{ lb_mgmt_prefix }}{{ network_item }}-net"
  register: result
  changed_when: "'created_at' in result.stdout"
  loop: "{{ ['backbone'] | union(octavia_availability_zones | list) }}"

- name: Create lb-mgmt subnets
  shell: |
    if ! openstack subnet show {{ subnet_name }} > /dev/null 2>&1; then
      openstack subnet create --network {{ network_name }} \
        --ip-version 4 \
        --subnet-range {{ subnet_cidr }} \
        {{ subnet_name }}
    fi
  vars:
    subnet_cidr: "{{ octavia_availability_zones[item]['lb_mgmt_subnet_cidr'] | default(default_subnet_cidr) }}"
    default_subnet_cidr: "{% if item == 'backbone' %}{{ octavia_backbone_tenant_cidr | default(None) }}{% else %}None{% endif %}"
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    network_name: "{{ lb_mgmt_prefix }}{{ network_item }}-net"
    subnet_name: "{{ lb_mgmt_prefix }}{{ network_item }}-subnet"
  register: result
  changed_when: "'created_at' in result.stdout"
  loop: "{{ ['backbone'] | union(octavia_availability_zones | list) }}"

- name: Create lb-mgmt routers
  shell: |
    if ! openstack router show {{ router_name }} > /dev/null 2>&1; then
      openstack router create \
        --availability-zone-hint {{ item }} \
        {{ router_name }}
    fi
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    router_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router"
  register: result
  changed_when: "'created_at' in result.stdout"
  loop: "{{ octavia_availability_zones | list }}"

- name: Add subnets to lb-mgmt routers
  shell: |
    subnet_id=$(openstack subnet show -f value -c id {{ subnet_name }})
    if ! openstack router show {{ router_name }} -f json -c interfaces_info | \
      jq -r ".interfaces_info[].subnet_id" | grep -q $subnet_id; then
      openstack router add subnet \
        {{ router_name }} \
        {{ subnet_name }}
      echo "subnet added"
    fi
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    router_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router"
    subnet_name: "{{ lb_mgmt_prefix }}{{ network_item }}-subnet"
  register: result
  changed_when: "'subnet added' in result.stdout"
  loop: "{{ octavia_availability_zones | list }}"

- name: Create lb-mgmt ports
  shell: |
    if ! openstack port show {{ port_name }} > /dev/null 2>&1; then
      openstack port create \
        --network {{ lb_mgmt_prefix }}-backbone-net \
        {{ port_name }}
    fi
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    port_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router-port"
  register: result
  changed_when: "'created_at' in result.stdout"
  loop: "{{ octavia_availability_zones | list }}"

- name: Add ports to lb-mgmt routers
  shell: |
    port_id=$(openstack port show {{ port_name }} -f value -c id)
    if ! openstack router show {{ router_name }} -f json -c interfaces_info | \
      jq -r ".interfaces_info[].port_id" | grep -q $port_id; then
      openstack router add port \
        {{ router_name }} \
        {{ port_name }}
      echo "port added"
    fi
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    port_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router-port"
    router_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router"
  register: result
  changed_when: "'port added' in result.stdout"
  loop: "{{ octavia_availability_zones | list }}"

- name: Get addresses of lb-mgmt ports
  shell: |
    openstack port show {{ port_name }} -c fixed_ips -f json | \
      jq -r .fixed_ips[0].ip_address
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    port_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router-port"
  register: port_addresses
  changed_when: false
  loop: "{{ octavia_availability_zones | list }}"

- name: Get CIDRs of lb-mgmt subnets
  shell: |
    openstack subnet show {{ subnet_name }} -c cidr -f value
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    subnet_name: "{{ lb_mgmt_prefix }}{{ network_item }}-subnet"
  register: subnet_cidrs
  changed_when: false
  loop: "{{ octavia_availability_zones | list }}"

- name: Add routes to lb-mgmt routers
  shell: |
    openstack router set \
      --no-route \
      {% for address in port_addresses.results %}{% if item != address.item %}--route destination={% for cidr in subnet_cidrs.results %}{% if address.item == cidr.item %}{{ cidr.stdout }}{% endif %}{% endfor %},gateway={{ address.stdout }} {% endif %}{% endfor %} \
      {{ router_name }}
  vars:
    network_item: "{% if item != octavia_controller_availability_zone %}-{{ item }}{% endif %}"
    router_name: "{{ lb_mgmt_prefix }}{{ network_item }}-router"
  loop: "{{ octavia_availability_zones | list }}"
