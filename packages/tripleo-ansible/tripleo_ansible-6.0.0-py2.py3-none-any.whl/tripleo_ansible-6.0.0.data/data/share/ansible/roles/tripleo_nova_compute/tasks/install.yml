---
# Copyright 2022 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: create persistent directories
  file:
    path: "{{ item.path }}"
    setype: "{{ item.setype }}"
    state: directory
    mode: "{{ item.mode | default(omit) }}"
  with_items:
    - { 'path': /var/lib/nova, 'setype': container_file_t }
    - { 'path': /var/lib/_nova_secontext, 'setype': container_file_t}
    - { 'path': /var/lib/nova/instances, 'setype': container_file_t }
    - { 'path': /var/lib/libvirt, 'setype': container_file_t }
    - { 'path': /var/log/containers/nova, 'setype': container_file_t, 'mode': '0750' }

- name: Mount Nova NFS Share
  mount:
    name: /var/lib/nova/instances
    state: mounted
    fstype: nfs4
    src: "{{ tripleo_nova_compute_nfs_share }}"
    opts: _netdev,bg,{{ tripleo_nova_compute_nfs_options }},nfsvers={{ tripleo_nova_compute_nfs_version }}
  when: tripleo_nova_compute_nfs_enabled|bool

- name: Set up systemd target for libvirt services
  copy:
    dest: /etc/systemd/system/tripleo_nova_libvirt.target
    mode: '0644'
    owner: root
    group: root
    content: |
      [Unit]
      Wants=tripleo_nova_virtsecretd.service
      Wants=tripleo_nova_virtnodedevd.service
      Wants=tripleo_nova_virtstoraged.service
      Wants=tripleo_nova_virtproxyd.service
      Wants=tripleo_nova_virtqemud.service
      After=tripleo_nova_virtsecretd.service
      After=tripleo_nova_virtnodedevd.service
      After=tripleo_nova_virtstoraged.service
      After=tripleo_nova_virtproxyd.service
      After=tripleo_nova_virtqemud.service
  register: libvirt_target_result

- name: Reload systemd
  systemd:
    name: tripleo_nova_libvirt.target
    enabled: true
    state: restarted
    daemon_reload: true
  when: libvirt_target_result.changed

- name: install tripleo_nova_libvirt_guests systemd unit file (podman)
  when: tripleo_nova_compute_resume_guests_state_on_host_boot|bool
  block:
    - name: libvirt-guests unit to stop nova_compute container before shutdown VMs
      copy:
        dest: /etc/systemd/system/tripleo_nova_libvirt_guests.service
        content: |
          [Unit]
          Description=Suspend libvirt Guests in tripleo
          Requires=virt-guest-shutdown.target
          After=systemd-machined.service
          After=network-online.target
          After=tripleo_nova_libvirt.target
          Before=tripleo_nova_compute.service
          Documentation=man:libvirtd(8)
          Documentation=https://libvirt.org

          [Service]
          EnvironmentFile=-/etc/sysconfig/libvirt-guests
          ExecStart=/bin/podman exec nova_virtproxyd /bin/rm -f /var/lib/libvirt/libvirt-guests
          ExecStop=/bin/podman exec nova_virtproxyd /bin/sh -x /usr/libexec/libvirt-guests.sh shutdown
          Type=oneshot
          RemainAfterExit=yes
          StandardOutput=journal+console
          TimeoutStopSec=0

          [Install]
          WantedBy=multi-user.target

    - name: Making sure virt-guest-shutdown.target is present
      copy:
        dest: /etc/systemd/system/virt-guest-shutdown.target
        content: |
          [Unit]
          Description=Libvirt guests shutdown
          Documentation=https://libvirt.org

    - name: tripleo_nova_libvirt_guests enable VM shutdown on compute reboot/shutdown
      systemd:
        name: tripleo_nova_libvirt_guests
        enabled: true
        daemon_reload: true

- name: ensure ceph configurations exist
  file:
    path: "{{ tripleo_nova_compute_ceph_config_path }}"
    state: directory

- name: enable virt_sandbox_use_netlink for healthcheck
  seboolean:
    name: virt_sandbox_use_netlink
    persistent: true
    state: true
  when:
    - ansible_facts.selinux is defined
    - ansible_facts.selinux.status == "enabled"

- name: install Instance HA recovery script
  when: tripleo_nova_compute_enable_instance_ha|bool
  block:
  - name: prepare Instance HA script directory
    file:
      path: /var/lib/nova/instanceha
      state: directory

  - name: install Instance HA script that runs nova-compute
    copy:
      content: check-run-nova-compute
      dest: /var/lib/nova/instanceha/check-run-nova-compute
      mode: 0755

  - name: If instance HA is enabled on the node activate the evacuation completed check
    file:
      path: /var/lib/nova/instanceha/enabled
      state: touch
    when: inventory_hostname in groups["compute_instanceha"] | default([])

  - name: install nova-compute delay wrapper script
    copy:
      content: delay-nova-compute
      dest: /var/lib/nova/delay-nova-compute
      mode: 0755
    when: tripleo_nova_compute_startup_delay|int > 0

  - name: disable irqbalance service on compute
    when: tripleo_nova_compute_disable_irq_balance|bool
    service:
      name: irqbalance.service
      state: stopped
      enabled: false
