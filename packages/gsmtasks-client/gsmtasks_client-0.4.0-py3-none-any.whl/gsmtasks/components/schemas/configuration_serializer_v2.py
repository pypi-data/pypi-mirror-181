# Generated by Lapidary.
# All manual changes will be lost!

from __future__ import annotations

import typing
import lapidary.runtime
import pydantic
import gsmtasks.components.schemas.account
import gsmtasks.components.schemas.app_enum
import gsmtasks.components.schemas.configuration_defaults
import gsmtasks.components.schemas.configuration_notification
import gsmtasks.components.schemas.configuration_settings
import gsmtasks.components.schemas.location
import gsmtasks.components.schemas.readable_user
import lapidary.runtime.absent


class ConfigurationSerializerV2Auth(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2Features(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2Templates(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2Tracking(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2Permissions(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2LegacyViews(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2Billing(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class ConfigurationSerializerV2(pydantic.BaseModel):
    id: typing.Annotated[
        typing.Union[
            str,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    account: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.account.Account,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    user: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.readable_user.ReadableUser,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    is_staff: typing.Annotated[
        typing.Union[
            bool,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(),
    ] = lapidary.runtime.absent.ABSENT

    app: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.app_enum.AppEnum,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    version: typing.Annotated[
        typing.Union[
            str,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    auth: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Auth,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    settings: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.configuration_settings.ConfigurationSettings,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    defaults: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.configuration_defaults.ConfigurationDefaults,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    features: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Features,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    templates: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Templates,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    tracking: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Tracking,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    notifications: typing.Annotated[
        typing.Union[
            list[
                gsmtasks.components.schemas.configuration_notification.ConfigurationNotification,
            ],
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    permissions: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Permissions,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    legacy_views: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2LegacyViews,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    location: typing.Annotated[
        typing.Union[
            gsmtasks.components.schemas.location.Location,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    is_client_role: typing.Annotated[
        typing.Union[
            bool,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(),
    ] = lapidary.runtime.absent.ABSENT

    billing: typing.Annotated[
        typing.Union[
            ConfigurationSerializerV2Billing,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            direction=lapidary.runtime.ParamDirection.read,
        ),
    ] = lapidary.runtime.absent.ABSENT

    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


ConfigurationSerializerV2Auth.update_forward_refs()
ConfigurationSerializerV2Features.update_forward_refs()
ConfigurationSerializerV2Templates.update_forward_refs()
ConfigurationSerializerV2Tracking.update_forward_refs()
ConfigurationSerializerV2Permissions.update_forward_refs()
ConfigurationSerializerV2LegacyViews.update_forward_refs()
ConfigurationSerializerV2Billing.update_forward_refs()
ConfigurationSerializerV2.update_forward_refs()
