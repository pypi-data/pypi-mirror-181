lua_shared_dict upstream_servers 10m;
lua_socket_log_errors off;

init_worker_by_lua_block {
     local delay = 30  -- in seconds
     local new_timer = ngx.timer.at
     local log = ngx.log
     local ERR = ngx.ERR
     local DEBUG = ngx.DEBUG
     local WARN = ngx.WARN
     local check

     local upstream_servers = ngx.shared.upstream_servers

     check = function(premature)
        if not premature then
            local f = io.popen("ls /srv/deep-dashboard-runtime/dashboard_*sock")
            for socket in f:lines() do
                local suname = 'unix:'..socket
                local sock = ngx.socket.tcp()
                local ok, err = sock:connect(suname)
                if not ok then
                    log(WARN, "failed to connect to: ", suname)
                else
                    ok, err = sock:close()
                    if not ok then
                        log(WARN, "failed to close connection to:", suname)
                    end
                end
                if ok then
                    log(ERR, "adding server backend;", suname)
                    upstream_servers:set(suname, suname)
                end
            end
        end

        local ok, err = new_timer(delay, check)
        if not ok then
            log(ERR, "failed to create timer: ", err)
            return
        end
     end

     local hdl, err = new_timer(5, check)
     if not hdl then
         log(ERR, "failed to create timer: ", err)
         return
     end

}

upstream backend {
    ip_hash;

    server 127.0.0.1;   # a place holder

    balancer_by_lua_block {
        local balancer = require "ngx.balancer"
        
        local log = ngx.log
        local ERR = ngx.ERR
        local DEBUG = ngx.DEBUG

        if not ngx.ctx.tries then
            ngx.ctx.tries = 0
        end

        local upstream_servers = ngx.shared.upstream_servers:get_keys(0)
        
        if ngx.ctx.tries < #upstream_servers then
            balancer.set_more_tries(1)
        end
        
        ngx.ctx.tries = ngx.ctx.tries + 1

        -- get upstream server
        local socket = upstream_servers[ngx.ctx.tries]
        
        log(DEBUG, "using backend server: ", socket)
        
        local ok, err = balancer.set_current_peer(socket)
        if not ok then
            log(ERR, "failed to set the peer: ", err)
        end
    }

    keepalive 10;  # connection pool
}

server {
    listen 80;
    client_max_body_size 4G;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;

    #ssl on;
    ssl_certificate /srv/ssl/hostcert.pem;
    ssl_certificate_key /srv/ssl/hostkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    location / {
      proxy_set_header Host \$http_host;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_redirect off;
      proxy_buffering off;
#      proxy_pass http://aiohttp;
      proxy_pass http://backend;
    }

    # FIXME(aloga): check this ASAP
    location /static {
      # path for static files
      root /srv/deep-dashboard-runtime/;
    }
}

