Metadata-Version: 2.1
Name: robusdk
Version: 0.0.39
Summary: robusdk
Home-page: http://255.255.255.255/
Author: robusdk
Author-email: root@localhost.localdomain
License: UNLISENCED
Description: ```js
        (async () => {
          const robsdk = require('robusdk')
          const {Coroutine, Sequence, Logger, Awaitable} = require('robusdk')
        
          const Client = robsdk({
            url: 'http://localhost/',
            username: 'username',
            password: 'password'
          })
          const options = {
            repeat: Infinity,
            delay: 1
          }
        
          const rpc = Client('rpc')
          const pipeline = Client('pipeline')
          Logger.info(await new Coroutine([
            new Sequence(() => rpc.methodA(...paramsA), Logger.debug, Logger.error, options),
            new Sequence(() => rpc.methodB(...paramsB), Logger.debug, Logger.error, options),
            new Sequence(() => pipeline.methodA(), Logger.debug, Logger.error, options),
            new Sequence(() => pipeline.methodB(), Logger.debug, Logger.error, options),
            new Awaitable(() => pipeline([methodA, methodB]), Logger.debug, Logger.error),
          ]))
        })()
        ```
        
        ```python
        async def future():
          from robusdk import robusdk, Logger, Sequence, Coroutine, Awaitable
          Client = robsdk(
            url='http://localhost/',
            username='username',
            password='password',
          )
          options = {'repeat': float('inf'), 'delay': 1}
          rpc = Client('rpc')
          pipeline = Client('pipeline')
          Logger.info(await Coroutine([
              Sequence(lambda: rpc.methodA(**paramsA), Logger.debug, Logger.error, options),
              Sequence(lambda: rpc.methodB(**paramsB), Logger.debug, Logger.error, options),
              Sequence(lambda: pipeline.methodA(), Logger.debug, Logger.error, options),
              Sequence(lambda: pipeline.methodB(), Logger.debug, Logger.error, options),
              Awaitable(lambda: pipeline([methodA, methodB]), Logger.debug, Logger.error),
          ]))
        
        from asyncio import run
        run(future())
        ```
        
Keywords: robusdk
Platform: any
Description-Content-Type: text/markdown
