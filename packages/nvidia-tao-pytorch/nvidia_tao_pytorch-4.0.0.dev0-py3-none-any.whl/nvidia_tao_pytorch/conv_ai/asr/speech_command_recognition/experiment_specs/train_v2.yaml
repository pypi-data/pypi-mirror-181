# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
# TLT spec file for training the QuartzNet model for ASR using the Mozilla Common Voice English dataset.

trainer:
  max_epochs: 300

tlt_checkpoint_interval: 1

labels_full: ['visual', 'wow', 'learn', 'backward', 'dog', 'two', 'left', 'happy', 'nine', 'go', 'up', 'bed', 'stop',
              'one', 'zero', 'tree', 'seven', 'on', 'four', 'bird', 'right', 'eight', 'no', 'six', 'forward', 'house',
              'marvin', 'sheila', 'five', 'off', 'three', 'down', 'cat', 'follow', 'yes']

labels_subset: ["yes", "no", "up", "down", "left", "right", "on", "off", "stop", "go", "unknown", "silence"]

labels: ${labels_full}
sample_rate: 16000

model:
  sample_rate: ${sample_rate}
  timesteps: 128
  labels: ${labels}
  repeat: 1
  dropout: 0.0
  kernel_size_factor: 1.0
  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToMFCCPreprocessor
    window_size: 0.025
    window_stride: 0.01
    window: "hann"
    n_mels: &n_mels 64
    n_mfcc: *n_mels
    n_fft: 512

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 2
    time_masks: 2
    freq_width: 15
    time_width: 25
    rect_masks: 5
    rect_time: 25
    rect_freq: 15

  crop_or_pad_augment:
    _target_: nemo.collections.asr.modules.CropOrPadSpectrogramAugmentation
    audio_length: ${model.timesteps}

  encoder:
    _target_: nemo.collections.asr.modules.ConvASREncoder
    feat_in: *n_mels
    activation: relu
    conv_mask: true

    jasper:
      - filters: 128
        repeat: 1
        kernel: [11]
        stride: [1]
        dilation: [1]
        dropout: ${model.dropout}
        residual: false
        separable: true
        kernel_size_factor: ${model.kernel_size_factor}

      - filters: 64
        repeat: ${model.repeat}
        kernel: [13]
        stride: [1]
        dilation: [1]
        dropout: ${model.dropout}
        residual: true
        separable: true
        kernel_size_factor: ${model.kernel_size_factor}

      - filters: 64
        repeat: ${model.repeat}
        kernel: [15]
        stride: [1]
        dilation: [1]
        dropout: ${model.dropout}
        residual: true
        separable: true
        kernel_size_factor: ${model.kernel_size_factor}

      - filters: 64
        repeat: ${model.repeat}
        kernel: [17]
        stride: [1]
        dilation: [1]
        dropout: ${model.dropout}
        residual: true
        separable: true
        kernel_size_factor: ${model.kernel_size_factor}

      - filters: 128
        repeat: 1
        kernel: [29]
        stride: [1]
        dilation: [2]
        dropout: ${model.dropout}
        residual: false
        separable: true
        kernel_size_factor: ${model.kernel_size_factor}

      - filters: &enc_final_filters 128
        repeat: 1
        kernel: [1]
        stride: [1]
        dilation: [1]
        dropout: ${model.dropout}
        residual: false

  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoderClassification
    feat_in: *enc_final_filters
    return_logits: true
    pooling_type: 'avg'

  optim:
    name: novograd
    # _target_: nemo.core.optim.optimizers.Novograd
    lr: 0.05
    # optimizer arguments
    betas: [0.95, 0.5]
    weight_decay: 0.001

    # scheduler setup
    sched:
      name: PolynomialHoldDecayAnnealing

      # Scheduler params
      power: 2.0
      warmup_ratio: 0.05
      hold_ratio: 0.45
      min_lr: 0.001
      last_epoch: -1

training_ds:
  manifest_filepath: ???
  sample_rate: ${sample_rate}
  labels: ${labels}
  batch_size: 128
  shuffle: True
  is_tarred: False
  tarred_audio_filepaths: null
  tarred_shard_strategy: "scatter"
  augmentor:
    shift:
      prob: 1.0
      min_shift_ms: -5.0
      max_shift_ms: 5.0
    white_noise:
      prob: 1.0
      min_level: -90
      max_level: -46

validation_ds:
  manifest_filepath: ???
  sample_rate: ${sample_rate}
  labels: ${labels}
  batch_size: 128
  shuffle: False
  val_loss_idx: 0