{"version":3,"file":"chunks/app_views_settings_project_projectUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {JsonFormObject} from 'sentry/components/forms/types';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport formGroups from 'sentry/data/forms/userFeedback';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}>;\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  submitTimeout: number | undefined = undefined;\n\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        window.setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProjectUserFeedbackSettings;\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","route","title","fields","name","label","placeholder","help","getData","data","options","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","renderComponent","ProjectUserFeedbackSettings","undefined","Sentry","eventId","componentDidMount","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","componentWillUnmount","getEndpoints","orgId","projectId","params","routeTitleGen","renderBody","ButtonList","external","href","priority","onClick","handleClick","saveOnBlur","apiMethod","apiEndpoint","initialData","state","project","disabled","forms","formGroups","space"],"sourceRoot":""}