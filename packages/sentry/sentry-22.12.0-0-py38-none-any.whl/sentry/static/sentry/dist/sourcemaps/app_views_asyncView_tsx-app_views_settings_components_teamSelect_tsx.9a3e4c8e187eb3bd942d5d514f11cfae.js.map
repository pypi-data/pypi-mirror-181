{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yYAMe,MAAMA,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,g1BC+C9B,SAASO,EAAW,GASV,IATU,SAClBC,EAAQ,cACRC,EAAa,WACbC,EAAU,aACVC,EAAY,UACZC,EAAS,aACTC,EAAY,6BACZC,EAA4B,aAC5BC,GACM,EACN,MAAM,MAACC,EAAK,SAAEC,EAAQ,SAAEC,IAAYC,EAAAA,EAAAA,KA+B9BC,EAAUJ,EACbK,QAAOC,IAASb,EAAcc,MAAKC,GAAgBA,EAAaC,OAASH,EAAKG,SAC9EC,KAAI,CAACJ,EAAMK,KAAU,CACpBA,QACAC,MAAON,EAAKG,KACZI,UAAWP,EAAKG,KAChBK,OAAO,QAACC,EAAiB,CAACC,WAAY,GAAIV,KAAMA,QAGpD,OACE,QAAC,KAAK,YACJ,QAAC,KAAW,CAACW,YAAU,aACpBC,EAAAA,EAAAA,GAAE,SACH,QAAC,IAAoB,CACnBC,MAAOf,EACPgB,sBAAuBlB,EACvBmB,SAAUC,KACRC,GAAKtB,EAASsB,EAAEC,OAAOZ,QACvBa,EAAAA,IAEFC,SAjDeC,IACrB,MAAMrB,EAAON,EAAM4B,MAAKC,GAAMA,EAAGpB,OAASkB,EAAOf,QAC7CN,GACFV,EAAUU,EACZ,EA8CMwB,cAAcZ,EAAAA,EAAAA,GAAE,YAChBxB,WAAYA,EACZF,SAAUA,EACVuC,UAAU,QAAO,SAEhB,QAAC,OAACC,GAAO,SACR,QAAC,IAAc,CACb,cAAYd,EAAAA,EAAAA,GAAE,YACdc,OAAQA,EACRC,KAAK,KACLzC,SAAUA,EAAS,UAElB0B,EAAAA,EAAAA,GAAE,aACY,QAKvB,QAAC,IAAS,UAAEnB,GAAe,QAAC,IAAgB,IA7D7B,MACjB,GAA6B,IAAzBN,EAAcyC,OAChB,OAAO,QAAC,IAAY,WAAEhB,EAAAA,EAAAA,GAAE,uBAE1B,MAAMiB,EACqB,IAAzB1C,EAAcyC,QAAgBpC,EAC1BA,EACA,KAEN,OAAOL,EAAciB,KAAIJ,IACvB,QAAC8B,EAAO,CAENC,MAAO1C,EAAac,KACpBH,KAAMA,EACNgC,SAAU7B,GAAQZ,EAAaY,GAC/BjB,SAAUA,EACV2C,eAAgBA,GALX7B,EAAKG,OAOZ,EA2CkD8B,OAGxD,CAnFShD,EAAU,yBA6FnB,MAAM6C,EAAU,QAAC,MAACC,EAAK,KAAE/B,EAAI,SAAEgC,EAAQ,SAAE9C,EAAQ,eAAE2C,GAA6B,SAC9E,QAACK,EAAa,CAAC,eAAa,WAAU,WACpC,QAACC,EAAU,CAACC,GAAK,aAAYL,WAAe/B,EAAKG,QAAQ,UACvD,QAAC,IAAS,CAACH,KAAMA,OAEnB,QAAC,IAAO,CACNqC,QAASR,EACTS,QAAST,EACTU,UAAW,IAAMP,EAAShC,EAAKG,MAC/BjB,SAAUA,EAAS,UAEnB,QAAC,KAAM,CAACyC,KAAK,KAAKa,MAAM,QAAC,KAAY,CAACC,WAAS,EAACd,KAAK,OAASzC,SAAUA,EAAS,UAC9E0B,EAAAA,EAAAA,GAAE,gBAGO,EAfZkB,EAAO,sBAkBb,MAAMrB,GAAoB,OAAOiC,EAAAA,EAAS,qBAAhB,CAAiB,iCAE5BC,GAAKA,EAAEC,MAAMC,gBAAc,yBAIpCX,GAAgB,OAAOY,EAAAA,GAAS,qBAAhB,CAAiB,YAC1BC,EAAAA,EAAAA,GAAM,GAAE,wBAIfZ,GAAa,OAAOa,EAAAA,EAAI,qBAAX,CAAY,wBAEbD,EAAAA,EAAAA,GAAM,GAAE,KAG1B,G","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/teamSelect.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype Props = {\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (team: Team) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  organization: Organization;\n  /**\n   * Teams that are already selected.\n   */\n  selectedTeams: Team[];\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n};\n\nfunction TeamSelect({\n  disabled,\n  selectedTeams,\n  menuHeader,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  confirmLastTeamRemoveMessage,\n  loadingTeams,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n\n  const handleAddTeam = (option: Item) => {\n    const team = teams.find(tm => tm.slug === option.value);\n    if (team) {\n      onAddTeam(team);\n    }\n  };\n\n  const renderBody = () => {\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => (\n      <TeamRow\n        key={team.slug}\n        orgId={organization.slug}\n        team={team}\n        onRemove={slug => onRemoveTeam(slug)}\n        disabled={disabled}\n        confirmMessage={confirmMessage}\n      />\n    ));\n  };\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !selectedTeams.some(selectedTeam => selectedTeam.slug === team.slug))\n    .map((team, index) => ({\n      index,\n      value: team.slug,\n      searchKey: team.slug,\n      label: <DropdownTeamBadge avatarSize={18} team={team} />,\n    }));\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={handleAddTeam}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xs\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  confirmMessage: string | null;\n  disabled: boolean;\n  onRemove: Props['onRemoveTeam'];\n  orgId: string;\n  team: Team;\n};\n\nconst TeamRow = ({orgId, team, onRemove, disabled, confirmMessage}: TeamRowProps) => (\n  <TeamPanelItem data-test-id=\"team-row\">\n    <StyledLink to={`/settings/${orgId}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemove(team.slug)}\n      disabled={disabled}\n    >\n      <Button size=\"xs\" icon={<IconSubtract isCircled size=\"xs\" />} disabled={disabled}>\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default TeamSelect;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","TeamSelect","disabled","selectedTeams","menuHeader","organization","onAddTeam","onRemoveTeam","confirmLastTeamRemoveMessage","loadingTeams","teams","onSearch","fetching","useTeams","options","filter","team","some","selectedTeam","slug","map","index","value","searchKey","label","DropdownTeamBadge","avatarSize","hasButtons","t","items","busyItemsStillVisible","onChange","debounce","e","target","DEFAULT_DEBOUNCE_DURATION","onSelect","option","find","tm","emptyMessage","alignMenu","isOpen","size","length","confirmMessage","TeamRow","orgId","onRemove","renderBody","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","icon","isCircled","TeamBadge","p","theme","fontSizeMedium","PanelItem","space","Link"],"sourceRoot":""}