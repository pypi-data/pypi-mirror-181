{"version":3,"file":"chunks/app_components_featureFeedback_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/featureFeedback/feedbackModal.tsx","webpack:///./app/components/featureFeedback/index.tsx"],"sourcesContent":["import React, {Fragment, useCallback, useMemo, useState} from 'react';\nimport {css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {\n  BrowserClient,\n  defaultIntegrations,\n  defaultStackParser,\n  makeFetchTransport,\n} from '@sentry/react';\nimport {Event} from '@sentry/types';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport Field from 'sentry/components/forms/field';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport {Data} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useProjects from 'sentry/utils/useProjects';\n\nconst feedbackClient = new BrowserClient({\n  // feedback project under Sentry organization\n  dsn: 'https://3c5ef4e344a04a0694d187a1272e96de@o1.ingest.sentry.io/6356259',\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: defaultIntegrations,\n});\n\nconst defaultFeedbackTypes = [\n  t(\"I don't like this feature\"),\n  t('I like this feature'),\n  t('Other reason'),\n];\n\nexport type ChildrenProps<T> = {\n  Body: (props: {\n    children: React.ReactNode;\n    showSelfHostedMessage?: boolean;\n  }) => ReturnType<ModalRenderProps['Body']>;\n  Footer: (props: {\n    onBack?: () => void;\n    onNext?: () => void;\n    primaryDisabledReason?: string;\n    secondaryAction?: React.ReactNode;\n    submitEventData?: Event;\n  }) => ReturnType<ModalRenderProps['Footer']>;\n  Header: (props: {children: React.ReactNode}) => ReturnType<ModalRenderProps['Header']>;\n  onFieldChange: <Field extends keyof T>(field: Field, value: T[Field]) => void;\n  state: T;\n};\n\ntype CustomFeedbackModal<T> = {\n  children: (props: ChildrenProps<T>) => React.ReactNode;\n  featureName: string;\n  initialData: T;\n};\n\ntype DefaultFeedbackModal = {\n  featureName: string;\n  children?: undefined;\n  feedbackTypes?: string[];\n  secondaryAction?: React.ReactNode;\n};\n\nexport type FeedbackModalProps<T extends Data> =\n  | DefaultFeedbackModal\n  | CustomFeedbackModal<T>;\n\nexport function FeedbackModal<T extends Data>({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  ...props\n}: FeedbackModalProps<T> & ModalRenderProps) {\n  const {organization} = useLegacyStore(OrganizationStore);\n  const {projects, initiallyLoaded: projectsLoaded} = useProjects();\n  const location = useLocation();\n  const theme = useTheme();\n  const user = ConfigStore.get('user');\n  const isSelfHosted = ConfigStore.get('isSelfHosted');\n  const [state, setState] = useState<T>(\n    props.children === undefined\n      ? ({subject: undefined, additionalInfo: undefined} as unknown as T)\n      : props.initialData\n  );\n  const isScreenSmall = useMedia(`(max-width: ${theme.breakpoints.small})`);\n\n  const project = useMemo(() => {\n    if (projectsLoaded && location.query.project) {\n      return projects.find(p => p.id === location.query.project);\n    }\n    return undefined;\n  }, [projectsLoaded, projects, location.query.project]);\n\n  const handleSubmit = useCallback(\n    (submitEventData?: Event) => {\n      const message = `${props.featureName} feedback by ${user.email}`;\n\n      const commonEventProps: Event = {\n        message,\n        request: {\n          url: location.pathname,\n        },\n        extra: {\n          orgFeatures: organization?.features ?? [],\n          orgAccess: organization?.access ?? [],\n          projectFeatures: project?.features ?? [],\n        },\n        tags: {\n          featureName: props.featureName,\n        },\n        user,\n        level: 'info',\n      };\n\n      if (props.children === undefined) {\n        const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          contexts: {\n            feedback: {\n              additionalInfo: state.additionalInfo?.trim() ? state.additionalInfo : null,\n            },\n          },\n          message: state.additionalInfo?.trim()\n            ? `${message} - ${feedbackTypes[state.subject]} - ${state.additionalInfo}`\n            : `${message} - ${feedbackTypes[state.subject]}`,\n        });\n      } else {\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          ...(submitEventData ?? {}),\n        });\n      }\n\n      addSuccessMessage(t('Thanks for taking the time to provide us feedback!'));\n      closeModal();\n    },\n    [\n      location.pathname,\n      closeModal,\n      organization?.features,\n      organization?.access,\n      project?.features,\n      user,\n      props,\n      state,\n    ]\n  );\n\n  const ModalHeader = useCallback(\n    ({children: headerChildren}: {children: React.ReactNode}) => {\n      return (\n        <Header closeButton>\n          <h3>{headerChildren}</h3>\n        </Header>\n      );\n    },\n    [Header]\n  );\n\n  const ModalFooter = useCallback(\n    ({\n      onBack,\n      onNext,\n      submitEventData,\n      primaryDisabledReason,\n      secondaryAction,\n    }: Parameters<ChildrenProps<T>['Footer']>[0]) => {\n      return (\n        <Footer>\n          {secondaryAction && (\n            <SecondaryActionWrapper>{secondaryAction}</SecondaryActionWrapper>\n          )}\n          {onBack && (\n            <BackButtonWrapper>\n              <Button onClick={onBack}>{t('Back')}</Button>\n            </BackButtonWrapper>\n          )}\n          <ButtonBar gap={1}>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              title={\n                props.children === undefined\n                  ? !defined(state.subject)\n                    ? t('Required fields must be filled out')\n                    : undefined\n                  : primaryDisabledReason\n              }\n              onClick={onNext ?? (() => handleSubmit(submitEventData))}\n              disabled={\n                props.children === undefined\n                  ? !defined(state.subject)\n                  : defined(primaryDisabledReason)\n              }\n            >\n              {onNext ? t('Next') : isScreenSmall ? t('Submit') : t('Submit Feedback')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      );\n    },\n    [Footer, isScreenSmall, closeModal, handleSubmit, state, props.children]\n  );\n\n  const ModalBody = useCallback(\n    ({\n      children: bodyChildren,\n      showSelfHostedMessage = true,\n    }: Parameters<ChildrenProps<T>['Body']>[0]) => {\n      return (\n        <Body>\n          {bodyChildren}\n          {isSelfHosted && showSelfHostedMessage && (\n            <Alert type=\"info\">\n              {tct(\n                \"You agree that any feedback you submit is subject to Sentry's [privacyPolicy:Privacy Policy] and Sentry may use such feedback without restriction or obligation.\",\n                {\n                  privacyPolicy: <ExternalLink href=\"https://sentry.io/privacy/\" />,\n                }\n              )}\n            </Alert>\n          )}\n        </Body>\n      );\n    },\n    [Body, isSelfHosted]\n  );\n\n  function handleFieldChange<Field extends keyof T>(field: Field, value: T[Field]) {\n    const newState = cloneDeep(state);\n    newState[field] = value;\n    setState(newState);\n  }\n\n  if (props.children === undefined) {\n    const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n\n    return (\n      <Fragment>\n        <ModalHeader>{t('Submit Feedback')}</ModalHeader>\n        <ModalBody>\n          <SelectField\n            label={t('Type of feedback')}\n            name=\"subject\"\n            inline={false}\n            options={feedbackTypes.map((feedbackType, index) => ({\n              value: index,\n              label: feedbackType,\n            }))}\n            placeholder={t('Select type of feedback')}\n            value={state.subject}\n            onChange={value => setState({...state, subject: value})}\n            flexibleControlStateSize\n            stacked\n            required\n          />\n          <Field\n            label={t('Additional feedback')}\n            inline={false}\n            required={false}\n            flexibleControlStateSize\n            stacked\n          >\n            <Textarea\n              name=\"additional-feedback\"\n              value={state.additionalInfo}\n              rows={5}\n              autosize\n              placeholder={t('What did you expect?')}\n              onChange={event =>\n                setState({\n                  ...state,\n                  additionalInfo: event.target.value,\n                })\n              }\n            />\n          </Field>\n        </ModalBody>\n        <ModalFooter secondaryAction={props?.secondaryAction} />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>\n      {props.children({\n        Header: ModalHeader,\n        Body: ModalBody,\n        Footer: ModalFooter,\n        onFieldChange: handleFieldChange,\n        state,\n      })}\n    </Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 680px;\n`;\n\nconst BackButtonWrapper = styled('div')`\n  margin-right: ${space(1)};\n  width: 100%;\n`;\n\nconst SecondaryActionWrapper = styled('div')`\n  flex: 1;\n  align-self: center;\n`;\n","import React from 'react';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {\n  FeedbackModal,\n  FeedbackModalProps,\n  modalCss,\n} from 'sentry/components/featureFeedback/feedbackModal';\nimport {Data} from 'sentry/components/forms/types';\nimport {IconMegaphone} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nexport type FeatureFeedbackProps<T extends Data> = FeedbackModalProps<T> & {\n  buttonProps?: Partial<ButtonProps>;\n  secondaryAction?: React.ReactNode;\n};\n\n// Provides a button that, when clicked, opens a modal with a form that,\n// when filled and submitted, will send feedback to Sentry (feedbacks project).\nexport function FeatureFeedback<T extends Data>({\n  buttonProps = {},\n  ...props\n}: FeatureFeedbackProps<T>) {\n  function handleClick(e: React.MouseEvent) {\n    openModal(modalProps => <FeedbackModal {...modalProps} {...props} />, {\n      modalCss,\n    });\n\n    buttonProps.onClick?.(e);\n  }\n\n  return (\n    <Button {...buttonProps} icon={<IconMegaphone />} onClick={handleClick}>\n      {t('Give Feedback')}\n    </Button>\n  );\n}\n"],"names":["feedbackClient","BrowserClient","dsn","transport","makeFetchTransport","stackParser","defaultStackParser","integrations","defaultIntegrations","defaultFeedbackTypes","t","FeedbackModal","Header","Body","Footer","closeModal","props","organization","useLegacyStore","OrganizationStore","projects","initiallyLoaded","projectsLoaded","useProjects","location","useLocation","theme","useTheme","user","ConfigStore","isSelfHosted","state","setState","useState","undefined","children","subject","additionalInfo","initialData","isScreenSmall","useMedia","breakpoints","small","project","useMemo","query","find","p","id","handleSubmit","useCallback","submitEventData","message","featureName","email","commonEventProps","request","url","pathname","extra","orgFeatures","features","orgAccess","access","projectFeatures","tags","level","feedbackTypes","captureEvent","contexts","feedback","trim","addSuccessMessage","ModalHeader","headerChildren","closeButton","ModalFooter","onBack","onNext","primaryDisabledReason","secondaryAction","SecondaryActionWrapper","BackButtonWrapper","onClick","gap","priority","title","defined","disabled","ModalBody","bodyChildren","showSelfHostedMessage","type","tct","privacyPolicy","href","Fragment","label","name","inline","options","map","feedbackType","index","value","placeholder","onChange","flexibleControlStateSize","stacked","required","rows","autosize","event","target","onFieldChange","field","newState","cloneDeep","modalCss","space","FeatureFeedback","buttonProps","icon","e","openModal","modalProps"],"sourceRoot":""}