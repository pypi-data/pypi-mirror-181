{"version":3,"file":"chunks/app_views_settings_project_projectCreateServiceHook_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/settings/project/projectCreateServiceHook.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import {useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction MultipleCheckbox({choices, value, disabled, onChange}: Props) {\n  const handleChange = useCallback(\n    (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n      let newValue: SelectedValue = [];\n\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      if (e.target.checked) {\n        newValue = value ? [...value, selectedValue] : [value];\n      } else {\n        newValue = value.filter(v => v !== selectedValue);\n      }\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  return (\n    <MultipleCheckboxWrapper>\n      {choices.map(([choiceValue, choiceLabel]) => (\n        <LabelContainer key={choiceValue}>\n          <Label>\n            <input\n              type=\"checkbox\"\n              value={choiceValue}\n              onChange={e => handleChange(choiceValue, e)}\n              disabled={disabled}\n              checked={defined(value) && value.indexOf(choiceValue) !== -1}\n            />\n            <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n          </Label>\n        </LabelContainer>\n      ))}\n    </MultipleCheckboxWrapper>\n  );\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectCreateServiceHook({params}: Props) {\n  const {orgId, projectId} = params;\n  const title = t('Create Service Hook');\n\n  return (\n    <SentryDocumentTitle title={title}>\n      <Fragment>\n        <SettingsPageHeader title={title} />\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          initialData={{events: [], isActive: true}}\n        />\n      </Fragment>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default ProjectCreateServiceHook;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport BooleanField from 'sentry/components/forms/fields/booleanField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Choices, ServiceHook} from 'sentry/types';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  orgId: string;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","choices","value","disabled","onChange","handleChange","useCallback","selectedValue","e","newValue","target","checked","filter","v","map","choiceValue","choiceLabel","LabelContainer","type","defined","indexOf","p","theme","breakpoints","small","medium","large","ProjectCreateServiceHook","params","orgId","projectId","title","t","Fragment","initialData","events","isActive","EVENT_CHOICES","ServiceHookSettingsForm","Component","this","props","browserHistory","render","hookId","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","name","label","required","help","inline"],"sourceRoot":""}