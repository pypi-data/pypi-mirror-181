{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryFunctionDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionsEnvironmentVariables.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionSubscriptions.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionDetails.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {TextField} from 'sentry/components/forms';\nimport {PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  envVariables: {\n    name: string;\n    value: string;\n  }[];\n  setEnvVariables: (envVariables) => void;\n};\n\nfunction SentryFunctionEnvironmentVariables(props: Props) {\n  const {envVariables, setEnvVariables} = props;\n\n  const addEnvVar = () => {\n    setEnvVariables([...envVariables, {name: '', value: ''}]);\n  };\n\n  const handleNameChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], name: value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const handleValueChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const removeEnvVar = (pos: number) => {\n    const newEnvVariables = [...envVariables];\n    newEnvVariables.splice(pos, 1);\n    setEnvVariables(newEnvVariables);\n  };\n\n  return (\n    <div>\n      <PanelHeader>\n        {t('Environment Variables')}\n        <StyledAddButton\n          size=\"sm\"\n          type=\"button\"\n          icon={<IconAdd isCircled />}\n          aria-label={t('Add Environment Variable')}\n          onClick={addEnvVar}\n        />\n      </PanelHeader>\n      <StyledPanelBody>\n        <EnvironmentVariableWrapper>\n          <EnvHeader>{t('Name')}</EnvHeader>\n          <EnvHeaderRight>{t('Value')}</EnvHeaderRight>\n        </EnvironmentVariableWrapper>\n        {envVariables.map((envVariable, i) => {\n          return (\n            <EnvironmentVariableWrapper key={i}>\n              <TextField\n                name={`env-variable-name-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.name}\n                value={envVariable.name}\n                stacked\n                onChange={e => handleNameChange(e, i)}\n              />\n              <TextField\n                name={`env-variable-value-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.value}\n                value={envVariable.value}\n                stacked\n                onChange={e => handleValueChange(e, i)}\n              />\n              <ButtonHolder>\n                <StyledAddButton\n                  size=\"sm\"\n                  icon={<IconDelete />}\n                  type=\"button\"\n                  aria-label={tct('Remove Environment Variable [i]', {i})}\n                  onClick={() => removeEnvVar(i)}\n                />\n              </ButtonHolder>\n            </EnvironmentVariableWrapper>\n          );\n        })}\n      </StyledPanelBody>\n    </div>\n  );\n}\n\nexport default SentryFunctionEnvironmentVariables;\n\nconst EnvironmentVariableWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1.5fr min-content;\n`;\n\nconst StyledAddButton = styled(Button)`\n  float: right;\n`;\n\nconst EnvHeader = styled('div')`\n  text-align: left;\n  margin-top: ${space(2)};\n  margin-bottom: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\nconst EnvHeaderRight = styled(EnvHeader)`\n  margin-left: -${space(2)};\n`;\n\nconst ButtonHolder = styled('div')`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n`;\n","import styled from '@emotion/styled';\n\nimport {EVENT_CHOICES} from './constants';\nimport SubscriptionBox from './subscriptionBox';\n\ntype Resource = typeof EVENT_CHOICES[number];\n\ntype Props = {\n  events: string[];\n  setEvents: (events: string[]) => void;\n};\n\nfunction SentryFunctionSubscriptions(props: Props) {\n  const {events, setEvents} = props;\n\n  function onChange(resource: Resource, checked: boolean) {\n    if (checked && !events.includes(resource)) {\n      setEvents(events.concat(resource));\n    } else if (!checked && events.includes(resource)) {\n      setEvents(events.filter(e => e !== resource));\n    }\n  }\n\n  return (\n    <SentryFunctionsSubscriptionGrid>\n      {EVENT_CHOICES.map(resource => (\n        <SubscriptionBox\n          key={resource}\n          disabledFromPermissions={false}\n          webhookDisabled={false}\n          checked={props.events.includes(resource)}\n          resource={resource}\n          onChange={onChange}\n          isNew={resource === 'comment'}\n        />\n      ))}\n    </SentryFunctionsSubscriptionGrid>\n  );\n}\n\nexport default SentryFunctionSubscriptions;\nconst SentryFunctionsSubscriptionGrid = styled('div')`\n  display: grid;\n  grid-template: auto / 1fr 1fr 1fr;\n  @media (max-width: ${props => props.theme.breakpoints.large}) {\n    grid-template: 1fr 1fr 1fr / auto;\n  }\n`;\n","import {useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport Editor from '@monaco-editor/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {Field} from 'sentry/components/forms/types';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {SentryFunction} from 'sentry/types';\n\nimport SentryFunctionEnvironmentVariables from './sentryFunctionsEnvironmentVariables';\nimport SentryFunctionSubscriptions from './sentryFunctionSubscriptions';\n\nfunction transformData(data: Record<string, any>) {\n  const events: string[] = [];\n  if (data.onIssue) {\n    events.push('issue');\n  }\n  if (data.onError) {\n    events.push('error');\n  }\n  if (data.onComment) {\n    events.push('comment');\n  }\n  delete data.onIssue;\n  delete data.onError;\n  delete data.onComment;\n  data.events = events;\n\n  const envVariables: EnvVariable[] = [];\n  let i = 0;\n  while (data[`env-variable-name-${i}`]) {\n    if (data[`env-variable-value-${i}`]) {\n      envVariables.push({\n        name: data[`env-variable-name-${i}`],\n        value: data[`env-variable-value-${i}`],\n      });\n    }\n    delete data[`env-variable-name-${i}`];\n    delete data[`env-variable-value-${i}`];\n    i++;\n  }\n  data.envVariables = envVariables;\n\n  const {...output} = data;\n  return output;\n}\n\ntype Props = {\n  sentryFunction?: SentryFunction;\n} & WrapperProps;\n\ntype EnvVariable = {\n  name: string;\n  value: string;\n};\nconst formFields: Field[] = [\n  {\n    name: 'name',\n    type: 'string',\n    required: true,\n    placeholder: 'e.g. My Sentry Function',\n    label: 'Name',\n    help: 'Human readable name of your Sentry Function',\n  },\n  {\n    name: 'author',\n    type: 'string',\n    placeholder: 'e.g. Acme Software',\n    label: 'Author',\n    help: 'The company or person who built and maintains this Sentry Function.',\n  },\n  {\n    name: 'overview',\n    type: 'string',\n    placeholder: 'e.g. This Sentry Function does something useful',\n    label: 'Overview',\n    help: 'A short description of your Sentry Function.',\n  },\n];\n\nfunction SentryFunctionDetails(props: Props) {\n  const [form] = useState(() => new FormModel({transformData}));\n\n  const {orgId, functionSlug} = props.params;\n  const {sentryFunction} = props;\n  const method = functionSlug ? 'PUT' : 'POST';\n  let endpoint = `/organizations/${orgId}/functions/`;\n  if (functionSlug) {\n    endpoint += `${functionSlug}/`;\n  }\n  const defaultCode = sentryFunction\n    ? sentryFunction.code\n    : `exports.yourFunction = (req, res) => {\n    let message = req.query.message || req.body.message || 'Hello World!';\n    console.log('Query: ' + req.query);\n    console.log('Body: ' + req.body);\n    res.status(200).send(message);\n  };`;\n\n  const [events, setEvents] = useState(sentryFunction?.events || []);\n\n  useEffect(() => {\n    form.setValue('onIssue', events.includes('issue'));\n    form.setValue('onError', events.includes('error'));\n    form.setValue('onComment', events.includes('comment'));\n  }, [form, events]);\n\n  const [envVariables, setEnvVariables] = useState(\n    sentryFunction?.env_variables?.length\n      ? sentryFunction?.env_variables\n      : [{name: '', value: ''}]\n  );\n\n  const handleSubmitError = err => {\n    let errorMessage = t('Unknown Error');\n    if (err.status >= 400 && err.status < 500) {\n      errorMessage = err?.responseJSON.detail ?? errorMessage;\n    }\n    addErrorMessage(errorMessage);\n  };\n\n  const handleSubmitSuccess = data => {\n    addSuccessMessage(t('Sentry Function successfully saved.', data.name));\n    const baseUrl = `/settings/${orgId}/developer-settings/sentry-functions/`;\n    const url = `${baseUrl}${data.slug}/`;\n    if (sentryFunction) {\n      addSuccessMessage(t('%s successfully saved.', data.name));\n    } else {\n      addSuccessMessage(t('%s successfully created.', data.name));\n    }\n    browserHistory.push(url);\n  };\n\n  function handleEditorChange(value, _event) {\n    form.setValue('code', value);\n  }\n\n  return (\n    <div>\n      <Feature features={['organizations:sentry-functions']}>\n        <h2>\n          {sentryFunction ? t('Editing Sentry Function') : t('Create Sentry Function')}\n        </h2>\n        <Form\n          apiMethod={method}\n          apiEndpoint={endpoint}\n          model={form}\n          onPreSubmit={() => {\n            addLoadingMessage(t('Saving changes..'));\n          }}\n          initialData={{\n            code: defaultCode,\n            events,\n            envVariables,\n            ...props.sentryFunction,\n          }}\n          onSubmitError={handleSubmitError}\n          onSubmitSuccess={handleSubmitSuccess}\n        >\n          <JsonForm forms={[{title: t('Sentry Function Details'), fields: formFields}]} />\n          <Panel>\n            <PanelHeader>{t('Webhooks')}</PanelHeader>\n            <PanelBody>\n              <SentryFunctionSubscriptions events={events} setEvents={setEvents} />\n            </PanelBody>\n          </Panel>\n          <Panel>\n            <SentryFunctionEnvironmentVariables\n              envVariables={envVariables}\n              setEnvVariables={setEnvVariables}\n            />\n          </Panel>\n          <Panel>\n            <PanelHeader>{t('Write your Code Below')}</PanelHeader>\n            <PanelBody>\n              <Editor\n                height=\"40vh\"\n                theme=\"light\"\n                defaultLanguage=\"javascript\"\n                defaultValue={defaultCode}\n                onChange={handleEditorChange}\n                options={{\n                  minimap: {\n                    enabled: false,\n                  },\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            </PanelBody>\n          </Panel>\n        </Form>\n      </Feature>\n    </div>\n  );\n}\n\ntype WrapperState = {\n  sentryFunction?: SentryFunction;\n} & AsyncComponent['state'];\n\ntype WrapperProps = {\n  params: {orgId: string; functionSlug?: string};\n} & AsyncComponent['props'];\n\nclass SentryFunctionsWrapper extends AsyncComponent<WrapperProps, WrapperState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {functionSlug, orgId} = this.props.params;\n    if (functionSlug) {\n      return [['sentryFunction', `/organizations/${orgId}/functions/${functionSlug}/`]];\n    }\n    return [];\n  }\n  renderBody() {\n    return (\n      <SentryFunctionDetails sentryFunction={this.state.sentryFunction} {...this.props} />\n    );\n  }\n}\n\nexport default SentryFunctionsWrapper;\n"],"names":["SentryFunctionEnvironmentVariables","props","envVariables","setEnvVariables","t","StyledAddButton","size","type","icon","isCircled","onClick","name","value","StyledPanelBody","EnvironmentVariableWrapper","EnvHeader","EnvHeaderRight","map","envVariable","i","required","inline","defaultValue","stacked","onChange","e","pos","newEnvVariables","length","push","handleNameChange","handleValueChange","ButtonHolder","tct","splice","removeEnvVar","Button","space","p","theme","gray400","PanelBody","SentryFunctionSubscriptions","events","setEvents","resource","checked","includes","concat","filter","SentryFunctionsSubscriptionGrid","EVENT_CHOICES","disabledFromPermissions","webhookDisabled","isNew","breakpoints","large","transformData","data","onIssue","onError","onComment","output","formFields","placeholder","label","help","SentryFunctionDetails","form","useState","FormModel","orgId","functionSlug","params","sentryFunction","method","endpoint","defaultCode","code","useEffect","setValue","env_variables","features","apiMethod","apiEndpoint","model","onPreSubmit","addLoadingMessage","initialData","onSubmitError","err","errorMessage","status","responseJSON","detail","addErrorMessage","onSubmitSuccess","addSuccessMessage","url","slug","browserHistory","forms","title","fields","height","defaultLanguage","_event","options","minimap","enabled","scrollBeyondLastLine","SentryFunctionsWrapper","AsyncComponent","getEndpoints","this","renderBody","state"],"sourceRoot":""}