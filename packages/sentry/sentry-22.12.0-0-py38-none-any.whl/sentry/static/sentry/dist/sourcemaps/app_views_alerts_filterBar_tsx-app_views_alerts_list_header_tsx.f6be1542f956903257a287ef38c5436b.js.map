{"version":3,"file":"chunks/app_views_alerts_filterBar_tsx-app_views_alerts_list_header_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/createAlertButton.tsx","webpack:///./app/views/alerts/filterBar.tsx","webpack:///./app/views/alerts/list/header.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconSiren} from 'sentry/icons';\nimport type {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization, Project} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\nimport useRouter from 'sentry/utils/useRouter';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\nexport type CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  /**\n   * Passed in value to override any metrics decision and switch back to transactions dataset.\n   * We currently do a few checks on metrics data on performance pages and this passes the decision onward to alerts.\n   */\n  disableMetricDataset?: boolean;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onClick?: () => void;\n\n  referrer?: string;\n};\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onClick,\n  alertType,\n  disableMetricDataset,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = {\n    pathname: `/organizations/${organization.slug}/alerts/new/metric/`,\n    query: {\n      ...queryParams,\n      createFromDiscover: true,\n      disableMetricDataset,\n      referrer,\n      ...alertTemplate,\n      project: project?.slug,\n      aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n    },\n  };\n\n  const handleClick = () => {\n    onClick?.();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype CreateAlertButtonProps = {\n  organization: Organization;\n  alertOption?: keyof typeof AlertWizardAlertNames;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  /**\n   * Callback when the button is clicked.\n   * This is different from `onClick` which always overrides the default\n   * behavior when the button was clicked.\n   */\n  onEnter?: () => void;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & ButtonProps;\n\nconst CreateAlertButton = ({\n  organization,\n  projectSlug,\n  iconProps,\n  referrer,\n  hideIcon,\n  showPermissionGuide,\n  alertOption,\n  onEnter,\n  ...buttonProps\n}: CreateAlertButtonProps) => {\n  const router = useRouter();\n  const api = useApi();\n  const createAlertUrl = (providedProj: string): string => {\n    const params = new URLSearchParams();\n    if (referrer) {\n      params.append('referrer', referrer);\n    }\n    if (providedProj !== ':projectId') {\n      params.append('project', providedProj);\n    }\n    if (alertOption) {\n      params.append('alert_option', alertOption);\n    }\n    return `/organizations/${organization.slug}/alerts/wizard/?${params.toString()}`;\n  };\n\n  function handleClickWithoutProject(event: React.MouseEvent) {\n    event.preventDefault();\n    onEnter?.();\n\n    navigateTo(createAlertUrl(':projectId'), router);\n  }\n\n  async function enableAlertsMemberWrite() {\n    const settingsEndpoint = `/organizations/${organization.slug}/`;\n    addLoadingMessage();\n    try {\n      await api.requestPromise(settingsEndpoint, {\n        method: 'PUT',\n        data: {\n          alertsMemberWrite: true,\n        },\n      });\n      addSuccessMessage(t('Successfully updated organization settings'));\n    } catch (err) {\n      addErrorMessage(t('Unable to update organization settings'));\n    }\n  }\n\n  const permissionTooltipText = tct(\n    'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n    {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n  );\n\n  const renderButton = (hasAccess: boolean) => (\n    <Button\n      disabled={!hasAccess}\n      title={!hasAccess ? permissionTooltipText : undefined}\n      icon={!hideIcon && <IconSiren {...iconProps} />}\n      to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n      tooltipProps={{\n        isHoverable: true,\n        position: 'top',\n        overlayStyle: {\n          maxWidth: '270px',\n        },\n      }}\n      onClick={projectSlug ? onEnter : handleClickWithoutProject}\n      {...buttonProps}\n    >\n      {buttonProps.children ?? t('Create Alert')}\n    </Button>\n  );\n\n  const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n  return (\n    <Access organization={organization} access={['alerts:write']}>\n      {({hasAccess}) =>\n        showGuide ? (\n          <Access organization={organization} access={['org:write']}>\n            {({hasAccess: isOrgAdmin}) => (\n              <GuideAnchor\n                target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n              >\n                {renderButton(hasAccess)}\n              </GuideAnchor>\n            )}\n          </Access>\n        ) : (\n          renderButton(hasAccess)\n        )\n      }\n    </Access>\n  );\n};\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n","import styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport TeamFilter from './list/rules/teamFilter';\nimport {getQueryStatus, getTeamParams} from './utils';\n\ninterface Props {\n  location: Location<any>;\n  onChangeFilter: (activeFilters: string[]) => void;\n  onChangeSearch: (query: string) => void;\n  hasStatusFilters?: boolean;\n  onChangeStatus?: (status: string) => void;\n}\n\nfunction FilterBar({\n  location,\n  onChangeSearch,\n  onChangeFilter,\n  onChangeStatus,\n  hasStatusFilters,\n}: Props) {\n  const selectedTeams = getTeamParams(location.query.team);\n  const selectedStatus = getQueryStatus(location.query.status);\n\n  return (\n    <Wrapper>\n      <FilterButtons gap={1.5}>\n        <TeamFilter selectedTeams={selectedTeams} handleChangeFilter={onChangeFilter} />\n        <ProjectPageFilter />\n        {hasStatusFilters && onChangeStatus && (\n          <CompactSelect\n            triggerProps={{\n              prefix: t('Status'),\n            }}\n            options={[\n              {\n                value: 'all',\n                label: t('All'),\n              },\n              {\n                value: 'open',\n                label: t('Active'),\n              },\n              {\n                value: 'closed',\n                label: t('Inactive'),\n              },\n            ]}\n            value={selectedStatus}\n            onChange={({value}) => onChangeStatus(value)}\n          />\n        )}\n      </FilterButtons>\n      <SearchBar\n        placeholder={t('Search by name')}\n        query={location.query?.name}\n        onSearch={onChangeSearch}\n      />\n    </Wrapper>\n  );\n}\n\nexport default FilterBar;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: min-content 1fr;\n  }\n`;\n\nconst FilterButtons = styled(ButtonBar)`\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: flex-start;\n    gap: ${space(1.5)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: grid;\n    grid-auto-columns: minmax(auto, 300px);\n  }\n`;\n","import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport {IconSettings} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\n\ntype Props = {\n  activeTab: 'stream' | 'rules';\n  router: InjectedRouter;\n};\n\nconst AlertHeader = ({router, activeTab}: Props) => {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>\n          {t('Alerts')}\n          <PageHeadingQuestionTooltip\n            title={tct(\n              'Real-time visibility into problems with your code and the impact on your users, along with a view of your existing alert rules, their status, project, team, and creation date. [link: Read the docs].',\n              {link: <ExternalLink href=\"https://docs.sentry.io/product/alerts/\" />}\n            )}\n          />\n        </StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <Actions gap={1}>\n          <CreateAlertButton\n            organization={organization}\n            iconProps={{size: 'sm'}}\n            size=\"sm\"\n            priority=\"primary\"\n            referrer=\"alert_stream\"\n            showPermissionGuide\n            projectSlug={\n              selection.projects.length === 1\n                ? ProjectsStore.getById(`${selection.projects[0]}`)?.slug\n                : undefined\n            }\n          >\n            {t('Create Alert')}\n          </CreateAlertButton>\n          <Button\n            size=\"sm\"\n            onClick={handleNavigateToSettings}\n            href=\"#\"\n            icon={<IconSettings size=\"sm\" />}\n            aria-label={t('Settings')}\n          />\n        </Actions>\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        {alertRulesLink}\n        <li className={activeTab === 'stream' ? 'active' : ''}>\n          <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n            {t('History')}\n          </GlobalSelectionLink>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n};\n\nexport default AlertHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","CreateAlertFromViewButton","projects","eventView","referrer","onClick","alertType","disableMetricDataset","buttonProps","project","find","p","id","queryParams","generateQueryStringObject","query","slug","replace","alertTemplate","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","to","pathname","createFromDiscover","aggregate","yAxis","CreateAlertButton","projectSlug","iconProps","hideIcon","showPermissionGuide","alertOption","onEnter","router","useRouter","api","useApi","createAlertUrl","providedProj","params","URLSearchParams","append","toString","handleClickWithoutProject","event","preventDefault","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","tct","settingsLink","renderButton","disabled","title","undefined","icon","tooltipProps","isHoverable","position","overlayStyle","maxWidth","showGuide","isOrgAdmin","target","onFinish","FilterBar","location","onChangeSearch","onChangeFilter","onChangeStatus","hasStatusFilters","selectedTeams","getTeamParams","team","selectedStatus","getQueryStatus","status","Wrapper","FilterButtons","gap","handleChangeFilter","triggerProps","prefix","options","value","label","onChange","placeholder","name","onSearch","space","theme","breakpoints","small","ButtonBar","AlertHeader","activeTab","useOrganization","selection","usePageFilters","alertRulesLink","className","StyledLayoutTitle","link","href","Actions","size","priority","length","ProjectsStore","e","underlined","Layout"],"sourceRoot":""}