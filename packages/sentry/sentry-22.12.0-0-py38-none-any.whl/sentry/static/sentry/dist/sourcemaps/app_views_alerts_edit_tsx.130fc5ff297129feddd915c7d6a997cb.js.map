{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/edit.tsx","webpack:///./app/views/alerts/edit.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport RuleForm from 'sentry/views/alerts/rules/metric/ruleForm';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  onChangeTitle: (data: string) => void;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  actions: Map<string, any>;\n  rule: MetricRule; // This is temp\n} & AsyncView['state'];\n\nclass MetricRulesEdit extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getTitle(): string {\n    const {organization, project} = this.props;\n    const {rule} = this.state;\n    const ruleName = rule?.name;\n\n    return routeTitleGen(\n      ruleName ? t('Alert %s', ruleName) : '',\n      organization.slug,\n      false,\n      project?.slug\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {rule} = this.state;\n    if (rule?.errors) {\n      (rule?.errors || []).map(({detail}) => addErrorMessage(detail, {append: true}));\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId, ruleId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push({\n      pathname: `/organizations/${orgId}/alerts/rules/details/${ruleId}/`,\n    });\n  };\n\n  renderError(error?: Error, disableLog = false): React.ReactNode {\n    const {errors} = this.state;\n    const notFound = Object.values(errors).find(resp => resp && resp.status === 404);\n    if (notFound) {\n      return (\n        <Alert type=\"error\" showIcon>\n          {t('This alert rule could not be found.')}\n        </Alert>\n      );\n    }\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        disableProjectSelector\n      />\n    );\n  }\n}\n\nexport default MetricRulesEdit;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Member, Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesEdit from 'sentry/views/alerts/rules/metric/edit';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  members: Member[] | undefined;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAdvancedAnalyticsEvent('edit_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): AlertRuleType {\n    return location.pathname.includes('/alerts/metric-rules/')\n      ? AlertRuleType.METRIC\n      : AlertRuleType.ISSUE;\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes, members} =\n      this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueEditor\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                      members={members}\n                    />\n                  )}\n                  {hasMetricAlerts && alertType === AlertRuleType.METRIC && (\n                    <MetricRulesEdit\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"names":["MetricRulesEdit","AsyncView","router","this","props","orgId","ruleId","params","metric","name","push","pathname","getDefaultState","super","actions","Map","getTitle","organization","project","rule","state","ruleName","routeTitleGen","t","slug","getEndpoints","onRequestSuccess","stateKey","data","onChangeTitle","onLoadAllEndpointsSuccess","errors","map","detail","addErrorMessage","append","renderError","error","disableLog","Object","values","find","resp","status","type","showIcon","renderBody","onSubmitSuccess","handleSubmitSuccess","disableProjectSelector","ProjectAlertsEditor","Component","setState","componentDidMount","trackAdvancedAnalyticsEvent","project_id","id","alert_type","getAlertType","location","includes","AlertRuleType","render","hasMetricAlerts","routes","members","alertType","Fragment","title","orgSlug","projectSlug","EditConditionsBody","provideUserTeams","teams","initiallyLoaded","handleChangeTitle","userTeamIds","Layout"],"sourceRoot":""}