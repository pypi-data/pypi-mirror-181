{"version":3,"file":"chunks/app_views_admin_adminEnvironment_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8oBAsBe,MAAMA,UAAyBC,EAAAA,EAC5CC,eACE,MAAO,CAAC,CAAC,OAAQ,0BACnB,CAEAC,aACE,MAAM,KAACC,GAAQC,KAAKC,OACd,YAACC,EAAW,OAAEC,EAAM,cAAEC,GAAiBL,GAEvC,QAACM,GAAWC,EAAAA,EAAAA,WAElB,OACE,0BACE,wBAAKC,EAAAA,EAAAA,GAAE,iBAENL,GACC,cAAIM,UAAU,OAAM,WAClB,QAACC,EAAY,YACVF,EAAAA,EAAAA,GAAE,kBACFF,EAAQK,mBACP,QAAC,KAAM,CACLC,OAAOJ,EAAAA,EAAAA,GACL,yEACAF,EAAQO,QAEV,cAAYL,EAAAA,EAAAA,GACV,yEACAF,EAAQO,QAEVC,SAAS,OACTC,KAAK,+CACLC,MAAM,QAAC,KAAY,CAACC,KAAK,OACzBA,KAAK,KACLC,UAAQ,QAId,wBACE,eAAKT,UAAU,MAAK,SAAEH,EAAQa,aAGhC,wBAAKX,EAAAA,EAAAA,GAAE,qBACP,wBACE,eAAKC,UAAU,MAAK,SAAEJ,OAExB,wBAAKG,EAAAA,EAAAA,GAAE,yBACP,wBACE,eAAKC,UAAU,MAAK,SAAEN,EAAYC,YAEpC,wBAAKI,EAAAA,EAAAA,GAAE,aACP,wBACE,eAAKC,UAAU,MAAK,UACjBW,IAAOjB,EAAYkB,YAAYC,OAAM,GAAK,UAAS,IACnDnB,EAAYkB,WAAU,aAK7B,uBACGb,EAAAA,EAAAA,GAAE,2EAIP,wBACGe,EAAAA,EAAAA,IAAI,6BAA8B,CACjCC,WAAYrB,EAAYC,SAAU,0BAAQD,EAAYC,cAI1D,cAAIK,UAAU,OAAM,SACjBL,EAAOqB,KAAI,QAAEC,EAAKC,GAAM,SACvB,QAAC,EAAAC,SAAQ,YACP,uBAAKF,KACL,wBACE,eAAKjB,UAAU,MAAK,SAAEkB,QAHXD,EAKJ,QAKrB,EAGF,MAAMhB,GAAe,OAAO,KAAI,oBAAX,CAAY,kDAGxBmB,EAAAA,EAAAA,GAAM,GAAE,uB,wPCvGF,MAAMhC,UAGXiC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACpB,MAAOX,KAAK8B,WAAW,SACzC9B,KAAKgC,mBAGZ,EAdmBpC,EAAS,uB","sources":["webpack:///./app/views/admin/adminEnvironment.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport Button from 'sentry/components/button';\nimport {IconQuestion} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Data = {\n  config: [key: string, value: string][];\n  environment: {\n    config: string;\n    start_date: string;\n  };\n  pythonVersion: string;\n};\n\ntype State = AsyncView['state'] & {data: Data};\n\nexport default class AdminEnvironment extends AsyncView<{}, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/internal/environment/']];\n  }\n\n  renderBody() {\n    const {data} = this.state;\n    const {environment, config, pythonVersion} = data;\n\n    const {version} = ConfigStore.getState();\n\n    return (\n      <div>\n        <h3>{t('Environment')}</h3>\n\n        {environment ? (\n          <dl className=\"vars\">\n            <VersionLabel>\n              {t('Server Version')}\n              {version.upgradeAvailable && (\n                <Button\n                  title={t(\n                    \"You're running an old version of Sentry, did you know %s is available?\",\n                    version.latest\n                  )}\n                  aria-label={t(\n                    \"You're running an old version of Sentry, did you know %s is available?\",\n                    version.latest\n                  )}\n                  priority=\"link\"\n                  href=\"https://github.com/getsentry/sentry/releases\"\n                  icon={<IconQuestion size=\"sm\" />}\n                  size=\"sm\"\n                  external\n                />\n              )}\n            </VersionLabel>\n            <dd>\n              <pre className=\"val\">{version.current}</pre>\n            </dd>\n\n            <dt>{t('Python Version')}</dt>\n            <dd>\n              <pre className=\"val\">{pythonVersion}</pre>\n            </dd>\n            <dt>{t('Configuration File')}</dt>\n            <dd>\n              <pre className=\"val\">{environment.config}</pre>\n            </dd>\n            <dt>{t('Uptime')}</dt>\n            <dd>\n              <pre className=\"val\">\n                {moment(environment.start_date).toNow(true)} (since{' '}\n                {environment.start_date})\n              </pre>\n            </dd>\n          </dl>\n        ) : (\n          <p>\n            {t('Environment not found (are you using the builtin Sentry webserver?).')}\n          </p>\n        )}\n\n        <h3>\n          {tct('Configuration [configPath]', {\n            configPath: environment.config && <small>{environment.config}</small>,\n          })}\n        </h3>\n\n        <dl className=\"vars\">\n          {config.map(([key, value]) => (\n            <Fragment key={key}>\n              <dt>{key}</dt>\n              <dd>\n                <pre className=\"val\">{value}</pre>\n              </dd>\n            </Fragment>\n          ))}\n        </dl>\n      </div>\n    );\n  }\n}\n\nconst VersionLabel = styled('dt')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["AdminEnvironment","AsyncView","getEndpoints","renderBody","data","this","state","environment","config","pythonVersion","version","ConfigStore","t","className","VersionLabel","upgradeAvailable","title","latest","priority","href","icon","size","external","current","moment","start_date","toNow","tct","configPath","map","key","value","Fragment","space","AsyncComponent","getTitle","render","renderComponent"],"sourceRoot":""}