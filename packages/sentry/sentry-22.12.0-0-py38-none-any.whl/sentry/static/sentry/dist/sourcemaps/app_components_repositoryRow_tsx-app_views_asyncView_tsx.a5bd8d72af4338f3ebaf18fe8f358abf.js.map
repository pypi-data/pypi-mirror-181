{"version":3,"file":"chunks/app_components_repositoryRow_tsx-app_views_asyncView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/integrations.tsx","webpack:///./app/components/acl/access.tsx","webpack:///./app/components/repositoryEditForm.tsx","webpack:///./app/components/repositoryRow.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t, tct} from 'sentry/locale';\nimport {Integration, Repository} from 'sentry/types';\n\nconst api = new Client();\n\n/**\n * Removes an integration from a project.\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to remove\n */\nexport function removeIntegrationFromProject(\n  orgId: string,\n  projectId: string,\n  integration: Integration\n) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'DELETE'}).then(\n    () => {\n      addSuccessMessage(t('Disabled %s for %s', integration.name, projectId));\n    },\n    () => {\n      addErrorMessage(t('Failed to disable %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Add an integration to a project\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to add\n */\nexport function addIntegrationToProject(\n  orgId: string,\n  projectId: string,\n  integration: Integration\n) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'PUT'}).then(\n    () => {\n      addSuccessMessage(t('Enabled %s for %s', integration.name, projectId));\n    },\n    () => {\n      addErrorMessage(t('Failed to enabled %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Delete a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function deleteRepository(client: Client, orgId: string, repositoryId: string) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to delete repository.'))\n  );\n  return promise;\n}\n\n/**\n * Cancel the deletion of a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function cancelDeleteRepository(\n  client: Client,\n  orgId: string,\n  repositoryId: string\n) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'PUT',\n      data: {status: 'visible'},\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to cancel deletion.'))\n  );\n  return promise;\n}\n\nfunction applyRepositoryAddComplete(promise: Promise<Repository>) {\n  promise.then(\n    (repo: Repository) => {\n      const message = tct('[repo] has been successfully added.', {\n        repo: repo.name,\n      });\n      addSuccessMessage(message);\n    },\n    errorData => {\n      const text = errorData.responseJSON.errors\n        ? errorData.responseJSON.errors.__all__\n        : t('Unable to add repository.');\n      addErrorMessage(text);\n    }\n  );\n  return promise;\n}\n\n/**\n * Migrate a repository to a new integration.\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n * @param {Object} integration Integration provider data.\n */\nexport function migrateRepository(\n  client: Client,\n  orgId: string,\n  repositoryId: string,\n  integration: Integration\n) {\n  const data = {integrationId: integration.id};\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      data,\n      method: 'PUT',\n    }\n  );\n  return applyRepositoryAddComplete(promise);\n}\n\n/**\n * Add a repository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} name Repository identifier/name to add\n * @param {Object} integration Integration provider data.\n */\nexport function addRepository(\n  client: Client,\n  orgId: string,\n  name: string,\n  integration: Integration\n) {\n  const data = {\n    installation: integration.id,\n    identifier: name,\n    provider: `integrations:${integration.provider.key}`,\n  };\n  addLoadingMessage();\n  const promise = client.requestPromise(`/organizations/${orgId}/repos/`, {\n    method: 'POST',\n    data,\n  });\n  return applyRepositoryAddComplete(promise);\n}\n","import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {FieldFromConfig} from 'sentry/components/forms';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {Repository} from 'sentry/types';\n\nimport Alert from './alert';\n\ntype Props = Pick<FormProps, 'onSubmitSuccess' | 'onCancel'> & {\n  closeModal: () => void;\n  onSubmitSuccess: (data: any) => void;\n  orgSlug: string;\n  repository: Repository;\n};\n\nconst formFields: Field[] = [\n  {\n    name: 'name',\n    type: 'string',\n    required: true,\n    label: t('Name of your repository.'),\n  },\n  {\n    name: 'url',\n    type: 'string',\n    required: false,\n    label: t('Full URL to your repository.'),\n    placeholder: t('https://github.com/my-org/my-repo/'),\n  },\n];\n\nfunction RepositoryEditForm({\n  repository,\n  onCancel,\n  orgSlug,\n  onSubmitSuccess,\n  closeModal,\n}: Props) {\n  const initialData = {\n    name: repository.name,\n    url: repository.url || '',\n  };\n\n  return (\n    <Form\n      initialData={initialData}\n      onSubmitSuccess={data => {\n        onSubmitSuccess(data);\n        closeModal();\n      }}\n      apiEndpoint={`/organizations/${orgSlug}/repos/${repository.id}/`}\n      apiMethod=\"PUT\"\n      onCancel={onCancel}\n    >\n      <Alert type=\"warning\" showIcon>\n        {tct(\n          'Changing the [name:repo name] may have consequences if it no longer matches the repo name used when [link:sending commits with releases].',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/product/cli/releases/#sentry-cli-commit-integration\" />\n            ),\n            name: <strong>repo name</strong>,\n          }\n        )}\n      </Alert>\n      {formFields.map(field => (\n        <FieldFromConfig\n          key={field.name}\n          field={field}\n          inline={false}\n          stacked\n          flexibleControlStateSize\n        />\n      ))}\n    </Form>\n  );\n}\n\nexport default RepositoryEditForm;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  cancelDeleteRepository,\n  deleteRepository,\n} from 'sentry/actionCreators/integrations';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {PanelItem} from 'sentry/components/panels';\nimport RepositoryEditForm from 'sentry/components/repositoryEditForm';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Repository, RepositoryStatus} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  organization: Organization;\n  repository: Repository;\n  onRepositoryChange?: (data: {id: string; status: RepositoryStatus}) => void;\n  showProvider?: boolean;\n};\n\nfunction getStatusLabel(repo: Repository) {\n  switch (repo.status) {\n    case RepositoryStatus.PENDING_DELETION:\n      return 'Deletion Queued';\n    case RepositoryStatus.DELETION_IN_PROGRESS:\n      return 'Deletion in Progress';\n    case RepositoryStatus.DISABLED:\n      return 'Disabled';\n    case RepositoryStatus.HIDDEN:\n      return 'Disabled';\n    default:\n      return null;\n  }\n}\n\nfunction RepositoryRow({\n  api,\n  repository,\n  onRepositoryChange,\n  organization,\n  orgId,\n  showProvider = false,\n}: Props) {\n  const isCustomRepo =\n    organization.features.includes('integrations-custom-scm') &&\n    repository.provider.id === 'integrations:custom_scm';\n\n  const isActive = repository.status === RepositoryStatus.ACTIVE;\n\n  const cancelDelete = () =>\n    cancelDeleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n\n  const deleteRepo = () =>\n    deleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n\n  const handleEditRepo = (data: Repository) => {\n    onRepositoryChange?.(data);\n  };\n\n  const renderDeleteButton = (hasAccess: boolean) => (\n    <Tooltip\n      title={t(\n        'You must be an organization owner, manager or admin to remove a repository.'\n      )}\n      disabled={hasAccess}\n    >\n      <Confirm\n        disabled={\n          !hasAccess || (!isActive && repository.status !== RepositoryStatus.DISABLED)\n        }\n        onConfirm={deleteRepo}\n        message={t(\n          'Are you sure you want to remove this repository? All associated commit data will be removed in addition to the repository.'\n        )}\n      >\n        <StyledButton\n          size=\"xs\"\n          icon={<IconDelete size=\"xs\" />}\n          aria-label={t('delete')}\n          disabled={!hasAccess}\n        />\n      </Confirm>\n    </Tooltip>\n  );\n\n  const triggerModal = () =>\n    openModal(({Body, Header, closeModal}) => (\n      <Fragment>\n        <Header closeButton>{t('Edit Repository')}</Header>\n        <Body>\n          <RepositoryEditForm\n            orgSlug={orgId}\n            repository={repository}\n            onSubmitSuccess={handleEditRepo}\n            closeModal={closeModal}\n            onCancel={closeModal}\n          />\n        </Body>\n      </Fragment>\n    ));\n\n  return (\n    <Access access={['org:integrations']}>\n      {({hasAccess}) => (\n        <StyledPanelItem status={repository.status}>\n          <RepositoryTitleAndUrl>\n            <RepositoryTitle>\n              <strong>{repository.name}</strong>\n              {!isActive && <small> &mdash; {getStatusLabel(repository)}</small>}\n              {repository.status === RepositoryStatus.PENDING_DELETION && (\n                <StyledButton\n                  size=\"xs\"\n                  onClick={cancelDelete}\n                  disabled={!hasAccess}\n                  data-test-id=\"repo-cancel\"\n                >\n                  {t('Cancel')}\n                </StyledButton>\n              )}\n            </RepositoryTitle>\n            <div>\n              {showProvider && <small>{repository.provider.name}</small>}\n              {showProvider && repository.url && <span>&nbsp;&mdash;&nbsp;</span>}\n              {repository.url && (\n                <small>\n                  <ExternalLink href={repository.url}>\n                    {repository.url.replace('https://', '')}\n                  </ExternalLink>\n                </small>\n              )}\n            </div>\n          </RepositoryTitleAndUrl>\n          {isCustomRepo ? (\n            <EditAndDelete>\n              <StyledButton\n                size=\"xs\"\n                icon={<IconEdit size=\"xs\" />}\n                aria-label={t('edit')}\n                disabled={\n                  !hasAccess ||\n                  (!isActive && repository.status !== RepositoryStatus.DISABLED)\n                }\n                onClick={triggerModal}\n              />\n              {renderDeleteButton(hasAccess)}\n            </EditAndDelete>\n          ) : (\n            renderDeleteButton(hasAccess)\n          )}\n        </StyledPanelItem>\n      )}\n    </Access>\n  );\n}\n\nconst StyledPanelItem = styled(PanelItem)<{status: RepositoryStatus}>`\n  /* shorter top padding because of title lineheight */\n  padding: ${space(1)} ${space(2)} ${space(2)};\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n\n  ${p =>\n    p.status === RepositoryStatus.DISABLED &&\n    `\n    filter: grayscale(1);\n    opacity: 0.4;\n  `};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst RepositoryTitleAndUrl = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst EditAndDelete = styled('div')`\n  display: flex;\n  margin-left: ${space(1)};\n`;\n\nconst RepositoryTitle = styled('div')`\n  /* accommodate cancel button height */\n  line-height: 26px;\n`;\n\nexport default withOrganization(RepositoryRow);\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["deleteRepository","client","orgId","repositoryId","addLoadingMessage","promise","requestPromise","method","then","clearIndicators","addErrorMessage","t","cancelDeleteRepository","data","status","applyRepositoryAddComplete","repo","message","tct","name","addSuccessMessage","errorData","text","responseJSON","errors","__all__","migrateRepository","integration","integrationId","id","addRepository","installation","identifier","provider","key","Client","DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","formFields","required","label","placeholder","RepositoryEditForm","repository","onCancel","orgSlug","onSubmitSuccess","closeModal","initialData","url","apiEndpoint","apiMethod","link","href","map","field","inline","stacked","flexibleControlStateSize","getStatusLabel","RepositoryStatus","RepositoryRow","api","onRepositoryChange","showProvider","isCustomRepo","features","isActive","cancelDelete","deleteRepo","handleEditRepo","renderDeleteButton","title","disabled","onConfirm","StyledButton","size","icon","triggerModal","openModal","Body","Header","Fragment","closeButton","StyledPanelItem","RepositoryTitleAndUrl","RepositoryTitle","onClick","replace","EditAndDelete","PanelItem","space","p","Button","AsyncView","AsyncComponent","getTitle","renderComponent"],"sourceRoot":""}