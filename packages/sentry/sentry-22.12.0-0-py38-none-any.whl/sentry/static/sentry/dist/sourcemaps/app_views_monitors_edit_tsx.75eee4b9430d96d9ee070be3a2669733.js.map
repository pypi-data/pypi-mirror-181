{"version":3,"file":"chunks/app_views_monitors_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/edit.tsx","webpack:///./app/views/monitors/monitorForm.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{monitorId: string; orgId: string}, {}> & {\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass EditMonitor extends AsyncView<Props, State> {\n  get orgSlug() {\n    return this.props.organization.slug;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`]];\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  onSubmitSuccess = (data: Monitor) =>\n    browserHistory.push(`/organizations/${this.orgSlug}/monitors/${data.id}/`);\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.orgSlug}`;\n    }\n    return `Monitors - ${this.orgSlug}`;\n  }\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <h1>{t('Edit Monitor')}</h1>\n\n          <MonitorForm\n            monitor={monitor}\n            apiMethod=\"PUT\"\n            apiEndpoint={`/monitors/${monitor.id}/`}\n            onSubmitSuccess={this.onSubmitSuccess}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nexport default withOrganization(EditMonitor);\n","import {Component, Fragment} from 'react';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'sentry/components/acl/access';\nimport Field from 'sentry/components/forms/field';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {PageFilters, Project, SelectValue} from 'sentry/types';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {Monitor, MonitorConfig, MonitorTypes, ScheduleType} from './types';\n\nconst SCHEDULE_TYPES: SelectValue<ScheduleType>[] = [\n  {value: 'crontab', label: 'Crontab'},\n  {value: 'interval', label: 'Interval'},\n];\n\nconst DEFAULT_MONITOR_TYPE = 'cron_job';\n\nconst INTERVALS: SelectValue<string>[] = [\n  {value: 'minute', label: 'minute(s)'},\n  {value: 'hour', label: 'hour(s)'},\n  {value: 'day', label: 'day(s)'},\n  {value: 'week', label: 'week(s)'},\n  {value: 'month', label: 'month(s)'},\n  {value: 'year', label: 'year(s)'},\n];\n\ntype Props = {\n  apiEndpoint: string;\n  apiMethod: FormProps['apiMethod'];\n  onSubmitSuccess: FormProps['onSubmitSuccess'];\n  projects: Project[];\n  selection: PageFilters;\n  monitor?: Monitor;\n  submitLabel?: string;\n};\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nfunction transformData(_data: Record<string, any>, model: FormModel) {\n  return model.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n    if (k.indexOf('config.') !== 0) {\n      data[k] = v;\n      return data;\n    }\n\n    if (!data.config) {\n      data.config = {};\n    }\n    if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n      if (!Array.isArray(data.config.schedule)) {\n        data.config.schedule = [null, null];\n      }\n    }\n\n    if (k === 'config.schedule.frequency') {\n      data.config!.schedule![0] = parseInt(v as string, 10);\n    } else if (k === 'config.schedule.interval') {\n      data.config!.schedule![1] = v;\n    } else {\n      data.config[k.substr(7)] = v;\n    }\n\n    return data;\n  }, {});\n}\n\nclass MonitorForm extends Component<Props> {\n  form = new FormModel({transformData});\n\n  formDataFromConfig(type: MonitorTypes, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor, submitLabel} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type ?? DEFAULT_MONITOR_TYPE,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                    type: DEFAULT_MONITOR_TYPE,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n            submitLabel={submitLabel}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  options={this.props.projects\n                    .filter(p => p.isMember)\n                    .map(p => ({value: p.slug, label: p.slug}))}\n                  help={t(\n                    \"Select the project which contains the recurring job you'd like to monitor.\"\n                  )}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name your cron monitor')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <NumberField\n                  name=\"config.max_runtime\"\n                  label={t('Max Runtime')}\n                  disabled={!hasAccess}\n                  help={t(\n                    \"Set the number of minutes a recurring job is allowed to run before it's considered failed\"\n                  )}\n                  placeholder=\"e.g. 30\"\n                />\n                <SelectField\n                  name=\"config.schedule_type\"\n                  label={t('Schedule Type')}\n                  disabled={!hasAccess}\n                  options={SCHEDULE_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * * *\"\n                              required\n                              help={tct(\n                                'Any schedule changes will be applied to the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The max error margin (in minutes) before a check-in is considered missed. If you don't expect your job to start immediately at the scheduled time, expand this margin to account for delays.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              help={t(\n                                'The amount of intervals that pass between executions of the cron job.'\n                              )}\n                              required\n                            />\n                            <SelectField\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              options={INTERVALS}\n                              help={t(\n                                'The interval on which the frequency will be applied. 1 time every X amount of (minutes, hours, days)'\n                              )}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The max error margin (in minutes) before a check-in is considered missed. If you don't expect your job to start immediately at the scheduled time, expand this margin to account for delays.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withPageFilters(withProjects(MonitorForm));\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","AsyncView","AsyncComponent","getTitle","title","renderComponent","EditMonitor","data","setState","state","monitor","browserHistory","orgSlug","id","slug","getEndpoints","params","monitorId","name","renderBody","fullWidth","apiMethod","apiEndpoint","onSubmitSuccess","SCHEDULE_TYPES","value","label","DEFAULT_MONITOR_TYPE","INTERVALS","transformData","_data","model","fields","toJSON","reduce","k","v","indexOf","Array","isArray","schedule","parseInt","substr","MonitorForm","FormModel","formDataFromConfig","rv","schedule_type","checkin_margin","max_runtime","submitLabel","selectedProjectId","selection","projects","selectedProject","find","p","allowUndo","requireChanges","form","initialData","project","className","disabled","options","filter","isMember","map","help","required","placeholder","getValue","Fragment","tct","link","href","withPageFilters","withProjects"],"sourceRoot":""}