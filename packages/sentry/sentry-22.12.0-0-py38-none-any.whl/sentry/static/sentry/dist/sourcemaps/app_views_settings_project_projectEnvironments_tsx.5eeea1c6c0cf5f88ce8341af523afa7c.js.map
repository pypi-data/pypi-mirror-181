{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, Project} from 'sentry/types';\nimport {getDisplayName, getUrlRoutingName} from 'sentry/utils/environment';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  environments: null | Environment[];\n  isLoading: boolean;\n  project: null | Project;\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  actionText?: string;\n  isHidden?: boolean;\n  isSystemRow?: boolean;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xs\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","ListLink","className","isActive","query","to","activeClassName","index","disabled","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","StyledLi","classNames","onlyActiveOnIndex","shouldForwardProp","prop","p","theme","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","PermissionAlert","ProjectEnvironments","project","environments","isLoading","shouldHide","orgId","projectId","params","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","location","endsWith","state","setState","visibility","fetchProjectDetails","renderEmpty","message","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","Fragment","map","onHide","toggleEnv","actionText","shouldShowAction","renderBody","length","routes","baseUrl","recreateRoute","stepBack","title","projectSlug","tabs","underlined","EnvironmentItem","Name","EnvironmentButton","size","onClick","PanelItem","Button","space","withApi"],"sourceRoot":""}