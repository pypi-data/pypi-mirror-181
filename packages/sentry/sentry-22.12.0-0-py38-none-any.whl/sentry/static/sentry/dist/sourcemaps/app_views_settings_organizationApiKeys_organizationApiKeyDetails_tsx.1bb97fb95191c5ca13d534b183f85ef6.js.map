{"version":3,"file":"chunks/app_views_settings_organizationApiKeys_organizationApiKeyDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.tsx"],"sourcesContent":["import {useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction MultipleCheckbox({choices, value, disabled, onChange}: Props) {\n  const handleChange = useCallback(\n    (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n      let newValue: SelectedValue = [];\n\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      if (e.target.checked) {\n        newValue = value ? [...value, selectedValue] : [value];\n      } else {\n        newValue = value.filter(v => v !== selectedValue);\n      }\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  return (\n    <MultipleCheckboxWrapper>\n      {choices.map(([choiceValue, choiceLabel]) => (\n        <LabelContainer key={choiceValue}>\n          <Label>\n            <input\n              type=\"checkbox\"\n              value={choiceValue}\n              onChange={e => handleChange(choiceValue, e)}\n              disabled={disabled}\n              checked={defined(value) && value.indexOf(choiceValue) !== -1}\n            />\n            <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n          </Label>\n        </LabelContainer>\n      ))}\n    </MultipleCheckboxWrapper>\n  );\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport TextareaField from 'sentry/components/forms/fields/textareaField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {API_ACCESS_SCOPES} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Choices, Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport {DeprecatedApiKey} from './types';\n\nconst API_CHOICES: Choices = API_ACCESS_SCOPES.map(s => [s, s]);\n\ntype RouteParams = {\n  apiKey: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  apiKey: DeprecatedApiKey;\n};\n\nclass OrganizationApiKeyDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Edit API Key'), this.props.organization.slug, false);\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('Edit API Key')} />\n\n        <Panel>\n          <PanelHeader>{t('API Key')}</PanelHeader>\n          <ApiForm\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`}\n            initialData={this.state.apiKey}\n            onSubmitSuccess={this.handleSubmitSuccess}\n            onSubmitError={this.handleSubmitError}\n            onCancel={() =>\n              browserHistory.push(\n                recreateRoute('', {\n                  stepBack: -1,\n                  routes: this.props.routes,\n                  params: this.props.params,\n                })\n              )\n            }\n          >\n            <PanelBody>\n              <TextField label={t('Label')} name=\"label\" />\n              <TextField label={t('API Key')} name=\"key\" disabled />\n\n              <FormField name=\"scope_list\" label={t('Scopes')} inline={false} required>\n                {({value, onChange}) => (\n                  <MultipleCheckbox\n                    value={value}\n                    onChange={onChange}\n                    choices={API_CHOICES}\n                  />\n                )}\n              </FormField>\n\n              <TextareaField\n                label={t('Allowed Domains')}\n                name=\"allowed_origins\"\n                placeholder=\"e.g. example.com or https://example.com\"\n                help=\"Separate multiple entries with a newline\"\n              />\n            </PanelBody>\n          </ApiForm>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeyDetails);\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","choices","value","disabled","onChange","handleChange","useCallback","selectedValue","e","newValue","target","checked","filter","v","map","choiceValue","choiceLabel","LabelContainer","type","defined","indexOf","p","theme","breakpoints","small","medium","large","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","API_CHOICES","API_ACCESS_SCOPES","s","OrganizationApiKeyDetails","addSuccessMessage","browserHistory","recreateRoute","stepBack","routes","props","params","addErrorMessage","getEndpoints","orgId","apiKey","routeTitleGen","t","organization","slug","renderBody","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","handleSubmitSuccess","onSubmitError","handleSubmitError","onCancel","label","name","inline","required","placeholder","help","withOrganization"],"sourceRoot":""}