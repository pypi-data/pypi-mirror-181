{"version":3,"file":"chunks/app_views_organizationIntegrations_abstractIntegrationDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx","webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx","webpack:///./app/views/organizationIntegrations/constants.tsx","webpack:///./app/views/organizationIntegrations/integrationStatus.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbTitle.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {Fragment} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport TextareaField from 'sentry/components/forms/fields/textareaField';\nimport {t} from 'sentry/locale';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport RequestIntegrationButton from './RequestIntegrationButton';\n\ntype Props = {\n  onSuccess: () => void;\n} & RequestIntegrationButton['props'] &\n  ModalRenderProps &\n  AsyncComponent['props'];\ntype State = {\n  isSending: boolean;\n  message: string;\n} & AsyncComponent['state'];\n\n/**\n * This modal serves as a non-owner's confirmation step before sending\n * organization owners an email requesting a new organization integration. It\n * lets the user attach an optional message to be included in the email.\n */\nexport default class RequestIntegrationModal extends AsyncComponent<Props, State> {\n  state: State = {\n    ...this.getDefaultState(),\n    isSending: false,\n    message: '',\n  };\n\n  sendRequest = () => {\n    const {organization, slug, type} = this.props;\n    const {message} = this.state;\n\n    trackIntegrationAnalytics('integrations.request_install', {\n      integration_type: type,\n      integration: slug,\n      organization,\n    });\n\n    const endpoint = `/organizations/${organization.slug}/integration-requests/`;\n    this.api.request(endpoint, {\n      method: 'POST',\n      data: {\n        providerSlug: slug,\n        providerType: type,\n        message,\n      },\n      success: this.handleSubmitSuccess,\n      error: this.handleSubmitError,\n    });\n  };\n\n  handleSubmitSuccess = () => {\n    const {closeModal, onSuccess} = this.props;\n\n    addSuccessMessage(t('Request successfully sent.'));\n    this.setState({isSending: false});\n    onSuccess();\n    closeModal();\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Error sending the request');\n    this.setState({isSending: false});\n  };\n\n  render() {\n    const {Header, Body, Footer, name} = this.props;\n\n    const buttonText = this.state.isSending ? t('Sending Request') : t('Send Request');\n\n    return (\n      <Fragment>\n        <Header>\n          <h4>{t('Request %s Installation', name)}</h4>\n        </Header>\n        <Body>\n          <TextBlock>\n            {t(\n              'Looks like your organization owner, manager, or admin needs to install %s. Want to send them a request?',\n              name\n            )}\n          </TextBlock>\n          <TextBlock>\n            {t(\n              '(Optional) You’ve got good reasons for installing the %s Integration. Share them with your organization owner.',\n              name\n            )}\n          </TextBlock>\n          <TextareaField\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            name=\"message\"\n            type=\"string\"\n            onChange={value => this.setState({message: value})}\n            placeholder={t('Optional message…')}\n          />\n          <TextBlock>\n            {t(\n              'When you click “Send Request”, we’ll email your request to your organization’s owners. So just keep that in mind.'\n            )}\n          </TextBlock>\n        </Body>\n        <Footer>\n          <Button onClick={this.sendRequest}>{buttonText}</Button>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {IntegrationType, Organization} from 'sentry/types';\n\nimport RequestIntegrationModal from './RequestIntegrationModal';\n\ntype Props = {\n  name: string;\n  organization: Organization;\n  slug: string;\n  type: IntegrationType;\n};\ntype State = {\n  isOpen: boolean;\n  isSent: boolean;\n};\n\nexport default class RequestIntegrationButton extends Component<Props, State> {\n  state: State = {\n    isOpen: false,\n    isSent: false,\n  };\n\n  openRequestModal() {\n    this.setState({isOpen: true});\n    openModal(\n      renderProps => (\n        <RequestIntegrationModal\n          {...this.props}\n          {...renderProps}\n          onSuccess={() => this.setState({isSent: true})}\n        />\n      ),\n      {\n        onClose: () => this.setState({isOpen: false}),\n      }\n    );\n  }\n\n  render() {\n    const {isOpen, isSent} = this.state;\n\n    let buttonText;\n    if (isOpen) {\n      buttonText = t('Requesting Installation');\n    } else if (isSent) {\n      buttonText = t('Installation Requested');\n    } else {\n      buttonText = t('Request Installation');\n    }\n\n    return (\n      <StyledRequestIntegrationButton\n        data-test-id=\"request-integration-button\"\n        disabled={isOpen || isSent}\n        onClick={() => this.openRequestModal()}\n        priority=\"primary\"\n        size=\"sm\"\n      >\n        {buttonText}\n      </StyledRequestIntegrationButton>\n    );\n  }\n}\n\nconst StyledRequestIntegrationButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconDocs, IconGeneric, IconGithub, IconProject} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {\n  IntegrationFeature,\n  IntegrationInstallationStatus,\n  IntegrationType,\n  Organization,\n} from 'sentry/types';\nimport {\n  IntegrationAnalyticsKey,\n  IntegrationEventParameters,\n} from 'sentry/utils/analytics/integrations';\nimport {\n  getCategories,\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport marked, {singleLineRenderer} from 'sentry/utils/marked';\nimport BreadcrumbTitle from 'sentry/views/settings/components/settingsBreadcrumb/breadcrumbTitle';\n\nimport RequestIntegrationButton from './integrationRequest/RequestIntegrationButton';\nimport IntegrationStatus from './integrationStatus';\n\ntype Tab = 'overview' | 'configurations';\n\ntype AlertType = React.ComponentProps<typeof Alert> & {\n  text: string;\n};\n\ntype State = {\n  tab: Tab;\n} & AsyncComponent['state'];\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{integrationSlug: string; orgId: string}, {}> &\n  AsyncComponent['props'];\n\nclass AbstractIntegrationDetailedView<\n  P extends Props = Props,\n  S extends State = State\n> extends AsyncComponent<P, S> {\n  tabs: Tab[] = ['overview', 'configurations'];\n\n  componentDidMount() {\n    const {location} = this.props;\n    const value = location.query.tab === 'configurations' ? 'configurations' : 'overview';\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({tab: value});\n  }\n\n  onLoadAllEndpointsSuccess() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', {\n      integration_tab: this.state.tab,\n    });\n  }\n\n  /**\n   * Abstract methods defined below\n   */\n\n  // The analytics type used in analytics which is snake case\n  get integrationType(): IntegrationType {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get description(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get author(): string | undefined {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get alerts(): AlertType[] {\n    // default is no alerts\n    return [];\n  }\n\n  // Returns a list of the resources displayed at the bottom of the overview card\n  get resourceLinks(): Array<{title: string; url: string}> {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get installationStatus(): IntegrationInstallationStatus | null {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get integrationName(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  // Checks to see if integration requires admin access to install, doc integrations don't\n  get requiresAccess(): boolean {\n    // default is integration requires access to install\n    return true;\n  }\n\n  // Returns an array of RawIntegrationFeatures which is used in feature gating\n  // and displaying what the integration does\n  get featureData(): IntegrationFeature[] {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  getIcon(title: string) {\n    switch (title) {\n      case 'View Source':\n        return <IconProject />;\n      case 'Report Issue':\n        return <IconGithub />;\n      case 'Documentation':\n      case 'Splunk Setup Instructions':\n      case 'Trello Setup Instructions':\n        return <IconDocs />;\n      default:\n        return <IconGeneric />;\n    }\n  }\n\n  onTabChange = (value: Tab) => {\n    this.trackIntegrationAnalytics('integrations.integration_tab_clicked', {\n      integration_tab: value,\n    });\n    this.setState({tab: value});\n  };\n\n  // Returns the string that is shown as the title of a tab\n  getTabDisplay(tab: Tab): string {\n    // default is return the tab\n    return tab;\n  }\n\n  // Render the button at the top which is usually just an installation button\n  renderTopButton(\n    _disabledFromFeatures: boolean, // from the feature gate\n    _userHasAccess: boolean // from user permissions\n  ): React.ReactElement {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  // Returns the permission descriptions, only use by Sentry Apps\n  renderPermissions(): React.ReactElement | null {\n    // default is don't render permissions\n    return null;\n  }\n\n  renderEmptyConfigurations() {\n    return (\n      <Panel>\n        <EmptyMessage\n          title={t(\"You haven't set anything up yet\")}\n          description={t(\n            'But that doesn’t have to be the case for long! Add an installation to get started.'\n          )}\n          action={this.renderAddInstallButton(true)}\n        />\n      </Panel>\n    );\n  }\n\n  // Returns the list of configurations for the integration\n  renderConfigurations() {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Actually implemented methods below\n   */\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  // Wrapper around trackIntegrationAnalytics that automatically provides many fields and the org\n  trackIntegrationAnalytics = <T extends IntegrationAnalyticsKey>(\n    eventKey: IntegrationAnalyticsKey,\n    options?: Partial<IntegrationEventParameters[T]>\n  ) => {\n    options = options || {};\n    // If we use this intermediate type we get type checking on the things we care about\n    const params = {\n      view: 'integrations_directory_integration_detail',\n      integration: this.integrationSlug,\n      integration_type: this.integrationType,\n      already_installed: this.installationStatus !== 'Not Installed', // pending counts as installed here\n      organization: this.props.organization,\n      ...options,\n    };\n    trackIntegrationAnalytics(eventKey, params);\n  };\n\n  // Returns the props as needed by the hooks integrations:feature-gates\n  get featureProps() {\n    const {organization} = this.props;\n    const featureData = this.featureData;\n\n    // Prepare the features list\n    const features = featureData.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    return {organization, features};\n  }\n\n  cleanTags() {\n    return getCategories(this.featureData);\n  }\n\n  renderAlert(): React.ReactNode {\n    return null;\n  }\n\n  renderAdditionalCTA(): React.ReactNode {\n    return null;\n  }\n\n  renderIntegrationIcon() {\n    return <PluginIcon pluginId={this.integrationSlug} size={50} />;\n  }\n\n  renderRequestIntegrationButton() {\n    return (\n      <RequestIntegrationButton\n        organization={this.props.organization}\n        name={this.integrationName}\n        slug={this.integrationSlug}\n        type={this.integrationType}\n      />\n    );\n  }\n\n  renderAddInstallButton(hideButtonIfDisabled = false) {\n    const {organization} = this.props;\n    const {IntegrationFeatures} = getIntegrationFeatureGate();\n\n    return (\n      <IntegrationFeatures {...this.featureProps}>\n        {({disabled, disabledReason}) => (\n          <DisableWrapper>\n            <Access organization={organization} access={['org:integrations']}>\n              {({hasAccess}) => (\n                <Tooltip\n                  title={t(\n                    'You must be an organization owner, manager or admin to install this.'\n                  )}\n                  disabled={hasAccess || !this.requiresAccess}\n                >\n                  {!hideButtonIfDisabled && disabled ? (\n                    <div />\n                  ) : (\n                    this.renderTopButton(disabled, hasAccess)\n                  )}\n                </Tooltip>\n              )}\n            </Access>\n            {disabled && <DisabledNotice reason={disabledReason} />}\n          </DisableWrapper>\n        )}\n      </IntegrationFeatures>\n    );\n  }\n\n  // Returns the content shown in the top section of the integration detail\n  renderTopSection() {\n    const tags = this.cleanTags();\n\n    return (\n      <TopSectionWrapper>\n        <Flex>\n          {this.renderIntegrationIcon()}\n          <NameContainer>\n            <Flex>\n              <Name>{this.integrationName}</Name>\n              <StatusWrapper>\n                {this.installationStatus && (\n                  <IntegrationStatus status={this.installationStatus} />\n                )}\n              </StatusWrapper>\n            </Flex>\n            <Flex>\n              {tags.map(feature => (\n                <StyledTag key={feature}>{startCase(feature)}</StyledTag>\n              ))}\n            </Flex>\n          </NameContainer>\n        </Flex>\n        <Flex>\n          {this.renderAddInstallButton()}\n          {this.renderAdditionalCTA()}\n        </Flex>\n      </TopSectionWrapper>\n    );\n  }\n\n  // Returns the tabs divider with the clickable tabs\n  renderTabs() {\n    // TODO: Convert to styled component\n    return (\n      <ul className=\"nav nav-tabs border-bottom\" style={{paddingTop: '30px'}}>\n        {this.tabs.map(tabName => (\n          <li\n            key={tabName}\n            className={this.state.tab === tabName ? 'active' : ''}\n            onClick={() => this.onTabChange(tabName)}\n          >\n            <CapitalizedLink>{this.getTabDisplay(tabName)}</CapitalizedLink>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  // Returns the information about the integration description and features\n  renderInformationCard() {\n    const {FeatureList} = getIntegrationFeatureGate();\n\n    return (\n      <Fragment>\n        <Flex>\n          <FlexContainer>\n            <Description dangerouslySetInnerHTML={{__html: marked(this.description)}} />\n            <FeatureList\n              {...this.featureProps}\n              provider={{key: this.props.params.integrationSlug}}\n            />\n            {this.renderPermissions()}\n            {this.alerts.map((alert, i) => (\n              <Alert key={i} type={alert.type} showIcon>\n                <span\n                  dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}}\n                />\n              </Alert>\n            ))}\n          </FlexContainer>\n          <Metadata>\n            {!!this.author && (\n              <AuthorInfo>\n                <CreatedContainer>{t('Created By')}</CreatedContainer>\n                <div>{this.author}</div>\n              </AuthorInfo>\n            )}\n            {this.resourceLinks.map(({title, url}) => (\n              <ExternalLinkContainer key={url}>\n                {this.getIcon(title)}\n                <ExternalLink href={url}>{title}</ExternalLink>\n              </ExternalLinkContainer>\n            ))}\n          </Metadata>\n        </Flex>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    return (\n      <Fragment>\n        <BreadcrumbTitle routes={this.props.routes} title={this.integrationName} />\n        {this.renderAlert()}\n        {this.renderTopSection()}\n        {this.renderTabs()}\n        {this.state.tab === 'overview'\n          ? this.renderInformationCard()\n          : this.renderConfigurations()}\n      </Fragment>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst FlexContainer = styled('div')`\n  flex: 1;\n`;\n\nconst CapitalizedLink = styled('a')`\n  text-transform: capitalize;\n`;\n\nconst StyledTag = styled(Tag)`\n  text-transform: none;\n  &:not(:first-child) {\n    margin-left: ${space(0.5)};\n  }\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: ${space(2)};\n`;\n\nconst Name = styled('div')`\n  font-weight: bold;\n  font-size: 1.4em;\n  margin-bottom: ${space(0.5)};\n`;\n\nconst IconCloseCircle = styled(IconClose)`\n  color: ${p => p.theme.dangerText};\n  margin-right: ${space(1)};\n`;\n\nconst DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (\n  <div\n    style={{\n      display: 'flex',\n      alignItems: 'center',\n    }}\n    {...p}\n  >\n    <IconCloseCircle isCircled />\n    <span>{reason}</span>\n  </div>\n))`\n  padding-top: ${space(0.5)};\n  font-size: 0.9em;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst Description = styled('div')`\n  li {\n    margin-bottom: 6px;\n  }\n`;\n\nconst Metadata = styled(Flex)`\n  display: grid;\n  grid-auto-rows: max-content;\n  grid-auto-flow: row;\n  gap: ${space(1)};\n  font-size: 0.9em;\n  margin-left: ${space(4)};\n  margin-right: 100px;\n  align-self: flex-start;\n`;\n\nconst AuthorInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst ExternalLinkContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StatusWrapper = styled('div')`\n  margin-bottom: ${space(0.5)};\n  padding-left: ${space(2)};\n`;\n\nconst DisableWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst CreatedContainer = styled('div')`\n  text-transform: uppercase;\n  padding-bottom: ${space(1)};\n  color: ${p => p.theme.gray300};\n  font-weight: 600;\n  font-size: 12px;\n`;\n\nconst TopSectionWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default AbstractIntegrationDetailedView;\n","export const INSTALLED = 'Installed' as const;\nexport const NOT_INSTALLED = 'Not Installed' as const;\nexport const PENDING = 'Pending' as const;\nexport const DISABLED = 'Disabled' as const;\nexport const LEARN_MORE = 'Learn More' as const;\n\nexport const COLORS = {\n  [INSTALLED]: 'success',\n  [NOT_INSTALLED]: 'gray300',\n  [DISABLED]: 'gray300',\n  [PENDING]: 'pink300',\n  [LEARN_MORE]: 'gray300',\n} as const;\n\n/**\n * Integrations in the integration directory should be sorted by their popularity (weight).\n * The weights should reflect the relative popularity of each integration are hardcoded, except for\n * Sentry-apps which read popularity from the db.\n */\n\nexport const POPULARITY_WEIGHT: {\n  [key: string]: number;\n} = {\n  // First-party-integrations\n  slack: 50,\n  github: 20,\n  jira: 10,\n  bitbucket: 10,\n  gitlab: 10,\n  pagerduty: 10,\n  vsts: 10,\n  jira_server: 10,\n  bitbucket_server: 10,\n  github_enterprise: 10,\n  vercel: 10,\n  msteams: 10,\n  aws_lambda: 10,\n\n  // Plugins\n  webhooks: 10,\n  asana: 8,\n  trello: 8,\n  heroku: 8,\n  pivotal: 8,\n  twilio: 8,\n  pushover: 5,\n  redmine: 5,\n  phabricator: 5,\n  opsgenie: 5,\n  victorops: 5,\n  sessionstack: 5,\n  segment: 2,\n  'amazon-sqs': 2,\n  splunk: 2,\n} as const;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport space from 'sentry/styles/space';\nimport {IntegrationInstallationStatus} from 'sentry/types';\n\nimport {COLORS} from './constants';\n\ntype StatusProps = {\n  status: IntegrationInstallationStatus;\n};\n\nconst StatusWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationStatus = styled(({status, ...p}: StatusProps) => {\n  const theme = useTheme();\n\n  return (\n    <StatusWrapper>\n      <CircleIndicator size={6} color={theme[COLORS[status]]} />\n      <div {...p}>{status}</div>\n    </StatusWrapper>\n  );\n})`\n  color: ${p => p.theme[COLORS[p.status]]};\n  margin-left: ${space(0.5)};\n  font-weight: light;\n  margin-right: ${space(0.75)};\n`;\n\nexport default IntegrationStatus;\n","import {PlainRoute} from 'react-router';\n\nimport {useBreadcrumbTitleEffect} from './context';\n\ntype Props = {\n  routes: Array<PlainRoute>;\n  title: string;\n};\n\n/**\n * Breadcrumb title sets the breadcrumb label for the provided route match\n */\nfunction BreadcrumbTitle(props: Props) {\n  useBreadcrumbTitleEffect(props);\n\n  return null;\n}\n\nexport default BreadcrumbTitle;\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","RequestIntegrationModal","AsyncComponent","getDefaultState","isSending","message","slug","state","trackIntegrationAnalytics","integration_type","integration","endpoint","api","request","method","data","providerSlug","providerType","success","handleSubmitSuccess","error","handleSubmitError","closeModal","onSuccess","addSuccessMessage","setState","addErrorMessage","Header","Body","Footer","name","buttonText","Fragment","inline","flexibleControlStateSize","stacked","onChange","value","placeholder","onClick","sendRequest","RequestIntegrationButton","isOpen","isSent","openRequestModal","openModal","onClose","StyledRequestIntegrationButton","disabled","priority","size","Button","space","AbstractIntegrationDetailedView","integration_tab","tab","eventKey","options","params","view","integrationSlug","integrationType","already_installed","installationStatus","componentDidMount","location","query","onLoadAllEndpointsSuccess","Error","description","author","alerts","resourceLinks","integrationName","requiresAccess","featureData","getIcon","title","getTabDisplay","renderTopButton","_disabledFromFeatures","_userHasAccess","renderPermissions","renderEmptyConfigurations","action","renderAddInstallButton","renderConfigurations","featureProps","features","map","f","featureGate","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","cleanTags","getCategories","renderAlert","renderAdditionalCTA","renderIntegrationIcon","pluginId","renderRequestIntegrationButton","hideButtonIfDisabled","IntegrationFeatures","getIntegrationFeatureGate","disabledReason","DisableWrapper","DisabledNotice","reason","renderTopSection","tags","TopSectionWrapper","Flex","NameContainer","Name","StatusWrapper","status","feature","StyledTag","startCase","renderTabs","className","style","paddingTop","tabs","tabName","onTabChange","CapitalizedLink","renderInformationCard","FeatureList","FlexContainer","Description","marked","provider","key","alert","i","text","Metadata","AuthorInfo","CreatedContainer","url","ExternalLinkContainer","href","renderBody","routes","Tag","IconCloseCircle","IconClose","p","theme","dangerText","display","alignItems","isCircled","gray300","COLORS","POPULARITY_WEIGHT","slack","github","jira","bitbucket","gitlab","pagerduty","vsts","jira_server","bitbucket_server","github_enterprise","vercel","msteams","aws_lambda","webhooks","asana","trello","heroku","pivotal","twilio","pushover","redmine","phabricator","opsgenie","victorops","sessionstack","segment","splunk","useTheme","color","useBreadcrumbTitleEffect"],"sourceRoot":""}