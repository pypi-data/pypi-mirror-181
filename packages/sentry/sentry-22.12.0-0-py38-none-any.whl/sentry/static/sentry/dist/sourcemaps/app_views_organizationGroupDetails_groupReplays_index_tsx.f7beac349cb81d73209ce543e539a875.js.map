{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>>;\n\ntype Result = State;\n\nfunction useReplayList({eventView, location, organization}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n\n    setData(response);\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport first from 'lodash/first';\n\nimport Pagination from 'sentry/components/pagination';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Group, Organization} from 'sentry/types';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n};\n\nfunction GroupReplays({group}: Props) {\n  const api = useApi();\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  const [response, setResponse] = useState<{\n    pageLinks: null | string;\n    replayIds: undefined | string[];\n  }>({pageLinks: null, replayIds: undefined});\n\n  const [fetchError, setFetchError] = useState();\n\n  const {cursor} = location.query;\n  const fetchReplayIds = useCallback(async () => {\n    const eventView = EventView.fromSavedQuery({\n      id: '',\n      name: `Errors within replay`,\n      version: 2,\n      fields: ['replayId', 'count()'],\n      query: `issue.id:${group.id} !replayId:\"\"`,\n      projects: [Number(group.project.id)],\n    });\n\n    try {\n      const [{data}, _textStatus, resp] = await doDiscoverQuery<TableData>(\n        api,\n        `/organizations/${organization.slug}/events/`,\n        eventView.getEventsAPIPayload({\n          query: {cursor},\n        } as Location<ReplayListLocationQuery>)\n      );\n\n      setResponse({\n        pageLinks: resp?.getResponseHeader('Link') ?? '',\n        replayIds: data.map(record => String(record.replayId)),\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n      setFetchError(err);\n    }\n  }, [api, cursor, organization.slug, group.id, group.project.id]);\n\n  const eventView = useMemo(() => {\n    if (!response.replayIds) {\n      return null;\n    }\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: REPLAY_LIST_FIELDS,\n      projects: [Number(group.project.id)],\n      query: `id:[${String(response.replayIds)}]`,\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, group.project.id, response.replayIds]);\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor']});\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  if (!eventView) {\n    return (\n      <StyledPageContent>\n        <ReplayTable\n          isFetching\n          replays={[]}\n          showProjectColumn={false}\n          sort={undefined}\n          fetchError={fetchError}\n        />\n        <Pagination pageLinks={null} />\n      </StyledPageContent>\n    );\n  }\n  return (\n    <GroupReplaysTable\n      eventView={eventView}\n      organization={organization}\n      pageLinks={response.pageLinks}\n    />\n  );\n}\n\nconst GroupReplaysTable = ({\n  eventView,\n  organization,\n  pageLinks,\n}: {\n  eventView: EventView;\n  organization: Organization;\n  pageLinks: string | null;\n}) => {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <StyledPageContent>\n      <ReplayTable\n        isFetching={isFetching}\n        replays={replays}\n        showProjectColumn={false}\n        sort={first(eventView.sorts)}\n        fetchError={fetchError}\n      />\n      <Pagination pageLinks={pageLinks} />\n    </StyledPageContent>\n  );\n};\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Group} from 'sentry/types';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplaysContainer = (props: Props) => {\n  const organization = useOrganization();\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["eventView","location","organization","api","useApi","data","setData","useState","fetchError","undefined","isFetching","pageLinks","replays","loadReplays","useCallback","async","prev","response","fetchReplayList","useEffect","handleRouteLeave","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","query","pathname","reduce","newQuery","browserHistory","useLocation","onRouteLeave","GroupReplays","group","useOrganization","setResponse","replayIds","setFetchError","cursor","fetchReplayIds","EventView","id","name","version","fields","projects","Number","project","_textStatus","resp","doDiscoverQuery","slug","getEventsAPIPayload","getResponseHeader","map","record","String","replayId","err","Sentry","useMemo","REPLAY_LIST_FIELDS","orderby","decodeScalar","sort","DEFAULT_SORT","useCleanQueryParamsOnRouteLeave","GroupReplaysTable","StyledPageContent","showProjectColumn","useReplayList","first","sorts","PageContent","p","theme","gray200","background","GroupReplaysContainer","props","features","renderDisabled","type","t"],"sourceRoot":""}