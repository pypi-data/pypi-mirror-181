{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Field from 'sentry/components/forms/field';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Switch from 'sentry/components/switchButton';\nimport Truncate from 'sentry/components/truncate';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  hook: ServiceHook;\n  onToggleActive: () => void;\n  orgId: string;\n  projectId: string;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <Field\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </Field>\n  );\n}\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {orgId, projectId} = this.props.params;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        this.setState({\n          hookList: hookList.map(h => {\n            if (h.id === data.id) {\n              return {\n                ...h,\n                ...data,\n              };\n            }\n            return h;\n          }),\n        });\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" showIcon>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.props.organization.access);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","label","to","id","value","url","help","events","length","join","t","isActive","status","size","toggle","ProjectServiceHooks","props","params","hookList","state","addLoadingMessage","api","request","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","renderResults","Fragment","type","showIcon","bind","renderBody","body","access","Set","organization","action","has","priority","icon","isCircled","withOrganization"],"sourceRoot":""}