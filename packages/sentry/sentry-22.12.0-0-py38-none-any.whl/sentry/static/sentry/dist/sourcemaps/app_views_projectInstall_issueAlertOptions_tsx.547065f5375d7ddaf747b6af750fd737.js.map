{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Input from 'sentry/components/input';\nimport PageHeading from 'sentry/components/pageHeading';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: {id: string}[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.ALERT_ON_EVERY_ISSUE.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const customizedAlertOption: [string, React.ReactNode] = [\n      Actions.CUSTOMIZED_ALERTS.toString(),\n      <CustomizeAlertsGrid\n        key={Actions.CUSTOMIZED_ALERTS}\n        onClick={e => {\n          // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n          // propagation of the click up to the label, causing it to focus\n          // the radio input and lose focus on the select.\n          e.preventDefault();\n          const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n          this.setStateAndUpdateParents({alertSetting});\n        }}\n      >\n        {t('When there are more than')}\n        <InlineInput\n          type=\"number\"\n          min=\"0\"\n          name=\"\"\n          placeholder={DEFAULT_PLACEHOLDER_VALUE}\n          value={this.state.threshold}\n          onChange={threshold =>\n            this.setStateAndUpdateParents({threshold: threshold.target.value})\n          }\n          data-test-id=\"range-input\"\n        />\n        <InlineSelectControl\n          value={this.state.metric}\n          options={this.getAvailableMetricOptions()}\n          onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n        />\n        {t('a unique error in')}\n        <InlineSelectControl\n          value={this.state.interval}\n          options={this.state.intervalChoices?.map(([value, label]) => ({\n            value,\n            label,\n          }))}\n          onChange={interval => this.setStateAndUpdateParents({interval: interval.value})}\n        />\n      </CustomizeAlertsGrid>,\n    ];\n\n    const options: [string, React.ReactNode][] = [\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n      ...(hasProperlyLoadedConditions ? [customizedAlertOption] : []),\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n    ];\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null\n  ): void {\n    this.setState(state, () => {\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('2. Set your alert frequency')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n"],"names":["MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","id","value","IssueAlertOptions","AsyncComponent","getDefaultState","super","conditions","intervalChoices","alertSetting","ALERT_ON_EVERY_ISSUE","toString","metric","getAvailableMetricOptions","label","t","filter","this","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","customizedAlertOption","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","onClick","e","preventDefault","setStateAndUpdateParents","InlineInput","type","min","name","placeholder","onChange","target","InlineSelectControl","options","map","CREATE_ALERT_LATER","choiceValue","node","RadioItemWrapper","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actions","actionMatch","frequency","setState","props","getEndpoints","organization","slug","onLoadAllEndpointsSuccess","Object","values","includes","formFields","choices","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","renderBody","issueAlertOptionsChoices","Fragment","PageHeadingWithTopMargins","withMargins","Content","RadioGroupWithPadding","withOrganization","space","Input","SelectControl","RadioGroup","PageHeading"],"sourceRoot":""}