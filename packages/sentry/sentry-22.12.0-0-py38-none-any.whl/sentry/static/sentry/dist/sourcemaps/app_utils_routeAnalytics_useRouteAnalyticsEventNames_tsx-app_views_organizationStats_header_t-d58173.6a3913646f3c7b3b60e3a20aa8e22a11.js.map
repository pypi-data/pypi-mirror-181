{"version":3,"file":"chunks/app_utils_routeAnalytics_useRouteAnalyticsEventNames_tsx-app_views_organizationStats_header_t-d58173.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeAnalytics/useRouteAnalyticsEventNames.tsx","webpack:///./app/views/organizationStats/header.tsx","webpack:///./app/views/organizationStats/teamInsights/controls.tsx","webpack:///./app/views/organizationStats/teamInsights/descriptionCard.tsx","webpack:///./app/views/organizationStats/teamInsights/styles.tsx","webpack:///./app/views/organizationStats/teamInsights/utils.tsx"],"sourcesContent":["import {useContext, useEffect} from 'react';\n\nimport {RouteAnalyticsContext} from 'sentry/views/routeAnalyticsContextProvider';\n\n/**\n * This hook provides custom analytics event names for route based analytics.\n * @param eventKey The key used to identify the event\n * @param eventName The English string used as the event name\n */\nexport default function useRouteAnalyticsEventNames(eventKey: string, eventName: string) {\n  const {setEventNames, previousUrl} = useContext(RouteAnalyticsContext);\n  useEffect(() => {\n    setEventNames(eventKey, eventName);\n  }, [setEventNames, eventKey, eventName, previousUrl]);\n}\n","import styled from '@emotion/styled';\n\nimport {FeatureFeedback} from 'sentry/components/featureFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  activeTab: 'stats' | 'issues' | 'health';\n  organization: Organization;\n};\n\nfunction StatsHeader({organization, activeTab}: Props) {\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>\n          {t('Stats')}\n          <PageHeadingQuestionTooltip\n            title={tct(\n              'A view of the usage data that Sentry has received across your entire organization. [link: Read the docs].',\n              {link: <ExternalLink href=\"https://docs.sentry.io/product/stats/\" />}\n            )}\n          />\n        </StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        {activeTab !== 'stats' && (\n          <FeatureFeedback buttonProps={{size: 'sm'}} featureName=\"team-stats\" />\n        )}\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        <li className={`${activeTab === 'stats' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/`}>{t('Usage')}</Link>\n        </li>\n        <li className={`${activeTab === 'issues' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/issues/`}>\n            {t('Issues')}\n          </Link>\n        </li>\n        <li className={`${activeTab === 'health' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/health/`}>\n            {t('Health')}\n          </Link>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n}\n\nexport default StatsHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n","import {RouteComponentProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport pick from 'lodash/pick';\nimport uniq from 'lodash/uniq';\nimport moment from 'moment';\n\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport {ChangeData} from 'sentry/components/organizations/timeRangeSelector';\nimport PageTimeRangeSelector from 'sentry/components/pageTimeRangeSelector';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, TeamWithProjects} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {dataDatetime} from './utils';\n\nconst INSIGHTS_DEFAULT_STATS_PERIOD = '8w';\n\nconst PAGE_QUERY_PARAMS = [\n  'pageStatsPeriod',\n  'pageStart',\n  'pageEnd',\n  'pageUtc',\n  'dataCategory',\n  'transform',\n  'sort',\n  'query',\n  'cursor',\n  'team',\n  'environment',\n];\n\ntype Props = Pick<RouteComponentProps<{orgId: string}, {}>, 'router' | 'location'> & {\n  currentEnvironment?: string;\n  currentTeam?: TeamWithProjects;\n  showEnvironment?: boolean;\n};\n\nfunction TeamStatsControls({\n  location,\n  router,\n  currentTeam,\n  currentEnvironment,\n  showEnvironment,\n}: Props) {\n  const {projects} = useProjects({\n    slugs: currentTeam?.projects.map(project => project.slug) ?? [],\n  });\n  const organization = useOrganization();\n  const isSuperuser = isActiveSuperuser();\n  const theme = useTheme();\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  function handleChangeTeam(teamId: string) {\n    localStorage.setItem(localStorageKey, teamId);\n    // TODO(workflow): Preserve environment if it exists for the new team\n    setStateOnUrl({team: teamId, environment: undefined});\n  }\n\n  function handleEnvironmentChange({value}: {label: string; value: string}) {\n    if (value === '') {\n      setStateOnUrl({environment: undefined});\n    } else {\n      setStateOnUrl({environment: value});\n    }\n  }\n\n  function handleUpdateDatetime(datetime: ChangeData): LocationDescriptorObject {\n    const {start, end, relative, utc} = datetime;\n\n    if (start && end) {\n      const parser = utc ? moment.utc : moment;\n\n      return setStateOnUrl({\n        pageStatsPeriod: undefined,\n        pageStart: parser(start).format(),\n        pageEnd: parser(end).format(),\n        pageUtc: utc ?? undefined,\n      });\n    }\n\n    return setStateOnUrl({\n      pageStatsPeriod: relative || undefined,\n      pageStart: undefined,\n      pageEnd: undefined,\n      pageUtc: undefined,\n    });\n  }\n\n  function setStateOnUrl(nextState: {\n    environment?: string;\n    pageEnd?: DateString;\n    pageStart?: DateString;\n    pageStatsPeriod?: string | null;\n    pageUtc?: boolean | null;\n    team?: string;\n  }): LocationDescriptorObject {\n    const nextQueryParams = pick(nextState, PAGE_QUERY_PARAMS);\n\n    const nextLocation = {\n      ...location,\n      query: {\n        ...query,\n        ...nextQueryParams,\n      },\n    };\n\n    router.push(nextLocation);\n\n    return nextLocation;\n  }\n\n  const {period, start, end, utc} = dataDatetime(query);\n  const environmentOptions = uniq(\n    projects.map(project => project.environments).flat()\n  ).map(env => ({label: env, value: env}));\n\n  return (\n    <ControlsWrapper showEnvironment={showEnvironment}>\n      <StyledTeamSelector\n        name=\"select-team\"\n        inFieldLabel={t('Team: ')}\n        value={currentTeam?.slug}\n        onChange={choice => handleChangeTeam(choice.actor.id)}\n        teamFilter={isSuperuser ? undefined : filterTeam => filterTeam.isMember}\n        styles={{\n          singleValue(provided: any) {\n            const custom = {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              fontSize: theme.fontSizeMedium,\n              ':before': {\n                ...provided[':before'],\n                color: theme.textColor,\n                marginRight: space(1.5),\n                marginLeft: space(0.5),\n              },\n            };\n            return {...provided, ...custom};\n          },\n          input: (provided: any, state: any) => ({\n            ...provided,\n            display: 'grid',\n            gridTemplateColumns: 'max-content 1fr',\n            alignItems: 'center',\n            gridGap: space(1),\n            ':before': {\n              backgroundColor: state.theme.backgroundSecondary,\n              height: 24,\n              width: 38,\n              borderRadius: 3,\n              content: '\"\"',\n              display: 'block',\n            },\n          }),\n        }}\n      />\n      {showEnvironment && (\n        <SelectControl\n          options={[\n            {\n              value: '',\n              label: t('All'),\n            },\n            ...environmentOptions,\n          ]}\n          value={currentEnvironment ?? ''}\n          onChange={handleEnvironmentChange}\n          styles={{\n            input: (provided: any) => ({\n              ...provided,\n              display: 'grid',\n              gridTemplateColumns: 'max-content 1fr',\n              alignItems: 'center',\n              gridGap: space(1),\n              ':before': {\n                height: 24,\n                width: 90,\n                borderRadius: 3,\n                content: '\"\"',\n                display: 'block',\n              },\n            }),\n            control: (base: any) => ({\n              ...base,\n              boxShadow: 'none',\n            }),\n            singleValue: (base: any) => ({\n              ...base,\n              fontSize: theme.fontSizeMedium,\n              display: 'flex',\n              ':before': {\n                ...base[':before'],\n                color: theme.textColor,\n                marginRight: space(1.5),\n              },\n            }),\n          }}\n          inFieldLabel={t('Environment:')}\n        />\n      )}\n      <StyledPageTimeRangeSelector\n        organization={organization}\n        relative={period ?? ''}\n        start={start ?? null}\n        end={end ?? null}\n        utc={utc ?? null}\n        onUpdate={handleUpdateDatetime}\n        showAbsolute={false}\n        relativeOptions={{\n          '14d': t('Last 2 weeks'),\n          '4w': t('Last 4 weeks'),\n          [INSIGHTS_DEFAULT_STATS_PERIOD]: t('Last 8 weeks'),\n          '12w': t('Last 12 weeks'),\n        }}\n      />\n    </ControlsWrapper>\n  );\n}\n\nexport default TeamStatsControls;\n\nconst ControlsWrapper = styled('div')<{showEnvironment?: boolean}>`\n  display: grid;\n  align-items: center;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: 246px ${p => (p.showEnvironment ? '246px' : '')} 1fr;\n  }\n`;\n\nconst StyledTeamSelector = styled(TeamSelector)`\n  & > div {\n    box-shadow: ${p => p.theme.dropShadowLight};\n  }\n`;\n\nconst StyledPageTimeRangeSelector = styled(PageTimeRangeSelector)`\n  div {\n    min-height: unset;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  description: React.ReactNode;\n  title: string;\n};\n\nfunction DescriptionCard({title, description, children}: Props) {\n  return (\n    <Wrapper>\n      <LeftPanel>\n        <Title>{title}</Title>\n        <Description>{description}</Description>\n      </LeftPanel>\n      <RightPanel>{children}</RightPanel>\n    </Wrapper>\n  );\n}\n\nexport default DescriptionCard;\n\nconst Wrapper = styled('div')`\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n  display: flex;\n  margin-bottom: ${space(3)};\n  flex-direction: column;\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    flex-direction: row;\n  }\n`;\n\nconst LeftPanel = styled('div')`\n  padding: ${space(2)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    max-width: 250px;\n    border-right: 1px solid ${p => p.theme.border};\n    border-bottom: 0;\n  }\n`;\n\nconst Title = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin: 0 0 ${space(0.5)};\n`;\n\nconst Description = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst RightPanel = styled('div')`\n  flex-grow: 1;\n`;\n","import styled from '@emotion/styled';\n\nimport IdBadge from 'sentry/components/idBadge';\n\nexport const ProjectBadgeContainer = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n","import moment from 'moment';\n\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport type {SeriesDataUnit} from 'sentry/types/echarts';\n\n/**\n * Buckets a week of sequential days into one data unit\n */\nexport function sortSeriesByDay(data: SeriesDataUnit[]): SeriesDataUnit[] {\n  return data.sort((a, b) => new Date(a.name).getTime() - new Date(b.name).getTime());\n}\n\n/**\n * Convert an object with date as the key to a series\n */\nexport function convertDayValueObjectToSeries(\n  data: Record<string, number>\n): SeriesDataUnit[] {\n  return Object.entries(data).map(([bucket, count]) => ({\n    value: count,\n    name: new Date(bucket).getTime(),\n  }));\n}\n\n/**\n * Takes a sorted array of trend items and groups them by worst/better/no chagne\n */\nexport function groupByTrend<T extends {trend: number}>(data: T[]): T[] {\n  const worseItems = data.filter(x => Math.round(x.trend) < 0);\n  const betterItems = data.filter(x => Math.round(x.trend) > 0);\n  const zeroItems = data.filter(x => Math.round(x.trend) === 0);\n  return [...worseItems, ...betterItems, ...zeroItems];\n}\n\nexport const barAxisLabel = (\n  dataEntries: number\n): React.ComponentProps<typeof BaseChart>['xAxis'] => {\n  return {\n    splitNumber: Math.max(Math.round(dataEntries / 7), 4),\n    type: 'category',\n    axisTick: {\n      alignWithLabel: true,\n    },\n    axisLabel: {\n      formatter: (date: string) => {\n        return moment(new Date(Number(date))).format('MMM D');\n      },\n    },\n  };\n};\n\nconst INSIGHTS_DEFAULT_STATS_PERIOD = '8w';\n\nexport function dataDatetime(\n  query: Parameters<typeof normalizeDateTimeParams>[0]\n): DateTimeObject {\n  const {\n    start,\n    end,\n    statsPeriod,\n    utc: utcString,\n  } = normalizeDateTimeParams(query, {\n    allowEmptyPeriod: true,\n    allowAbsoluteDatetime: true,\n    allowAbsolutePageDatetime: true,\n  });\n\n  if (!statsPeriod && !start && !end) {\n    return {period: INSIGHTS_DEFAULT_STATS_PERIOD};\n  }\n\n  // Following getParams, statsPeriod will take priority over start/end\n  if (statsPeriod) {\n    return {period: statsPeriod};\n  }\n\n  const utc = utcString === 'true';\n  if (start && end) {\n    return utc\n      ? {\n          start: moment.utc(start).format(),\n          end: moment.utc(end).format(),\n          utc,\n        }\n      : {\n          start: moment(start).utc().format(),\n          end: moment(end).utc().format(),\n          utc,\n        };\n  }\n\n  return {period: INSIGHTS_DEFAULT_STATS_PERIOD};\n}\n"],"names":["useRouteAnalyticsEventNames","eventKey","eventName","setEventNames","previousUrl","useContext","RouteAnalyticsContext","useEffect","StatsHeader","organization","activeTab","StyledLayoutTitle","t","title","tct","link","href","buttonProps","size","featureName","underlined","className","to","slug","Layout","space","PAGE_QUERY_PARAMS","TeamStatsControls","location","router","currentTeam","currentEnvironment","showEnvironment","projects","useProjects","slugs","map","project","useOrganization","isSuperuser","isActiveSuperuser","theme","useTheme","query","localStorageKey","setStateOnUrl","nextState","nextQueryParams","pick","nextLocation","push","period","start","end","utc","dataDatetime","environmentOptions","uniq","environments","flat","env","label","value","ControlsWrapper","StyledTeamSelector","name","inFieldLabel","onChange","choice","handleChangeTeam","teamId","actor","id","localStorage","team","environment","undefined","teamFilter","filterTeam","isMember","styles","singleValue","provided","custom","display","justifyContent","alignItems","fontSize","fontSizeMedium","color","textColor","marginRight","marginLeft","input","state","gridTemplateColumns","gridGap","backgroundColor","backgroundSecondary","height","width","borderRadius","content","options","control","base","boxShadow","StyledPageTimeRangeSelector","relative","onUpdate","datetime","parser","moment","pageStatsPeriod","pageStart","format","pageEnd","pageUtc","showAbsolute","relativeOptions","p","breakpoints","small","TeamSelector","dropShadowLight","PageTimeRangeSelector","DescriptionCard","description","children","Wrapper","LeftPanel","Title","Description","RightPanel","border","medium","fontSizeLarge","subText","ProjectBadgeContainer","ProjectBadge","IdBadge","sortSeriesByDay","data","sort","a","b","Date","getTime","convertDayValueObjectToSeries","Object","entries","bucket","count","groupByTrend","filter","x","Math","round","trend","barAxisLabel","dataEntries","splitNumber","max","type","axisTick","alignWithLabel","axisLabel","formatter","date","Number","statsPeriod","utcString","normalizeDateTimeParams","allowEmptyPeriod","allowAbsoluteDatetime","allowAbsolutePageDatetime"],"sourceRoot":""}