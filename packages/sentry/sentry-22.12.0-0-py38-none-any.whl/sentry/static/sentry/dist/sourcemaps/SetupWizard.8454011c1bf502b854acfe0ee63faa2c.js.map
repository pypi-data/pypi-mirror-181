{"version":3,"file":"chunks/SetupWizard.xxxxxxxxxxxxxxxxxxxx.js","mappings":"weAYA,SAASA,EAAY,GAAuB,IAAvB,KAACC,GAAO,GAAa,EACxC,MAAMC,GAAMC,EAAAA,EAAAA,KACNC,GAAkBC,EAAAA,EAAAA,aAA2BC,IAC5CC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAEzCC,EAAAA,EAAAA,YAAU,IACD,KACDN,EAAgBO,SAClBC,OAAOC,aAAaT,EAAgBO,QACtC,KAIJD,EAAAA,EAAAA,YAAU,IACD,KACLE,OAAOC,aAAaT,EAAgBO,QAAQ,IAIhD,MAAMG,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,UACQd,EAAIe,eAAgB,WAAUhB,KAKtC,CAJE,MACAO,GAAY,GACZI,OAAOC,aAAaT,EAAgBO,SACpCP,EAAgBO,QAAUC,OAAOM,YAAW,IAAMN,OAAOO,SAAS,IACpE,IACC,CAACjB,EAAKD,IAOT,OALAS,EAAAA,EAAAA,YAAU,KACR,MAAMU,EAAkBR,OAAOS,YAAYP,EAAe,KAC1D,MAAO,IAAMF,OAAOU,cAAcF,EAAgB,GACjD,CAACN,KAGF,QAAC,IAAqB,WACpB,eAAKS,UAAU,YAAW,SACtBhB,GAOA,eAAKgB,UAAU,MAAK,WAClB,wBAAKC,EAAAA,EAAAA,GAAE,qDACP,wBAAKA,EAAAA,EAAAA,GAAE,6CACP,QAAC,KAAM,CAACC,QAAS,IAAMb,OAAOO,QAAQ,UAAEK,EAAAA,EAAAA,GAAE,2BAT5C,QAAC,IAAgB,CAACE,MAAO,CAACC,OAAQ,YAAY,UAC5C,eAAKJ,UAAU,MAAK,UAClB,wBAAKC,EAAAA,EAAAA,GAAE,0CAarB,CArDSxB,EAAW,0BAuDpB,S","sources":["webpack:///./app/views/setupWizard/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\n\nimport Button from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport ThemeAndStyleProvider from 'sentry/components/themeAndStyleProvider';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = {\n  hash?: boolean | string;\n};\n\nfunction SetupWizard({hash = false}: Props) {\n  const api = useApi();\n  const closeTimeoutRef = useRef<number | undefined>(undefined);\n  const [finished, setFinished] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      if (closeTimeoutRef.current) {\n        window.clearTimeout(closeTimeoutRef.current);\n      }\n    };\n  });\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(closeTimeoutRef.current);\n    };\n  });\n\n  const checkFinished = useCallback(async () => {\n    try {\n      await api.requestPromise(`/wizard/${hash}/`);\n    } catch {\n      setFinished(true);\n      window.clearTimeout(closeTimeoutRef.current);\n      closeTimeoutRef.current = window.setTimeout(() => window.close(), 10000);\n    }\n  }, [api, hash]);\n\n  useEffect(() => {\n    const pollingInterval = window.setInterval(checkFinished, 1000);\n    return () => window.clearInterval(pollingInterval);\n  }, [checkFinished]);\n\n  return (\n    <ThemeAndStyleProvider>\n      <div className=\"container\">\n        {!finished ? (\n          <LoadingIndicator style={{margin: '2em auto'}}>\n            <div className=\"row\">\n              <h5>{t('Waiting for wizard to connect')}</h5>\n            </div>\n          </LoadingIndicator>\n        ) : (\n          <div className=\"row\">\n            <h5>{t('Return to your terminal to complete your setup')}</h5>\n            <h5>{t('(This window will close in 10 seconds)')}</h5>\n            <Button onClick={() => window.close()}>{t('Close browser tab')}</Button>\n          </div>\n        )}\n      </div>\n    </ThemeAndStyleProvider>\n  );\n}\n\nexport default SetupWizard;\n"],"names":["SetupWizard","hash","api","useApi","closeTimeoutRef","useRef","undefined","finished","setFinished","useState","useEffect","current","window","clearTimeout","checkFinished","useCallback","async","requestPromise","setTimeout","close","pollingInterval","setInterval","clearInterval","className","t","onClick","style","margin"],"sourceRoot":""}