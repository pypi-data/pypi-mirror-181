{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionEvents_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/histogram/constants.tsx","webpack:///./app/utils/performance/histogram/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/index.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nimport {DataFilter} from './types';\n\nexport const FILTER_OPTIONS: SelectValue<DataFilter>[] = [\n  {label: t('Exclude'), value: 'exclude_outliers'},\n  {label: t('Include'), value: 'all'},\n];\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {SelectValue} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {FILTER_OPTIONS} from './constants';\nimport {DataFilter} from './types';\n\ntype HistogramChildrenProps = {\n  activeFilter: SelectValue<DataFilter>;\n  filterOptions: typeof FILTER_OPTIONS;\n  handleFilterChange: (option: string) => void;\n  handleResetView: () => void;\n  isZoomed: boolean;\n};\n\ntype Props = {\n  children: (props: HistogramChildrenProps) => React.ReactNode;\n  location: Location;\n  zoomKeys: string[];\n};\n\nclass Histogram extends Component<Props> {\n  isZoomed() {\n    const {location, zoomKeys} = this.props;\n    return zoomKeys.map(key => location.query[key]).some(value => value !== undefined);\n  }\n\n  handleResetView = () => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: removeHistogramQueryStrings(location, zoomKeys),\n    });\n  };\n\n  getActiveFilter() {\n    const {location} = this.props;\n\n    const dataFilter = location.query.dataFilter\n      ? decodeScalar(location.query.dataFilter)\n      : FILTER_OPTIONS[0].value;\n    return FILTER_OPTIONS.find(item => item.value === dataFilter) || FILTER_OPTIONS[0];\n  }\n\n  handleFilterChange = (value: string) => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...removeHistogramQueryStrings(location, zoomKeys),\n        dataFilter: value,\n      },\n    });\n  };\n\n  render() {\n    const childrenProps = {\n      isZoomed: this.isZoomed(),\n      handleResetView: this.handleResetView,\n      activeFilter: this.getActiveFilter(),\n      handleFilterChange: this.handleFilterChange,\n      filterOptions: FILTER_OPTIONS,\n    };\n    return this.props.children(childrenProps);\n  }\n}\n\nexport function removeHistogramQueryStrings(location: Location, zoomKeys: string[]) {\n  const query: Location['query'] = {...location.query, cursor: undefined};\n\n  delete query.dataFilter;\n  // reset all zoom parameters\n  zoomKeys.forEach(key => delete query[key]);\n\n  return query;\n}\n\nexport default Histogram;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport Button from 'sentry/components/button';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport projectSupportsReplay from 'sentry/utils/replays/projectSupportsReplay';\nimport {useRoutes} from 'sentry/utils/useRoutes';\n\nimport Filter, {filterToSearchConditions, SpanOperationBreakdownFilter} from '../filter';\nimport {SetStateAction} from '../types';\n\nimport EventsTable from './eventsTable';\nimport {EventsDisplayFilterName, getEventsFilterOptions} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  eventsDisplayFilterName: EventsDisplayFilterName;\n  location: Location;\n  onChangeEventsDisplayFilter: (eventsDisplayFilterName: EventsDisplayFilterName) => void;\n  onChangeSpanOperationBreakdownFilter: (newFilter: SpanOperationBreakdownFilter) => void;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  setError: SetStateAction<string | undefined>;\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n  totalEventCount: string;\n  transactionName: string;\n  percentileValues?: Record<EventsDisplayFilterName, number>;\n  webVital?: WebVital;\n};\n\nexport const TRANSACTIONS_LIST_TITLES: Readonly<string[]> = [\n  t('event id'),\n  t('user'),\n  t('operation duration'),\n  t('total duration'),\n  t('trace id'),\n  t('timestamp'),\n];\n\nfunction EventsContent(props: Props) {\n  const {\n    location,\n    organization,\n    eventView: originalEventView,\n    transactionName,\n    spanOperationBreakdownFilter,\n    webVital,\n    setError,\n    totalEventCount,\n    projectId,\n    projects,\n  } = props;\n  const routes = useRoutes();\n  const eventView = originalEventView.clone();\n  const transactionsListTitles = TRANSACTIONS_LIST_TITLES.slice();\n  const project = projects.find(p => p.id === projectId);\n\n  if (webVital) {\n    transactionsListTitles.splice(3, 0, webVital);\n  }\n\n  const spanOperationBreakdownConditions = filterToSearchConditions(\n    spanOperationBreakdownFilter,\n    location\n  );\n\n  if (spanOperationBreakdownConditions) {\n    eventView.query = `${eventView.query} ${spanOperationBreakdownConditions}`.trim();\n    transactionsListTitles.splice(2, 1, t('%s duration', spanOperationBreakdownFilter));\n  }\n\n  const showReplayCol =\n    organization.features.includes('session-replay-ui') && projectSupportsReplay(project);\n\n  if (showReplayCol) {\n    transactionsListTitles.push(t('replay'));\n  }\n\n  return (\n    <Layout.Main fullWidth>\n      <Search {...props} />\n      <EventsTable\n        totalEventCount={totalEventCount}\n        eventView={eventView}\n        organization={organization}\n        routes={routes}\n        location={location}\n        setError={setError}\n        columnTitles={transactionsListTitles}\n        transactionName={transactionName}\n        showReplayCol={showReplayCol}\n      />\n    </Layout.Main>\n  );\n}\n\nfunction Search(props: Props) {\n  const {\n    eventView,\n    location,\n    organization,\n    spanOperationBreakdownFilter,\n    onChangeSpanOperationBreakdownFilter,\n    eventsDisplayFilterName,\n    onChangeEventsDisplayFilter,\n    percentileValues,\n  } = props;\n\n  const handleSearch = (query: string) => {\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query,\n    });\n\n    // do not propagate pagination when making a new search\n    const searchQueryParams = omit(queryParams, 'cursor');\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: searchQueryParams,\n    });\n  };\n\n  const query = decodeScalar(location.query.query, '');\n\n  const eventsFilterOptions = getEventsFilterOptions(\n    spanOperationBreakdownFilter,\n    percentileValues\n  );\n\n  const handleDiscoverButtonClick = () => {\n    trackAdvancedAnalyticsEvent('performance_views.all_events.open_in_discover', {\n      organization,\n    });\n  };\n\n  return (\n    <FilterActions>\n      <Filter\n        organization={organization}\n        currentFilter={spanOperationBreakdownFilter}\n        onChangeFilter={onChangeSpanOperationBreakdownFilter}\n      />\n      <PageFilterBar condensed>\n        <EnvironmentPageFilter />\n        <DatePageFilter alignDropdown=\"left\" />\n      </PageFilterBar>\n      <StyledSearchBar\n        organization={organization}\n        projectIds={eventView.project}\n        query={query}\n        fields={eventView.fields}\n        onSearch={handleSearch}\n      />\n      <CompactSelect\n        triggerProps={{prefix: t('Percentile')}}\n        value={eventsDisplayFilterName}\n        onChange={opt => onChangeEventsDisplayFilter(opt.value)}\n        options={Object.entries(eventsFilterOptions).map(([name, filter]) => ({\n          value: name as EventsDisplayFilterName,\n          label: filter.label,\n        }))}\n      />\n      <Button\n        to={eventView.getResultsViewUrlTarget(organization.slug)}\n        onClick={handleDiscoverButtonClick}\n      >\n        {t('Open in Discover')}\n      </Button>\n    </FilterActions>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(4, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/6;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default EventsContent;\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  isAggregateField,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {removeHistogramQueryStrings} from 'sentry/utils/performance/histogram';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {\n  decodeFilterFromLocation,\n  filterToLocationQuery,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\nimport {ZOOM_END, ZOOM_START} from '../transactionOverview/latencyChart/utils';\n\nimport EventsContent from './content';\nimport {\n  decodeEventsDisplayFilterFromLocation,\n  EventsDisplayFilterName,\n  filterEventsDisplayToLocationQuery,\n  getEventsFilterOptions,\n  getPercentilesEventView,\n  mapPercentileValues,\n} from './utils';\n\ntype PercentileValues = Record<EventsDisplayFilterName, number>;\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionEvents(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.Events}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateEventView}\n      childComponent={EventsContentWrapper}\n    />\n  );\n}\n\nfunction EventsContentWrapper(props: ChildProps) {\n  const {\n    location,\n    organization,\n    eventView,\n    transactionName,\n    setError,\n    projectId,\n    projects,\n  } = props;\n  const eventsDisplayFilterName = decodeEventsDisplayFilterFromLocation(location);\n  const spanOperationBreakdownFilter = decodeFilterFromLocation(location);\n  const webVital = getWebVital(location);\n\n  const totalEventsView = eventView.clone();\n  const percentilesView = getPercentilesEventView(eventView);\n\n  totalEventsView.sorts = [];\n  totalEventsView.fields = [{field: 'count()', width: -1}];\n\n  const getFilteredEventView = (percentiles: PercentileValues) => {\n    const filter = getEventsFilterOptions(spanOperationBreakdownFilter, percentiles)[\n      eventsDisplayFilterName\n    ];\n    const filteredEventView = eventView?.clone();\n    if (filteredEventView && filter?.query) {\n      const query = new MutableSearch(filteredEventView.query);\n      filter.query.forEach(item => query.setFilterValues(item[0], [item[1]]));\n      filteredEventView.query = query.formatString();\n    }\n    return filteredEventView;\n  };\n\n  const onChangeSpanOperationBreakdownFilter = (\n    newFilter: SpanOperationBreakdownFilter\n  ) => {\n    trackAnalyticsEvent({\n      eventName: 'Performance Views: Transaction Events Ops Breakdown Filter Dropdown',\n      eventKey: 'performance_views.transactionEvents.ops_filter_dropdown.selection',\n      organization_id: parseInt(organization.id, 10),\n      action: newFilter as string,\n    });\n\n    // Check to see if the current table sort matches the EventsDisplayFilter.\n    // If it does, we can re-sort using the new SpanOperationBreakdownFilter\n    const eventsFilterOptionSort = getEventsFilterOptions(spanOperationBreakdownFilter)[\n      eventsDisplayFilterName\n    ].sort;\n    const currentSort = eventView?.sorts?.[0];\n    let sortQuery = {};\n\n    if (\n      eventsFilterOptionSort?.kind === currentSort?.kind &&\n      eventsFilterOptionSort?.field === currentSort?.field\n    ) {\n      sortQuery = filterEventsDisplayToLocationQuery(eventsDisplayFilterName, newFilter);\n    }\n\n    const nextQuery: Location['query'] = {\n      ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n      ...filterToLocationQuery(newFilter),\n      ...sortQuery,\n    };\n\n    if (newFilter === SpanOperationBreakdownFilter.None) {\n      delete nextQuery.breakdown;\n    }\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  const onChangeEventsDisplayFilter = (newFilterName: EventsDisplayFilterName) => {\n    trackAnalyticsEvent({\n      eventName: 'Performance Views: Transaction Events Display Filter Dropdown',\n      eventKey: 'performance_views.transactionEvents.display_filter_dropdown.selection',\n      organization_id: parseInt(organization.id, 10),\n      action: newFilterName as string,\n    });\n\n    const nextQuery: Location['query'] = {\n      ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n      ...filterEventsDisplayToLocationQuery(newFilterName, spanOperationBreakdownFilter),\n    };\n\n    if (newFilterName === EventsDisplayFilterName.p100) {\n      delete nextQuery.showTransaction;\n    }\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  return (\n    <DiscoverQuery\n      eventView={totalEventsView}\n      orgSlug={organization.slug}\n      location={location}\n      setError={error => setError(error?.message)}\n      referrer=\"api.performance.transaction-summary\"\n      cursor=\"0:0:0\"\n    >\n      {({isLoading: isTotalEventsLoading, tableData: table}) => {\n        const totalEventCount: string =\n          table?.data[0]?.['count()']?.toLocaleString() || '';\n\n        return (\n          <DiscoverQuery\n            eventView={percentilesView}\n            orgSlug={organization.slug}\n            location={location}\n            referrer=\"api.performance.transaction-events\"\n          >\n            {({isLoading, tableData}) => {\n              if (isTotalEventsLoading || isLoading) {\n                return (\n                  <Layout.Main fullWidth>\n                    <LoadingIndicator />\n                  </Layout.Main>\n                );\n              }\n\n              const percentileData = tableData?.data?.[0];\n              const percentiles = mapPercentileValues(percentileData);\n              const filteredEventView = getFilteredEventView(percentiles);\n              return (\n                <EventsContent\n                  totalEventCount={totalEventCount}\n                  location={location}\n                  organization={organization}\n                  eventView={filteredEventView}\n                  transactionName={transactionName}\n                  spanOperationBreakdownFilter={spanOperationBreakdownFilter}\n                  onChangeSpanOperationBreakdownFilter={\n                    onChangeSpanOperationBreakdownFilter\n                  }\n                  eventsDisplayFilterName={eventsDisplayFilterName}\n                  onChangeEventsDisplayFilter={onChangeEventsDisplayFilter}\n                  percentileValues={percentiles}\n                  projectId={projectId}\n                  projects={projects}\n                  webVital={webVital}\n                  setError={setError}\n                />\n              );\n            }}\n          </DiscoverQuery>\n        );\n      }}\n    </DiscoverQuery>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Events')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Events')].join(' \\u2014 ');\n}\n\nfunction getWebVital(location: Location): WebVital | undefined {\n  const webVital = decodeScalar(location.query.webVital, '') as WebVital;\n  if (Object.values(WebVital).includes(webVital)) {\n    return webVital;\n  }\n  return undefined;\n}\n\nfunction generateEventView({\n  location,\n  organization,\n  transactionName,\n}: {\n  location: Location;\n  organization: Organization;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  // Default fields for relative span view\n  const fields = [\n    'id',\n    'user.display',\n    SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n    'transaction.duration',\n    'trace',\n    'timestamp',\n  ];\n  if (organization.features.includes('session-replay-ui')) {\n    fields.push('replayId');\n  }\n  const breakdown = decodeFilterFromLocation(location);\n  if (breakdown !== SpanOperationBreakdownFilter.None) {\n    fields.splice(2, 1, `spans.${breakdown}`);\n  } else {\n    fields.push(...SPAN_OP_BREAKDOWN_FIELDS);\n  }\n  const webVital = getWebVital(location);\n  if (webVital) {\n    fields.splice(3, 0, webVital);\n  }\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields,\n      query: conditions.formatString(),\n      projects: [],\n      orderby: decodeScalar(location.query.sort, '-timestamp'),\n    },\n    location\n  );\n}\n\nexport default withProjects(withOrganization(TransactionEvents));\n"],"names":["FILTER_OPTIONS","label","t","value","Histogram","Component","location","zoomKeys","this","props","browserHistory","pathname","query","removeHistogramQueryStrings","dataFilter","isZoomed","map","key","some","undefined","getActiveFilter","decodeScalar","item","render","childrenProps","handleResetView","activeFilter","handleFilterChange","filterOptions","children","cursor","forEach","TRANSACTIONS_LIST_TITLES","EventsContent","organization","eventView","originalEventView","transactionName","spanOperationBreakdownFilter","webVital","setError","totalEventCount","projectId","projects","routes","useRoutes","clone","transactionsListTitles","slice","project","find","p","id","splice","spanOperationBreakdownConditions","filterToSearchConditions","trim","showReplayCol","features","includes","projectSupportsReplay","push","fullWidth","Search","columnTitles","onChangeSpanOperationBreakdownFilter","eventsDisplayFilterName","onChangeEventsDisplayFilter","percentileValues","eventsFilterOptions","getEventsFilterOptions","FilterActions","currentFilter","onChangeFilter","condensed","alignDropdown","StyledSearchBar","projectIds","fields","onSearch","queryParams","normalizeDateTimeParams","searchQueryParams","omit","triggerProps","prefix","onChange","opt","options","Object","entries","name","filter","to","getResultsViewUrlTarget","slug","onClick","trackAdvancedAnalyticsEvent","space","theme","breakpoints","small","xlarge","SearchBar","TransactionEvents","tab","Tab","getDocumentTitle","generateEventView","childComponent","EventsContentWrapper","decodeEventsDisplayFilterFromLocation","decodeFilterFromLocation","getWebVital","totalEventsView","percentilesView","getPercentilesEventView","sorts","field","width","newFilter","trackAnalyticsEvent","eventName","eventKey","organization_id","parseInt","action","eventsFilterOptionSort","sort","currentSort","sortQuery","kind","filterEventsDisplayToLocationQuery","nextQuery","ZOOM_START","ZOOM_END","filterToLocationQuery","SpanOperationBreakdownFilter","breakdown","newFilterName","EventsDisplayFilterName","showTransaction","orgSlug","error","message","referrer","isLoading","isTotalEventsLoading","tableData","table","data","toLocaleString","percentileData","percentiles","mapPercentileValues","filteredEventView","MutableSearch","setFilterValues","formatString","getFilteredEventView","String","length","join","values","WebVital","conditions","keys","filters","isAggregateField","removeFilter","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","SPAN_OP_BREAKDOWN_FIELDS","EventView","version","orderby","withProjects","withOrganization"],"sourceRoot":""}