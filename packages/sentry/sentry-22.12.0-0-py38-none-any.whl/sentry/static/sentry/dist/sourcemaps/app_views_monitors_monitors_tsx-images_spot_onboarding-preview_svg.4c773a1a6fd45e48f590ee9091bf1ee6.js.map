{"version":3,"file":"chunks/app_views_monitors_monitors_tsx-images_spot_onboarding-preview_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/monitorIcon.tsx","webpack:///./app/views/monitors/monitors.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {\n  Input,\n  InputGroup,\n  InputLeadingItems,\n  InputProps,\n  InputTrailingItems,\n} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputLeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputLeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputTrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              type=\"button\"\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputTrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport {Status} from './types';\n\nexport default styled('div')<{size: number; status: Status}>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.status === 'missed_checkin'\n            ? p.theme.warning\n            : p.theme.disabled\n        };`};\n`;\n","import {Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport onboardingImg from 'sentry-images/spot/onboarding-preview.svg';\n\nimport Access from 'sentry/components/acl/access';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Link from 'sentry/components/links/link';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport withOrganization from 'sentry/utils/withOrganization';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorIcon from './monitorIcon';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  WithRouteAnalyticsProps &\n  WithRouterProps<{orgId: string}> & {\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  monitorList: Monitor[] | null;\n};\n\nfunction NewMonitorButton(props: ButtonProps) {\n  const organization = useOrganization();\n  return (\n    <Access organization={organization} access={['project:write']}>\n      {({hasAccess}) => (\n        <Button\n          to={`/organizations/${organization.slug}/monitors/create/`}\n          priority=\"primary\"\n          disabled={!hasAccess}\n          tooltipProps={{\n            disabled: hasAccess,\n          }}\n          title={t(\n            'You must be an organization owner, manager, or admin to set up a monitor'\n          )}\n          {...props}\n        >\n          {props.children}\n        </Button>\n      )}\n    </Access>\n  );\n}\n\nclass Monitors extends AsyncView<Props, State> {\n  get orgSlug() {\n    return this.props.organization.slug;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {location} = this.props;\n    return [\n      [\n        'monitorList',\n        `/organizations/${this.orgSlug}/monitors/`,\n        {\n          query: location.query,\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `Monitors - ${this.orgSlug}`;\n  }\n\n  componentDidMount() {\n    this.props.setEventNames('monitors.page_viewed', 'Monitors: Page Viewed');\n  }\n  handleSearch = (query: string) => {\n    const {location, router} = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: normalizeDateTimeParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  renderBody() {\n    const {monitorList, monitorListPageLinks} = this.state;\n    const {organization} = this.props;\n\n    return (\n      <Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <HeaderTitle>\n              {t('Cron Monitors')} <FeatureBadge type=\"beta\" />\n            </HeaderTitle>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <NewMonitorButton size=\"sm\">{t('Set Up Cron Monitor')}</NewMonitorButton>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <Filters>\n              <ProjectPageFilter resetParamsOnChange={['cursor']} />\n              <SearchBar\n                query={decodeScalar(qs.parse(location.search)?.query, '')}\n                placeholder={t('Search for monitors.')}\n                onSearch={this.handleSearch}\n              />\n            </Filters>\n            {monitorList?.length ? (\n              <Fragment>\n                <StyledPanelTable\n                  headers={[t('Monitor Name'), t('Last Check-In'), t('Project')]}\n                >\n                  {monitorList?.map(monitor => (\n                    <Fragment key={monitor.id}>\n                      <MonitorName>\n                        <MonitorIcon status={monitor.status} size={16} />\n                        <StyledLink\n                          to={`/organizations/${organization.slug}/monitors/${monitor.id}/`}\n                        >\n                          {monitor.name}\n                        </StyledLink>\n                      </MonitorName>\n                      {monitor.nextCheckIn ? (\n                        <StyledTimeSince date={monitor.lastCheckIn} />\n                      ) : (\n                        <div>{t('n/a')}</div>\n                      )}\n                      <IdBadge\n                        project={monitor.project}\n                        avatarSize={18}\n                        avatarProps={{hasTooltip: true, tooltip: monitor.project.slug}}\n                      />\n                    </Fragment>\n                  ))}\n                </StyledPanelTable>\n                {monitorListPageLinks && (\n                  <Pagination pageLinks={monitorListPageLinks} {...this.props} />\n                )}\n              </Fragment>\n            ) : (\n              <OnboardingPanel image={<img src={onboardingImg} />}>\n                <h3>{t('Let Sentry Monitor Your Recurring Jobs')}</h3>\n                <p>\n                  {t(\n                    \"We'll tell you if your recurring jobs are running on schedule, failing, or succeeding.\"\n                  )}\n                </p>\n                <NewMonitorButton>{t('Set Up First Cron Monitor')}</NewMonitorButton>\n              </OnboardingPanel>\n            )}\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst HeaderTitle = styled(Layout.Title)`\n  margin-top: 0;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-left: ${space(2)};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst Filters = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(auto, 300px) 1fr;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n`;\n\nconst MonitorName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr max-content max-content;\n`;\n\nexport default withRouteAnalytics(withSentryRouter(withOrganization(Monitors)));\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","OnboardingPanel","image","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","SearchBar","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","target","onSubmit","preventDefault","current","blur","clearSearch","FormWrap","disablePointerEvents","color","StyledInput","ref","name","autoComplete","SearchBarTrailingButton","borderless","onClick","icon","Input","Button","subText","AsyncView","AsyncComponent","getTitle","title","renderComponent","status","error","success","warning","disabled","NewMonitorButton","useOrganization","to","slug","priority","tooltipProps","Monitors","location","router","push","pathname","normalizeDateTimeParams","orgSlug","getEndpoints","componentDidMount","setEventNames","renderBody","monitorList","monitorListPageLinks","state","Fragment","HeaderTitle","fullWidth","Filters","resetParamsOnChange","decodeScalar","qs","search","placeholder","handleSearch","length","StyledPanelTable","headers","map","monitor","MonitorName","StyledLink","id","nextCheckIn","StyledTimeSince","date","lastCheckIn","project","avatarSize","avatarProps","hasTooltip","tooltip","pageLinks","src","onboardingImg","Layout","Link","TimeSince","PanelTable","withRouteAnalytics","withSentryRouter"],"sourceRoot":""}