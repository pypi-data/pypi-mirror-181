{"version":3,"file":"chunks/app_views_replays_replays_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/replays/replaysFeatureBadge.tsx","webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/views/replays/replaySearchBar.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/replays.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import FeatureBadge from 'sentry/components/featureBadge';\n\nfunction ReplaysFeatureBadge(\n  props: Omit<React.ComponentProps<typeof FeatureBadge>, 'type'>\n) {\n  return <FeatureBadge {...props} type=\"beta\" />;\n}\n\nexport default ReplaysFeatureBadge;\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>>;\n\ntype Result = State;\n\nfunction useReplayList({eventView, location, organization}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n\n    setData(response);\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return orgSentOneOrMoreReplayEvent;\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n  const hasSentOneReplay = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  useEffect(() => {\n    if (hasSentOneReplay && location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n    }\n  }, [hasSentOneReplay, location.hash]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n  }, []);\n\n  return {hasSentOneReplay, activateSidebar};\n}\n","import SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, SavedSearchType, TagCollection} from 'sentry/types';\nimport {getFieldDefinition, REPLAY_FIELDS} from 'sentry/utils/fields';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        kind: getReplayFieldDefinition(key)?.kind,\n      },\n    ])\n  );\n}\n\nconst REPLAY_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction SearchBar(props: Props) {\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={undefined}\n      supportedTags={REPLAY_TAGS}\n      placeholder={t('Search for users, duration, countErrors, and more')}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      highlightUnsupportedTags\n      fieldDefinitionGetter={getReplayFieldDefinition}\n    />\n  );\n}\n\nexport default SearchBar;\n","import {useEffect, useRef} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport space from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/replaySearchBar';\n\nconst DEFAULT_QUERY = 'duration:>=5';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const location = useLocation();\n  const organization = useOrganization();\n  const didMount = useRef(false);\n\n  const {pathname, query} = location;\n\n  useEffect(() => {\n    if (!didMount.current && !query?.query) {\n      browserHistory.push({\n        pathname,\n        query: {\n          ...query,\n          cursor: undefined,\n          query: DEFAULT_QUERY,\n        },\n      });\n    }\n    didMount.current = true;\n  }, [pathname, query]);\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery={decodeScalar(query?.query ?? DEFAULT_QUERY, '')}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport default function ReplayOnboardingPanel(props: Props) {\n  return (\n    <OnboardingPanel image={<HeroImage src={emptyStateImg} />}>\n      <h3>{t('Get to the root cause of errors faster.')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>{props.children}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst HeroImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport PageHeading from 'sentry/components/pageHeading';\nimport Pagination from 'sentry/components/pagination';\nimport ReplaysFeatureBadge from 'sentry/components/replays/replaysFeatureBadge';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/filters';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = RouteComponentProps<{orgId: string}, {}, any, ReplayListLocationQuery>;\n\nfunction Replays({location}: Props) {\n  const organization = useOrganization();\n  const theme = useTheme();\n  const minWidthIsSmall = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  const {hasSentOneReplay, activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  return (\n    <Fragment>\n      <Layout.Header>\n        <StyledLayoutHeaderContent>\n          <StyledHeading>\n            {t('Replays')} <ReplaysFeatureBadge space={1} />\n          </StyledHeading>\n        </StyledLayoutHeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <StyledPageContent>\n          <ReplaysFilters />\n          {hasSentOneReplay ? (\n            <Fragment>\n              <ReplayTable\n                isFetching={isFetching}\n                fetchError={fetchError}\n                replays={replays}\n                showProjectColumn={minWidthIsSmall}\n                sort={eventView.sorts[0]}\n              />\n              <Pagination\n                pageLinks={pageLinks}\n                onCursor={(cursor, path, searchQuery) => {\n                  browserHistory.push({\n                    pathname: path,\n                    query: {...searchQuery, cursor},\n                  });\n                }}\n              />\n            </Fragment>\n          ) : (\n            <ReplayOnboardingPanel>\n              <Button onClick={activateSidebar} priority=\"primary\">\n                {t('Get Started')}\n              </Button>\n              <Button\n                href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n                external\n              >\n                {t('Read Docs')}\n              </Button>\n            </ReplayOnboardingPanel>\n          )}\n        </StyledPageContent>\n      </PageFiltersContainer>\n    </Fragment>\n  );\n}\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n`;\n\nconst StyledHeading = styled(PageHeading)`\n  line-height: 40px;\n  display: flex;\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default Replays;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","ReplaysFeatureBadge","type","eventView","location","organization","api","useApi","data","setData","useState","fetchError","undefined","isFetching","pageLinks","replays","loadReplays","useCallback","async","prev","response","fetchReplayList","useEffect","useHaveSelectedProjectsSentAnyReplayEvents","projects","useProjects","selection","usePageFilters","orgSentOneOrMoreReplayEvent","useMemo","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","some","hasReplays","useReplayOnboardingSidebarPanel","useRouteContext","hasSentOneReplay","hash","SidebarPanelStore","SidebarPanelKey","activateSidebar","event","preventDefault","window","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","REPLAY_TAGS","fieldKeys","REPLAY_FIELDS","Object","fromEntries","name","kind","SearchBar","onGetTagValues","supportedTags","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","maxMenuHeight","hasRecentSearches","highlightUnsupportedTags","fieldDefinitionGetter","DEFAULT_QUERY","ReplaysFilters","useLocation","useOrganization","didMount","useRef","pathname","query","current","browserHistory","cursor","FilterContainer","condensed","resetParamsOnChange","alignDropdown","pageFilters","defaultQuery","decodeScalar","onSearch","trim","ReplayOnboardingPanel","HeroImage","src","emptyStateImg","ButtonList","gap","large","xlarge","ButtonBar","Replays","useTheme","minWidthIsSmall","useMedia","conditions","MutableSearch","EventView","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","sort","DEFAULT_SORT","useReplayList","Fragment","StyledLayoutHeaderContent","StyledHeading","StyledPageContent","showProjectColumn","sorts","onCursor","path","onClick","priority","href","external","Layout","PageHeading","PageContent","gray200","background"],"sourceRoot":""}