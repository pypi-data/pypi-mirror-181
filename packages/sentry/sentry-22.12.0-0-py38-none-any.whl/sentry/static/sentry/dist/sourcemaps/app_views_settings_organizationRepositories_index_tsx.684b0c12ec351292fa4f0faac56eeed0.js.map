{"version":3,"file":"chunks/app_views_settings_organizationRepositories_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4LAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,21BCUA,SAASC,EAAyB,GAA+C,IAA/C,SAACC,EAAQ,mBAAEC,EAAkB,OAAEC,GAAc,EAC7E,MAAMC,GAAMC,EAAAA,EAAAA,MAEN,MAACC,GAASH,EACVI,EAAcN,GAAYA,EAASO,OAAS,EAElD,OACE,0BACE,QAAC,IAAkB,CAACC,OAAOC,EAAAA,EAAAA,GAAE,mBAC7B,QAAC,IAAS,CAACC,GAAK,aAAYL,kBAAsB,UAC/CI,EAAAA,EAAAA,GACC,sHAGFH,IACA,eAAKK,UAAU,QAAO,UACpB,QAAC,IAAS,YACPF,EAAAA,EAAAA,GACC,+PACD,KAEAG,EAAAA,EAAAA,IAAI,iDAAkD,CACrDC,MAAM,QAAC,IAAY,CAACC,KAAK,kDAMhCR,GACC,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEG,EAAAA,EAAAA,GAAE,yBAChB,QAAC,IAAS,WACR,wBACGT,EAASe,KAAIC,IACZ,QAAC,IAAa,CACZb,IAAKA,EAELc,WAAYD,EACZE,cAAY,EACZb,MAAOA,EACPJ,mBAAoBA,GAJfe,EAAKG,cAWpB,QAAC,KAAK,WACJ,QAAC,IAAY,CACXC,MAAM,QAAC,KAAU,CAACC,KAAK,OACvBb,OAAOC,EAAAA,EAAAA,GAAE,qCACTa,aAAab,EAAAA,EAAAA,GACX,2HAEFc,QACE,QAAC,KAAM,CAACC,UAAQ,EAACV,KAAK,yCAAwC,UAC3DL,EAAAA,EAAAA,GAAE,sBAQnB,CAhESV,EAAwB,uCAkEjC,UCrEe,MAAM0B,UAA0CC,EAAAA,EAAwB,qEAO/DC,IACpB,MAAM3B,EAAW4B,KAAKC,MAAM7B,SAC5BA,GAAU8B,SAAQC,IACZA,EAAKZ,KAAOQ,EAAKR,KACnBY,EAAKC,OAASL,EAAKK,OACrB,IAEFJ,KAAKK,SAAS,CAACjC,YAAU,GAC1B,CAdDkC,eACE,MAAM,MAAC7B,GAASuB,KAAKO,MAAMjC,OAC3B,MAAO,CAAC,CAAC,WAAa,kBAAiBG,WAAgB,CAAC+B,MAAO,CAACJ,OAAQ,MAC1E,CAaAK,WACE,MAAM,MAAChC,GAASuB,KAAKO,MAAMjC,OAC3B,OAAOoC,EAAAA,EAAAA,IAAc7B,EAAAA,EAAAA,GAAE,gBAAiBJ,GAAO,EACjD,CAEAkC,aACE,MAAM,SAACvC,EAAQ,kBAAEwC,GAAqBZ,KAAKC,MAE3C,OACE,QAAC,EAAAY,SAAQ,YACP,QAAC,EAAwB,IACnBb,KAAKO,MACTnC,SAAUA,EACVC,mBAAoB2B,KAAK3B,qBAE1BuC,IACC,QAAC,IAAU,CAACE,UAAWF,KAAuBZ,KAAKO,UAI3D,E","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.tsx","webpack:///./app/views/settings/organizationRepositories/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport RepositoryRow from 'sentry/components/repositoryRow';\nimport {IconCommit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Repository, RepositoryStatus} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  itemList: Repository[];\n  onRepositoryChange: (data: {id: string; status: RepositoryStatus}) => void;\n};\n\nfunction OrganizationRepositories({itemList, onRepositoryChange, params}: Props) {\n  const api = useApi();\n\n  const {orgId} = params;\n  const hasItemList = itemList && itemList.length > 0;\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Repositories')} />\n      <AlertLink to={`/settings/${orgId}/integrations/`}>\n        {t(\n          'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n        )}\n      </AlertLink>\n      {!hasItemList && (\n        <div className=\"m-b-2\">\n          <TextBlock>\n            {t(\n              \"Connecting a repository allows Sentry to capture commit data via webhooks. This enables features like suggested assignees and resolving issues via commit message. Once you've connected a repository, you can associate commits with releases via the API.\"\n            )}\n            &nbsp;\n            {tct('See our [link:documentation] for more details.', {\n              link: <ExternalLink href=\"https://docs.sentry.io/learn/releases/\" />,\n            })}\n          </TextBlock>\n        </div>\n      )}\n\n      {hasItemList ? (\n        <Panel>\n          <PanelHeader>{t('Added Repositories')}</PanelHeader>\n          <PanelBody>\n            <div>\n              {itemList.map(repo => (\n                <RepositoryRow\n                  api={api}\n                  key={repo.id}\n                  repository={repo}\n                  showProvider\n                  orgId={orgId}\n                  onRepositoryChange={onRepositoryChange}\n                />\n              ))}\n            </div>\n          </PanelBody>\n        </Panel>\n      ) : (\n        <Panel>\n          <EmptyMessage\n            icon={<IconCommit size=\"xl\" />}\n            title={t('Sentry is better with commit data')}\n            description={t(\n              'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n            )}\n            action={\n              <Button external href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            }\n          />\n        </Panel>\n      )}\n    </div>\n  );\n}\n\nexport default OrganizationRepositories;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Repository} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationRepositories from './organizationRepositories';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  itemList: Repository[] | null;\n};\n\nexport default class OrganizationRepositoriesContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    return [['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}]];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = (data: Pick<Repository, 'id' | 'status'>) => {\n    const itemList = this.state.itemList;\n    itemList?.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Repositories'), orgId, false);\n  }\n\n  renderBody() {\n    const {itemList, itemListPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          itemList={itemList!}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","OrganizationRepositories","itemList","onRepositoryChange","params","api","useApi","orgId","hasItemList","length","title","t","to","className","tct","link","href","map","repo","repository","showProvider","id","icon","size","description","action","external","OrganizationRepositoriesContainer","AsyncView","data","this","state","forEach","item","status","setState","getEndpoints","props","query","getTitle","routeTitleGen","renderBody","itemListPageLinks","Fragment","pageLinks"],"sourceRoot":""}