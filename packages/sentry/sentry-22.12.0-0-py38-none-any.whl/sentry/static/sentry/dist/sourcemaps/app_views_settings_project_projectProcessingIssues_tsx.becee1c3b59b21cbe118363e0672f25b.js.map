{"version":3,"file":"chunks/app_views_settings_project_projectProcessingIssues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/data/forms/processingIssues.tsx","webpack:///./app/views/settings/project/projectProcessingIssues.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","// Export route to make these forms searchable by label/help\nimport {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\nexport const route = '/settings/:orgId/projects/:projectId/processing-issues/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'sentry:reprocessing_active',\n        type: 'boolean',\n        label: t('Reprocessing active'),\n        disabled: ({access}) => !access.has('project:write'),\n        disabledReason: t('Only admins may change reprocessing settings'),\n        help: t(`If reprocessing is enabled, Events with fixable issues will be\n                held back until you resolve them. Processing issues will then\n                show up in the list above with hints how to fix them.\n                If reprocessing is disabled, Events with unresolved issues will\n                also show up in the stream.\n                `),\n        saveOnBlur: false,\n        saveMessage: ({value}) =>\n          value\n            ? t('Reprocessing applies to future events only.')\n            : t(`All events with errors will be flushed into your issues stream.\n                Beware that this process may take some time and cannot be undone.`),\n        getData: form => ({options: form}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelTable,\n} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport TimeSince from 'sentry/components/timeSince';\nimport formGroups from 'sentry/data/forms/processingIssues';\nimport {IconQuestion} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport {Organization, ProcessingIssue, ProcessingIssueItem} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nexport const projectProcessingIssuesMessages = {\n  native_no_crashed_thread: t('No crashed thread found in crash report'),\n  native_internal_failure: t('Internal failure when attempting to symbolicate: {error}'),\n  native_bad_dsym: t('The debug information file used was broken.'),\n  native_missing_optionally_bundled_dsym: t(\n    'An optional debug information file was missing.'\n  ),\n  native_missing_dsym: t('A required debug information file was missing.'),\n  native_missing_system_dsym: t('A system debug information file was missing.'),\n  native_missing_symbol: t(\n    'Could not resolve one or more frames in debug information file.'\n  ),\n  native_simulator_frame: t('Encountered an unprocessable simulator frame.'),\n  native_unknown_image: t('A binary image is referenced that is unknown.'),\n  proguard_missing_mapping: t('A proguard mapping file was missing.'),\n  proguard_missing_lineno: t('A proguard mapping file does not contain line info.'),\n};\n\nconst HELP_LINKS = {\n  native_missing_dsym: 'https://docs.sentry.io/platforms/apple/dsym/',\n  native_bad_dsym: 'https://docs.sentry.io/platforms/apple/dsym/',\n  native_missing_system_dsym: 'https://develop.sentry.dev/self-hosted/',\n  native_missing_symbol: 'https://develop.sentry.dev/self-hosted/',\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  expected: number;\n  formData: object;\n  loading: boolean;\n  pageLinks: null | string;\n  processingIssues: null | ProcessingIssue;\n  reprocessing: boolean;\n};\n\nclass ProjectProcessingIssues extends Component<Props, State> {\n  state: State = {\n    formData: {},\n    loading: true,\n    reprocessing: false,\n    expected: 0,\n    error: false,\n    processingIssues: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 2,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: data => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          loading: expected > 0,\n          formData: data.options,\n        });\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/processingissues/?detailed=1`,\n      {\n        success: (data, _, resp) => {\n          const expected = this.state.expected - 1;\n          this.setState({\n            expected,\n            error: false,\n            loading: expected > 0,\n            processingIssues: data,\n            pageLinks: resp?.getResponseHeader('Link') ?? null,\n          });\n        },\n        error: () => {\n          const expected = this.state.expected - 1;\n          this.setState({\n            expected,\n            error: true,\n            loading: expected > 0,\n          });\n        },\n      }\n    );\n  };\n\n  sendReprocessing = (e: React.MouseEvent<Element>) => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true,\n      reprocessing: true,\n    });\n\n    addLoadingMessage(t('Started reprocessing\\u2026'));\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {\n      method: 'POST',\n      success: () => {\n        this.fetchData();\n        this.setState({\n          reprocessing: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          reprocessing: false,\n        });\n      },\n      complete: () => {\n        clearIndicators();\n      },\n    });\n  };\n\n  discardEvents = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 1,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/processingissues/discard/`, {\n      method: 'DELETE',\n      success: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: false,\n          loading: expected > 0,\n        });\n        // TODO (billyvg): Need to fix this\n        // we reload to get rid of the badge in the sidebar\n        window.location.reload();\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n  };\n\n  deleteProcessingIssues = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 1,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {\n      method: 'DELETE',\n      success: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: false,\n          loading: expected > 0,\n        });\n        // TODO (billyvg): Need to fix this\n        // we reload to get rid of the badge in the sidebar\n        window.location.reload();\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n  };\n\n  renderDebugTable() {\n    let body: React.ReactNode;\n    const {loading, error, processingIssues} = this.state;\n    if (loading) {\n      body = this.renderLoading();\n    } else if (error) {\n      body = <LoadingError onRetry={this.fetchData} />;\n    } else if (\n      processingIssues?.hasIssues ||\n      processingIssues?.resolveableIssues ||\n      processingIssues?.issuesProcessing\n    ) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  renderLoading() {\n    return (\n      <Panel>\n        <LoadingIndicator />\n      </Panel>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t('Good news! There are no processing issues.')}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  getProblemDescription(item: ProcessingIssueItem) {\n    const msg = projectProcessingIssuesMessages[item.type];\n    return msg || t('Unknown Error');\n  }\n\n  getImageName(path: string) {\n    const pathSegments = path.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(path) ? '\\\\' : '/');\n    return pathSegments[pathSegments.length - 1];\n  }\n\n  renderProblem(item: ProcessingIssueItem) {\n    const description = this.getProblemDescription(item);\n    const helpLink = HELP_LINKS[item.type];\n\n    return (\n      <div>\n        <span>{description}</span>{' '}\n        {helpLink && (\n          <ExternalLink href={helpLink}>\n            <IconQuestion size=\"xs\" />\n          </ExternalLink>\n        )}\n      </div>\n    );\n  }\n\n  renderDetails(item: ProcessingIssueItem) {\n    let dsymUUID: React.ReactNode = null;\n    let dsymName: React.ReactNode = null;\n    let dsymArch: React.ReactNode = null;\n\n    if (item.data._scope === 'native') {\n      if (item.data.image_uuid) {\n        dsymUUID = <code className=\"uuid\">{item.data.image_uuid}</code>;\n      }\n      if (item.data.image_path) {\n        dsymName = <em>{this.getImageName(item.data.image_path)}</em>;\n      }\n      if (item.data.image_arch) {\n        dsymArch = item.data.image_arch;\n      }\n    }\n\n    return (\n      <span>\n        {dsymUUID && <span> {dsymUUID}</span>}\n        {dsymArch && <span> {dsymArch}</span>}\n        {dsymName && <span> (for {dsymName})</span>}\n      </span>\n    );\n  }\n\n  renderResolveButton() {\n    const issues = this.state.processingIssues;\n\n    if (issues === null || this.state.reprocessing) {\n      return null;\n    }\n    if (issues.resolveableIssues <= 0) {\n      return null;\n    }\n\n    const fixButton = tn(\n      'Click here to trigger processing for %s pending event',\n      'Click here to trigger processing for %s pending events',\n      issues.resolveableIssues\n    );\n\n    return (\n      <AlertLink priority=\"info\" onClick={this.sendReprocessing}>\n        {t('Pro Tip')}: {fixButton}\n      </AlertLink>\n    );\n  }\n\n  renderResults() {\n    const {processingIssues} = this.state;\n    const fixLink = processingIssues ? processingIssues.signedLink : false;\n\n    let fixLinkBlock: React.ReactNode = null;\n\n    if (fixLink) {\n      fixLinkBlock = (\n        <Panel>\n          <PanelHeader>\n            {t('Having trouble uploading debug informations? We can help!')}\n          </PanelHeader>\n          <PanelBody withPadding>\n            <label>\n              {t(\n                \"Paste this command into your shell and we'll attempt to upload the missing symbols from your machine:\"\n              )}\n            </label>\n            <TextCopyInput monospace>{'curl -sL \"{fixLink}\" | bash'}</TextCopyInput>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    let processingRow: React.ReactNode = null;\n    if (processingIssues && processingIssues.issuesProcessing > 0) {\n      processingRow = (\n        <StyledPanelAlert type=\"info\" showIcon>\n          {tn(\n            'Reprocessing %s event …',\n            'Reprocessing %s events …',\n            processingIssues.issuesProcessing\n          )}\n        </StyledPanelAlert>\n      );\n    }\n\n    return (\n      <Fragment>\n        {fixLinkBlock}\n        <h3>\n          {t('Pending Issues')}\n          <Access access={['project:write']}>\n            {({hasAccess}) => (\n              <Button\n                size=\"sm\"\n                className=\"pull-right\"\n                disabled={!hasAccess}\n                onClick={() => this.discardEvents()}\n              >\n                {t('Discard all')}\n              </Button>\n            )}\n          </Access>\n        </h3>\n        <PanelTable headers={[t('Problem'), t('Details'), t('Events'), t('Last seen')]}>\n          {processingRow}\n          {processingIssues?.issues?.map((item, idx) => (\n            <Fragment key={idx}>\n              <div>{this.renderProblem(item)}</div>\n              <div>{this.renderDetails(item)}</div>\n              <div>{item.numEvents + ''}</div>\n              <div>\n                <TimeSince date={item.lastSeen} />\n              </div>\n            </Fragment>\n          ))}\n        </PanelTable>\n      </Fragment>\n    );\n  }\n\n  renderReprocessingSettings() {\n    const access = new Set(this.props.organization.access);\n    if (this.state.loading) {\n      return this.renderLoading();\n    }\n\n    const {formData} = this.state;\n    const {orgId, projectId} = this.props.params;\n    return (\n      <Form\n        saveOnBlur\n        onSubmitSuccess={this.deleteProcessingIssues}\n        apiEndpoint={`/projects/${orgId}/${projectId}/`}\n        apiMethod=\"PUT\"\n        initialData={formData}\n      >\n        <JsonForm\n          access={access}\n          forms={formGroups}\n          renderHeader={() => (\n            <PanelAlert type=\"warning\">\n              <TextBlock noMargin>\n                {t(`Reprocessing does not apply to Minidumps. Even when enabled,\n                    Minidump events with processing issues will show up in the\n                    issues stream immediately and cannot be reprocessed.`)}\n              </TextBlock>\n            </PanelAlert>\n          )}\n        />\n      </Form>\n    );\n  }\n\n  render() {\n    const {projectId} = this.props.params;\n    const title = t('Processing Issues');\n    return (\n      <div>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <SettingsPageHeader title={title} />\n        <TextBlock>\n          {t(\n            `For some platforms the event processing requires configuration or\n          manual action.  If a misconfiguration happens or some necessary\n          steps are skipped, issues can occur during processing. (The most common\n          reason for this is missing debug symbols.) In these cases you can see\n          all the problems here with guides of how to correct them.`\n          )}\n        </TextBlock>\n        {this.renderDebugTable()}\n        {this.renderResolveButton()}\n        {this.renderReprocessingSettings()}\n      </div>\n    );\n  }\n}\n\nconst StyledPanelAlert = styled(PanelAlert)`\n  grid-column: 1/5;\n`;\n\nexport {ProjectProcessingIssues};\n\nexport default withApi(withOrganization(ProjectProcessingIssues));\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","route","title","fields","name","label","disabled","has","disabledReason","help","saveOnBlur","saveMessage","value","getData","form","options","projectProcessingIssuesMessages","native_no_crashed_thread","native_internal_failure","native_bad_dsym","native_missing_optionally_bundled_dsym","native_missing_dsym","native_missing_system_dsym","native_missing_symbol","native_simulator_frame","native_unknown_image","proguard_missing_mapping","proguard_missing_lineno","HELP_LINKS","ProjectProcessingIssues","formData","loading","reprocessing","expected","error","processingIssues","pageLinks","orgId","projectId","params","setState","state","api","request","success","data","_","resp","getResponseHeader","e","preventDefault","addLoadingMessage","method","fetchData","complete","clearIndicators","window","location","reload","componentDidMount","renderDebugTable","body","renderLoading","onRetry","hasIssues","resolveableIssues","issuesProcessing","renderResults","renderEmpty","getProblemDescription","item","getImageName","path","pathSegments","split","test","length","renderProblem","description","helpLink","href","size","renderDetails","dsymUUID","dsymName","dsymArch","_scope","image_uuid","className","image_path","image_arch","renderResolveButton","issues","fixButton","tn","priority","onClick","sendReprocessing","fixLinkBlock","signedLink","withPadding","monospace","processingRow","StyledPanelAlert","Fragment","discardEvents","headers","map","idx","numEvents","date","lastSeen","renderReprocessingSettings","Set","onSubmitSuccess","deleteProcessingIssues","apiEndpoint","apiMethod","initialData","forms","formGroups","renderHeader","noMargin","projectSlug","PanelAlert","withApi"],"sourceRoot":""}