{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0LAYA,QAZA,SACEA,EACAC,GAGQ,IAFRC,IAAsB,UAAH,+CACnBC,EAAoB,uCAEpB,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC3C,C,wPCJe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE,QAAC,IAAmB,CAACC,MAAOC,KAAKH,WAAW,SACzCG,KAAKC,mBAGZ,EAdmBN,EAAS,uB,+pBCcf,MAAMO,UAA+BP,EAAAA,EAClDQ,eACE,MAAM,MAACC,EAAK,UAAEC,GAAaL,KAAKM,MAAMC,OACtC,MAAO,CAAC,CAAC,UAAY,aAAYH,KAASC,WAC5C,CAEAR,WACE,MAAM,UAACQ,GAAaL,KAAKM,MAAMC,OAC/B,OAAOC,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,oBAAqBJ,GAAW,EACzD,CAEAK,aACE,MAAO,CACL,CACEC,KAAM,gCACNC,KAAKC,EAAAA,EAAAA,GAAc,OAAQb,KAAKM,QAElC,CACEK,KAAM,uCACNC,KAAKC,EAAAA,EAAAA,GAAc,aAAcb,KAAKM,QAExC,CACEK,KAAM,iCACNC,KAAKC,EAAAA,EAAAA,GAAc,QAASb,KAAKM,QAGvC,CAEAQ,aACE,MAAM,OAACP,GAAUP,KAAKM,OAChB,QAACS,GAAWf,KAAKgB,MACvB,OAAgB,OAAZD,EACK,MAIP,0BACE,QAAC,IAAkB,CAAChB,OAAOU,EAAAA,EAAAA,GAAE,8BAE7B,QAAC,IAAS,CAACM,QAASA,EAASV,UAAWE,EAAOF,UAAWD,MAAOG,EAAOH,SAExE,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEK,EAAAA,EAAAA,GAAE,+BAChB,QAAC,IAAS,CAACQ,aAAW,aACpB,QAAC,IAAS,CAACC,MAAO,CAACC,aAAc,IAAI,UAClCC,EAAAA,EAAAA,IACC,uHACA,CACEC,WAAW,6CAIjB,iBAAOC,UAAU,QAAQJ,MAAO,CAACC,aAAc,GAAG,UAChD,4BACE,yBACE,cAAID,MAAO,CAACK,QAAS,WAAW,iCAChC,cAAIL,MAAO,CAACK,QAAS,WAAW,WAC7Bd,EAAAA,EAAAA,GAAE,0CAAyC,WAGhD,yBACE,cAAIS,MAAO,CAACK,QAAS,WAAW,6BAChC,cAAIL,MAAO,CAACK,QAAS,WAAW,UAC7Bd,EAAAA,EAAAA,GAAE,oDAQf,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEA,EAAAA,EAAAA,GAAE,wBAChB,QAAC,IAAS,UACPT,KAAKU,aAAac,KAAI,QAAC,KAACb,EAAI,IAAEC,GAAI,SACjC,QAACa,EAAU,YACT,QAACC,EAAU,UAAEf,KACb,QAAC,KAAM,CAACgB,GAAIf,EAAKgB,SAAS,UAAS,UAChCnB,EAAAA,EAAAA,GAAE,oBAHUG,EAKJ,WAMzB,EAGF,MAAMa,GAAa,OAAOI,EAAAA,GAAS,oBAAhB,CAAiB,4EAK9BH,GAAa,OAAO,OAAM,oBAAb,CAAc,0C,2aC1GjC,MAAMI,EAAmB,kDAElB,SAASC,EAAehB,GAC7B,MAAMiB,EAAWjB,EAAQkB,OAASlB,EAAQ,GAAGmB,IAAIC,SAAWL,EAC5D,OAAOM,EAAAA,EAAAA,GAAe,CACpBC,MAAOL,EACPM,MAAOR,GAEX,CAQe,SAASS,EAAU,GAAoC,IAApC,QAACxB,EAAO,MAAEX,EAAK,UAAEC,GAAiB,EAClE,OACE,QAAC,KAAK,YACJ,QAAC,KAAW,WAAEI,EAAAA,EAAAA,GAAE,iBAChB,QAAC,IAAS,YACR,QAAC,KAAU,CAAC+B,KAAK,OAAM,UACpBpB,EAAAA,EAAAA,IACC,sFACA,CACEqB,MAAM,QAAC,IAAI,CAACd,GAAK,aAAYvB,cAAkBC,iBAIrD,QAAC,IAAK,CAACqC,QAAQ,EAAOC,0BAAwB,YAC5C,QAAC,KAAa,UAAEZ,EAAehB,YAKzC,CAnBwBwB,EAAS,uB","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport ReportUri from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nexport default class ProjectSecurityHeaders extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri keyList={keyList} projectId={params.projectId} orgId={params.orgId} />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <table className=\"table\" style={{marginBottom: 0}}>\n              <tbody>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_environment</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The environment name (e.g. production)')}.\n                  </td>\n                </tr>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_release</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The version of the application.')}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n","import Field from 'sentry/components/forms/field';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ProjectSecurityHeaders","getEndpoints","orgId","projectId","props","params","routeTitleGen","t","getReports","name","url","recreateRoute","renderBody","keyList","state","withPadding","style","marginBottom","tct","key_param","className","padding","map","ReportItem","HeaderName","to","priority","PanelItem","DEFAULT_ENDPOINT","getSecurityDsn","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","type","link","inline","flexibleControlStateSize"],"sourceRoot":""}