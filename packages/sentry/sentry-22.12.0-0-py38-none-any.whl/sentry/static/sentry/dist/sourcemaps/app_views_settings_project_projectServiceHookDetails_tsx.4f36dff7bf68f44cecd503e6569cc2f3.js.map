{"version":3,"file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import {useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction MultipleCheckbox({choices, value, disabled, onChange}: Props) {\n  const handleChange = useCallback(\n    (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n      let newValue: SelectedValue = [];\n\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      if (e.target.checked) {\n        newValue = value ? [...value, selectedValue] : [value];\n      } else {\n        newValue = value.filter(v => v !== selectedValue);\n      }\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  return (\n    <MultipleCheckboxWrapper>\n      {choices.map(([choiceValue, choiceLabel]) => (\n        <LabelContainer key={choiceValue}>\n          <Label>\n            <input\n              type=\"checkbox\"\n              value={choiceValue}\n              onChange={e => handleChange(choiceValue, e)}\n              disabled={disabled}\n              checked={defined(value) && value.indexOf(choiceValue) !== -1}\n            />\n            <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n          </Label>\n        </LabelContainer>\n      ))}\n    </MultipleCheckboxWrapper>\n  );\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport Field from 'sentry/components/forms/field';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t} from 'sentry/locale';\nimport {ServiceHook} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {hookId: string; orgId: string; projectId: string};\n\ntype StatsProps = {\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {total: number; ts: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = RouteComponentProps<Params, {}>;\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {orgId, projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={this.props.params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" showIcon>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <Field\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </Field>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport BooleanField from 'sentry/components/forms/fields/booleanField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Choices, ServiceHook} from 'sentry/types';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  orgId: string;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","choices","value","disabled","onChange","handleChange","useCallback","selectedValue","e","newValue","target","checked","filter","v","map","choiceValue","choiceLabel","LabelContainer","type","defined","indexOf","p","theme","breakpoints","small","medium","large","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","HookStats","getEndpoints","until","Math","floor","Date","getTime","since","hookId","orgId","projectId","props","params","query","resolution","renderBody","stats","state","emptyStats","series","seriesName","t","data","total","name","ts","withPadding","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","addLoadingMessage","api","request","method","success","clearIndicators","browserHistory","error","addErrorMessage","hook","Fragment","initialData","isActive","status","showIcon","label","flexibleControlStateSize","inline","help","getDynamicText","secret","fixed","priority","onClick","onDelete","EVENT_CHOICES","ServiceHookSettingsForm","Component","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","required"],"sourceRoot":""}