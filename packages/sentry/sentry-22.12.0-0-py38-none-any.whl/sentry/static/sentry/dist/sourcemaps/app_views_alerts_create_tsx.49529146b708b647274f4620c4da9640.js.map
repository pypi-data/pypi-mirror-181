{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mgCAgCA,SAASA,EAAkBC,GAmBzB,MAAM,QAACC,EAAO,UAAEC,EAAS,eAAEC,EAAc,UAAEC,EAAS,YAAEC,KAAgBC,GACpEN,EACIO,EAAcL,GAChBM,EAAAA,EAAAA,IAAwBN,GACxBC,GACAM,EAAAA,EAAAA,IAA6BN,IAC7BO,EAAAA,EAAAA,MAEEC,EAAiB,IAAIC,IAAIX,EAAQY,MAAMC,KAAI,QAAC,GAACC,GAAG,SAAKA,CAAE,KACvDC,EAAiBX,EAAYY,MAAKF,GAAMJ,EAAeO,IAAIH,MAAQ,KAGzE,OAFAR,EAAYY,MAAQH,GAAmB,QAAOA,KAG5C,QAAC,IAAQ,CACPI,gBAhCJ,SAA6BC,GAC3B,MAAM,OAACC,EAAM,QAAErB,GAAWD,GACpB,MAACuB,GAASvB,EAAMwB,OAChBC,EAAkCJ,EACnCA,EAAKN,QACNW,EAEJC,EAAAA,GAAAA,eAAsB,CAACC,KAAM,kBAC7BN,EAAOO,KACLJ,EACI,CAACK,SAAW,kBAAiBP,0BAA8BE,MAC3D,CACEK,SAAW,kBAAiBP,kBAC5BQ,MAAO,CAAC9B,QAASA,EAAQc,KAGnC,EAiBIiB,KAAM,IAAIzB,EAAa0B,SAAU,CAAChC,EAAQiC,OAC1C9B,UAAWA,EACXH,QAASA,EACTI,YAAaA,EACbH,UAAWA,KACPI,GAGV,CA1CSP,EAAiB,gCA4C1B,U,oFCrCA,MAAMoC,UAA6BC,EAAAA,EAAwB,sEAelCf,IACrB,MAAM,OACJC,EAAM,QACNrB,EACAuB,QAAQ,MAACD,IACPc,KAAKrC,MACHyB,EAAkCJ,EACnCA,EAAKN,QACNW,EAEJJ,EAAOO,KACLJ,EACI,CAACK,SAAW,kBAAiBP,0BAA8BE,MAC3D,CACEK,SAAW,kBAAiBP,kBAC5BQ,MAAO,CAAC9B,QAASA,EAAQc,KAEhC,GACF,CAhCDuB,eACE,MACEd,QAAQ,MAACD,GACTgB,UAAU,MAACR,IACTM,KAAKrC,MAET,MAAO,CACL,CACE,sBACC,kBAAiBuB,iBAAqBQ,EAAMS,oBAGnD,CAsBAC,aACE,MAAM,QAACxC,EAAO,UAAEG,EAAS,YAAEC,KAAgBC,GAAc+B,KAAKrC,OACxD,oBAAC0C,GAAuBL,KAAKM,MAEnC,OAAKD,GAKH,QAAC,KAAW,WACV,QAAC,IAAQ,CACPtB,gBAAiBiB,KAAKO,oBACtBZ,KACE,IACKa,IAAKH,EAAqBI,EAAAA,IAC7BC,SAAUL,EAAoBK,SAASjC,KAAIkC,IAAW,IACjDH,IAAKG,EAASC,EAAAA,IACjBC,QAASF,EAAQE,QAAQpC,KAAIqC,IAAU,CACrCC,eAAgB,KAChBC,mBAAe3B,EACf4B,QAAS,KACTC,iBAAa7B,EACb8B,WAAWC,EAAAA,EAAAA,KACXC,oBAAoB,IAAIC,MAAOC,iBAC5Bf,IAAKM,EAAQU,EAAAA,YAGpBjC,KAAMc,EAAoBd,KAAO,SAGrCxB,UAAWA,EACXH,QAASA,EACTI,YAAaA,EACbyD,iBAAe,KACXxD,MA7BD+B,KAAK0B,eAiChB,EAGF,U,gICrEA,MAAMC,UAAeC,EAAAA,UAAwB,uDACnC5B,KAAK6B,oBAAiB,yBAyClBT,EAAAA,EAAAA,KAAU,CAvCtBS,kBACE,MAAM,aAACC,EAAY,SAAE5B,EAAQ,QAAEtC,EAAO,OAAEuB,EAAM,OAAEF,GAAUe,KAAKrC,OACzD,UAACoE,EAAS,QAAEC,EAAO,WAAEC,EAAU,oBAAEC,GAAuBhC,GAAUR,OAAS,CAAC,EAC5EyC,EAAYhD,EAAOgD,WAAaC,EAAAA,GAAAA,OAmBtC,OAfED,IAAcC,EAAAA,GAAAA,QACZL,GAAaC,GAAWC,GACzBC,GAEDjD,EAAOoD,QAAQ,IACVnC,EACHT,SAAW,kBAAiBqC,EAAajC,mBAAmBsC,IAC5DzC,MAAO,IACFQ,EAASR,SACT4C,EAAAA,GACH1E,QAASA,EAAQiC,QAKhB,CAACsC,YACV,CAEAI,oBACE,MAAM,QAAC3E,GAAWoC,KAAKrC,MAEvBqC,KAAKrC,MAAM6E,wBAAwB,CACjCC,WAAY7E,EAAQc,GACpBgE,WAAY1C,KAAKjC,UACjB4E,WAAY3C,KAAKM,MAAM6B,UACvBS,eAAgB5C,KAAKyB,gBAAkB,OAAS,QAChDoB,UAAW,SAEb7C,KAAKrC,MAAMmF,cAAc,wBAAyB,yBACpD,CAKIrB,sBACF,MAAM,SAACvB,GAAYF,KAAKrC,MAExB,MADoE,SAAxCuC,GAAUR,MAAMwC,qBACdhC,GAAUR,MAAMS,eAChD,CAEA4C,SACE,MAAM,gBAACC,EAAe,aAAElB,EAAY,QAAElE,EAAO,SAAEsC,EAAQ,OAAE+C,EAAM,QAAEC,GAC/DlD,KAAKrC,OACD,UAACwE,GAAanC,KAAKM,OACnB,UAACyB,EAAS,QAAEC,EAAO,WAAEC,EAAU,iBAAEkB,EAAgB,mBAAEC,GACvDlD,GAAUR,OAAS,CAAC,EAChB5B,EAAqC,CACzCiE,UAAWA,GAAaO,EAAAA,GAAAA,UACxBN,QAASA,GAAWM,EAAAA,GAAAA,QACpBL,WAAYA,GAAcK,EAAAA,GAAAA,YAEtBzE,EAAYuF,EAAqBC,EAAAA,GAAAA,aAAuBnD,QAAYb,EAE1E,IAAIiE,EACAH,GAAoBhB,IAAcC,EAAAA,GAAAA,SACpCkB,EAAkBxF,GACdyF,EAAAA,EAAAA,GAAiCzF,GACjC,UAGN,MAAM0F,GAAQC,EAAAA,EAAAA,GAAE,kBAEhB,OACE,QAAC,EAAAC,SAAQ,YACP,QAAC,IAAmB,CAACF,MAAOA,EAAOG,YAAa/F,EAAQiC,QAExD,QAAC,KAAa,WACZ,QAAC+D,EAAmB,YAClB,QAAC,IAAkB,CACjB9B,aAAcA,EACd+B,WAAWJ,EAAAA,EAAAA,GAAE,kBACbD,MAAOF,GAAkBG,EAAAA,EAAAA,GAAE,gBAAkBD,EAC7CG,YAAa/F,EAAQiC,KACrBsC,UAAWA,EACXc,OAAQA,EACR/C,SAAUA,EACV4D,kBAAgB,KAElB,QAAC,KAAY,UACVR,EACI,IAAEG,EAAAA,EAAAA,GAAE,yBAAyBM,EAAAA,GAAsBT,KACpDE,UAIV,QAACQ,EAAI,WACH,QAAC,IAAK,CAACC,kBAAgB,WACpB,QAAC,MAACzF,EAAK,gBAAE0F,GAAgB,SACxBA,GACE,QAAC,EAAAR,SAAQ,aACJV,GAAmBb,IAAcC,EAAAA,GAAAA,SAClC,QAAC,IAAe,IACVpC,KAAKrC,MACTC,QAASA,EACTI,YAAaQ,EAAMC,KAAI,QAAC,GAACC,GAAG,SAAKA,CAAE,IACnCwE,QAASA,IAIZF,GACCb,IAAcC,EAAAA,GAAAA,SACbpC,KAAKyB,iBACJ,QAAC,EAAoB,IACfzB,KAAKrC,MACTE,UAAWA,EACXC,eAAgBA,EAChBC,UAAWiC,KAAKjC,UAChBH,QAASA,EACTI,YAAaQ,EAAMC,KAAI,QAAC,GAACC,GAAG,SAAKA,CAAE,OAGrC,QAAC,EAAiB,IACZsB,KAAKrC,MACTE,UAAWA,EACXC,eAAgBA,EAChBC,UAAWiC,KAAKjC,UAChBH,QAASA,EACTI,YAAaQ,EAAMC,KAAI,QAAC,GAACC,GAAG,SAAKA,CAAE,WAK3C,QAAC,IAAgB,GAClB,QAMb,EA3IIiD,EAAM,qBA8IZ,MAAMiC,GAAsB,OAAOO,EAAAA,GAAoB,oBAA3B,CAA4B,4CAIlDH,GAAO,OAAOG,EAAAA,GAAW,oBAAlB,CAAmB,kEAOTC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,uDAKrD,GAAeC,EAAAA,EAAAA,GAAmB7C,E","sources":["webpack:///./app/views/alerts/rules/metric/create.tsx","webpack:///./app/views/alerts/rules/metric/duplicate.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction MetricRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {router, project} = props;\n    const {orgId} = props.params;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      eventView={eventView}\n      {...otherProps}\n    />\n  );\n}\n\nexport default MetricRulesCreate;\n","import {RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport {\n  DuplicateActionFields,\n  DuplicateMetricFields,\n  DuplicateTriggerFields,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  eventView?: EventView;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  duplicateTargetRule?: MetricRule;\n} & AsyncView['state'];\n\n/**\n * Show metric rules form with values from an existing rule. Redirects to alerts list after creation.\n */\n\nclass MetricRulesDuplicate extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      params: {orgId},\n      location: {query},\n    } = this.props;\n\n    return [\n      [\n        'duplicateTargetRule',\n        `/organizations/${orgId}/alert-rules/${query.duplicateRuleId}/`,\n      ],\n    ];\n  }\n\n  handleSubmitSuccess = (data: any) => {\n    const {\n      router,\n      project,\n      params: {orgId},\n    } = this.props;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  };\n\n  renderBody() {\n    const {project, sessionId, userTeamIds, ...otherProps} = this.props;\n    const {duplicateTargetRule} = this.state;\n\n    if (!duplicateTargetRule) {\n      return this.renderLoading();\n    }\n\n    return (\n      <Layout.Main>\n        <RuleForm\n          onSubmitSuccess={this.handleSubmitSuccess}\n          rule={\n            {\n              ...pick(duplicateTargetRule, DuplicateMetricFields),\n              triggers: duplicateTargetRule.triggers.map(trigger => ({\n                ...pick(trigger, DuplicateTriggerFields),\n                actions: trigger.actions.map(action => ({\n                  inputChannelId: null,\n                  integrationId: undefined,\n                  options: null,\n                  sentryAppId: undefined,\n                  unsavedId: uniqueId(),\n                  unsavedDateCreated: new Date().toISOString(),\n                  ...pick(action, DuplicateActionFields),\n                })),\n              })),\n              name: duplicateTargetRule.name + ' copy',\n            } as MetricRule\n          }\n          sessionId={sessionId}\n          project={project}\n          userTeamIds={userTeamIds}\n          isDuplicateRule\n          {...otherProps}\n        />\n      </Layout.Main>\n    );\n  }\n}\n\nexport default MetricRulesDuplicate;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Member, Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueRuleEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesCreate from 'sentry/views/alerts/rules/metric/create';\nimport MetricRulesDuplicate from 'sentry/views/alerts/rules/metric/duplicate';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  DEFAULT_WIZARD_TEMPLATE,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  alertType?: AlertRuleType;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> &\n  WithRouteAnalyticsProps & {\n    hasMetricAlerts: boolean;\n    members: Member[] | undefined;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = {\n  alertType: AlertRuleType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project, params, router} = this.props;\n    const {aggregate, dataset, eventTypes, createFromDuplicate} = location?.query ?? {};\n    const alertType = params.alertType || AlertRuleType.METRIC;\n\n    // TODO(taylangocmen): Remove redirect with aggregate && dataset && eventTypes, init from template\n    if (\n      alertType === AlertRuleType.METRIC &&\n      !(aggregate && dataset && eventTypes) &&\n      !createFromDuplicate\n    ) {\n      router.replace({\n        ...location,\n        pathname: `/organizations/${organization.slug}/alerts/new/${alertType}`,\n        query: {\n          ...location.query,\n          ...DEFAULT_WIZARD_TEMPLATE,\n          project: project.slug,\n        },\n      });\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {project} = this.props;\n\n    this.props.setRouteAnalyticsParams({\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n      duplicate_rule: this.isDuplicateRule ? 'true' : 'false',\n      wizard_v3: 'true',\n    });\n    this.props.setEventNames('new_alert_rule.viewed', 'New Alert Rule: Viewed');\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  get isDuplicateRule(): boolean {\n    const {location} = this.props;\n    const createFromDuplicate = location?.query.createFromDuplicate === 'true';\n    return createFromDuplicate && location?.query.duplicateRuleId;\n  }\n\n  render() {\n    const {hasMetricAlerts, organization, project, location, routes, members} =\n      this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {\n      aggregate: aggregate ?? DEFAULT_WIZARD_TEMPLATE.aggregate,\n      dataset: dataset ?? DEFAULT_WIZARD_TEMPLATE.dataset,\n      eventTypes: eventTypes ?? DEFAULT_WIZARD_TEMPLATE.eventTypes,\n    };\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === AlertRuleType.METRIC) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={project.slug} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={project.slug}\n              alertType={alertType}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Body>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueRuleEditor\n                      {...this.props}\n                      project={project}\n                      userTeamIds={teams.map(({id}) => id)}\n                      members={members}\n                    />\n                  )}\n\n                  {hasMetricAlerts &&\n                    alertType === AlertRuleType.METRIC &&\n                    (this.isDuplicateRule ? (\n                      <MetricRulesDuplicate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ) : (\n                      <MetricRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ))}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst Body = styled(Layout.Body)`\n  && {\n    padding: 0;\n    gap: 0;\n  }\n  grid-template-rows: 1fr;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(100px, auto) 400px;\n  }\n`;\n\nexport default withRouteAnalytics(Create);\n"],"names":["MetricRulesCreate","props","project","eventView","wizardTemplate","sessionId","userTeamIds","otherProps","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","projectTeamIds","Set","teams","map","id","defaultOwnerId","find","has","owner","onSubmitSuccess","data","router","orgId","params","alertRuleId","undefined","metric","name","push","pathname","query","rule","projects","slug","MetricRulesDuplicate","AsyncView","this","getEndpoints","location","duplicateRuleId","renderBody","duplicateTargetRule","state","handleSubmitSuccess","pick","DuplicateMetricFields","triggers","trigger","DuplicateTriggerFields","actions","action","inputChannelId","integrationId","options","sentryAppId","unsavedId","uniqueId","unsavedDateCreated","Date","toISOString","DuplicateActionFields","isDuplicateRule","renderLoading","Create","Component","getInitialState","organization","aggregate","dataset","eventTypes","createFromDuplicate","alertType","AlertRuleType","replace","DEFAULT_WIZARD_TEMPLATE","componentDidMount","setRouteAnalyticsParams","project_id","session_id","alert_type","duplicate_rule","wizard_v3","setEventNames","render","hasMetricAlerts","routes","members","createFromWizard","createFromDiscover","EventView","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","alertName","canChangeProject","AlertWizardAlertNames","Body","provideUserTeams","initiallyLoaded","Layout","p","theme","breakpoints","large","withRouteAnalytics"],"sourceRoot":""}