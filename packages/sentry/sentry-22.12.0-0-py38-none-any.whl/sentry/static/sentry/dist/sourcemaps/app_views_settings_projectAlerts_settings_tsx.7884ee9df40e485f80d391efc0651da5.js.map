{"version":3,"file":"chunks/app_views_settings_projectAlerts_settings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","import {Field} from 'sentry/components/forms/types';\nimport {t, tn} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport {fields} from 'sentry/data/forms/projectAlerts';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {orgId: string; projectId: string};\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = AsyncView['state'] & {\n  pluginList: Array<Plugin> | null;\n  project: Project | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n  getProjectEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n    const projectEndpoint = this.getProjectEndpoint(params);\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${orgId}/${projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization, params} = this.props;\n    const {orgId} = params;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint(params);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${orgId}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"sm\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","InactivePlugins","plugins","onEnablePlugin","length","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","shortName","name","space","p","theme","fontSizeSmall","borderRadius","PluginIcon","PluginList","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","route","formatMinutes","value","Number","tn","fields","subjectTemplate","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","title","renderComponent","PermissionAlert","Settings","setState","prevState","getDefaultState","super","getProjectEndpoint","getEndpoints","params","routeTitleGen","renderBody","canEditRule","state","projectEndpoint","Fragment","action","to","pathname","query","size","icon","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","disabled","renderHeader","hasConfiguration","handleEnablePlugin"],"sourceRoot":""}