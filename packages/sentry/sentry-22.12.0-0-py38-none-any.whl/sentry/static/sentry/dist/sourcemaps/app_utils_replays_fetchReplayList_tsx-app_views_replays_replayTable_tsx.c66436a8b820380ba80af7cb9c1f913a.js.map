{"version":3,"file":"chunks/app_utils_replays_fetchReplayList_tsx-app_views_replays_replayTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/views/replays/replayTable.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\nimport type {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-startedAt';\n\nexport const REPLAY_LIST_FIELDS = [\n  'activity',\n  'countErrors',\n  'duration',\n  'finishedAt',\n  'id',\n  'projectId',\n  'startedAt',\n  'urls',\n  'user',\n];\n\ntype State = {\n  fetchError: undefined | RequestError;\n  isFetching: boolean;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n}: Props): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const [{data}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...eventView.getEventsAPIPayload(location),\n        cursor: location.query.cursor,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      isFetching: false,\n      pageLinks,\n      replays: data.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    if (error.responseJSON?.detail) {\n      return {\n        fetchError: error.responseJSON.detail,\n        isFetching: false,\n        pageLinks: null,\n        replays: [],\n      };\n    }\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      isFetching: false,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport {PanelTable} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport ScoreBar from 'sentry/components/scoreBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {IconArrow, IconCalendar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {spanOperationRelativeBreakdownRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction';\nimport type {ReplayListLocationQuery, ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[] | ReplayListRecordWithTx[];\n  showProjectColumn: boolean;\n  sort: Sort | undefined;\n  fetchError?: Error;\n  showSlowestTxColumn?: boolean;\n};\n\ntype TableProps = {\n  showProjectColumn: boolean;\n  showSlowestTxColumn: boolean;\n};\n\ntype RowProps = {\n  minWidthIsSmall: boolean;\n  organization: Organization;\n  referrer: string;\n  replay: ReplayListRecord | ReplayListRecordWithTx;\n  showProjectColumn: boolean;\n  showSlowestTxColumn: boolean;\n};\n\nfunction SortableHeader({\n  fieldName,\n  label,\n  sort,\n  tooltip,\n}: {\n  fieldName: string;\n  label: string;\n  sort: Props['sort'];\n  tooltip?: string;\n}) {\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const arrowDirection = sort?.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Header>\n      <SortLink\n        role=\"columnheader\"\n        aria-sort={\n          sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'asc'\n              ? 'ascending'\n              : 'descending'\n            : 'none'\n        }\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            sort: sort?.field.endsWith(fieldName)\n              ? sort?.kind === 'desc'\n                ? fieldName\n                : '-' + fieldName\n              : '-' + fieldName,\n          },\n        }}\n      >\n        {label} {sort?.field === fieldName && sortArrow}\n      </SortLink>\n      {tooltip ? (\n        <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n      ) : null}\n    </Header>\n  );\n}\n\nfunction ReplayTable({\n  isFetching,\n  replays,\n  showProjectColumn,\n  sort,\n  fetchError,\n  showSlowestTxColumn = false,\n}: Props) {\n  const routes = useRoutes();\n  const referrer = getRouteStringFromRoutes(routes);\n\n  const organization = useOrganization();\n  const theme = useTheme();\n  const minWidthIsSmall = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const tableHeaders = [\n    t('Session'),\n    showProjectColumn && minWidthIsSmall && (\n      <SortableHeader\n        key=\"projectId\"\n        sort={sort}\n        fieldName=\"projectId\"\n        label={t('Project')}\n      />\n    ),\n    showSlowestTxColumn && minWidthIsSmall && (\n      <Header key=\"slowestTransaction\">\n        {t('Slowest Transaction')}\n        <StyledQuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            'Slowest single instance of this transaction captured by this session.'\n          )}\n        />\n      </Header>\n    ),\n    minWidthIsSmall && (\n      <SortableHeader\n        key=\"startedAt\"\n        sort={sort}\n        fieldName=\"startedAt\"\n        label={t('Start Time')}\n      />\n    ),\n    <SortableHeader\n      key=\"duration\"\n      sort={sort}\n      fieldName=\"duration\"\n      label={t('Duration')}\n    />,\n    <SortableHeader\n      key=\"countErrors\"\n      sort={sort}\n      fieldName=\"countErrors\"\n      label={t('Errors')}\n    />,\n    <SortableHeader\n      key=\"activity\"\n      sort={sort}\n      fieldName=\"activity\"\n      label={t('Activity')}\n      tooltip={t(\n        'Activity represents how much user activity happened in a replay. It is determined by the number of errors encountered, duration, and UI events.'\n      )}\n    />,\n  ].filter(Boolean);\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        showProjectColumn={showProjectColumn}\n        isLoading={false}\n        showSlowestTxColumn={showSlowestTxColumn}\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {typeof fetchError === 'string'\n            ? fetchError\n            : t(\n                'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n              )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  return (\n    <StyledPanelTable\n      isLoading={isFetching}\n      isEmpty={replays?.length === 0}\n      showProjectColumn={showProjectColumn}\n      showSlowestTxColumn={showSlowestTxColumn}\n      headers={tableHeaders}\n    >\n      {replays?.map(replay => (\n        <ReplayTableRow\n          key={replay.id}\n          minWidthIsSmall={minWidthIsSmall}\n          organization={organization}\n          referrer={referrer}\n          replay={replay}\n          showProjectColumn={showProjectColumn}\n          showSlowestTxColumn={showSlowestTxColumn}\n        />\n      ))}\n    </StyledPanelTable>\n  );\n}\n\nfunction ReplayTableRow({\n  minWidthIsSmall,\n  organization,\n  referrer,\n  replay,\n  showProjectColumn,\n  showSlowestTxColumn,\n}: RowProps) {\n  const location = useLocation();\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.projectId);\n  const hasTxEvent = 'txEvent' in replay;\n  const txDuration = hasTxEvent ? replay.txEvent?.['transaction.duration'] : undefined;\n  const scoreBarPalette = new Array(10).fill([CHART_PALETTE[0][0]]);\n\n  return (\n    <Fragment>\n      <UserBadge\n        avatarSize={32}\n        displayName={\n          <Link\n            to={{\n              pathname: `/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/`,\n              query: {\n                referrer,\n              },\n            }}\n          >\n            {replay.user.displayName || ''}\n          </Link>\n        }\n        user={{\n          username: replay.user.displayName || '',\n          email: replay.user.email || '',\n          id: replay.user.id || '',\n          ip_address: replay.user.ip_address || '',\n          name: replay.user.name || '',\n        }}\n        // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n        displayEmail={<StringWalker urls={replay.urls} />}\n      />\n      {showProjectColumn && minWidthIsSmall && (\n        <Item>{project ? <ProjectBadge project={project} avatarSize={16} /> : null}</Item>\n      )}\n      {minWidthIsSmall && showSlowestTxColumn && (\n        <Item>\n          {hasTxEvent ? (\n            <SpanOperationBreakdown>\n              {txDuration ? <TxDuration>{txDuration}ms</TxDuration> : null}\n              {spanOperationRelativeBreakdownRenderer(\n                replay.txEvent,\n                {\n                  organization,\n                  location,\n                },\n                {\n                  enableOnClick: false,\n                }\n              )}\n            </SpanOperationBreakdown>\n          ) : null}\n        </Item>\n      )}\n      {minWidthIsSmall && (\n        <Item>\n          <TimeSinceWrapper>\n            {minWidthIsSmall && <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />}\n            <TimeSince date={replay.startedAt} />\n          </TimeSinceWrapper>\n        </Item>\n      )}\n      <Item>\n        <Duration seconds={replay.duration.asSeconds()} exact abbreviation />\n      </Item>\n      <Item data-test-id=\"replay-table-count-errors\">{replay.countErrors || 0}</Item>\n      <Item>\n        <ScoreBar\n          size={20}\n          score={replay?.activity ?? 1}\n          palette={scoreBarPalette}\n          radius={0}\n        />\n      </Item>\n    </Fragment>\n  );\n}\n\nfunction getColCount(props: TableProps) {\n  let colCount = 4;\n  if (props.showSlowestTxColumn) {\n    colCount += 1;\n  }\n  if (props.showProjectColumn) {\n    colCount += 1;\n  }\n  return colCount;\n}\n\nconst StyledPanelTable = styled(PanelTable)<TableProps>`\n  ${p => `grid-template-columns: minmax(0, 1fr) repeat(${getColCount(p)}, max-content);`}\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr) repeat(3, min-content);\n  }\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst SpanOperationBreakdown = styled('div')`\n  width: 100%;\n  text-align: right;\n`;\n\nconst TxDuration = styled('div')`\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.5)};\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-radius: 0;\n  border-width: 1px 0 0 0;\n  grid-column: 1/-1;\n  margin-bottom: 0;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  align-items: center;\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  margin-left: ${space(0.5)};\n`;\n\nexport default ReplayTable;\n"],"names":["DEFAULT_SORT","REPLAY_LIST_FIELDS","async","api","organization","location","eventView","path","slug","data","_textStatus","resp","requestPromise","includeAllArgs","query","getEventsAPIPayload","cursor","fetchError","undefined","isFetching","pageLinks","getResponseHeader","replays","map","mapResponseToReplayRecord","error","responseJSON","detail","Sentry","SortableHeader","fieldName","label","sort","tooltip","useLocation","arrowDirection","kind","sortArrow","color","size","direction","Header","SortLink","role","field","endsWith","to","pathname","StyledQuestionTooltip","position","title","ReplayTable","showProjectColumn","showSlowestTxColumn","routes","useRoutes","referrer","getRouteStringFromRoutes","useOrganization","theme","useTheme","minWidthIsSmall","useMedia","breakpoints","small","tableHeaders","t","filter","Boolean","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","isEmpty","length","replay","ReplayTableRow","id","projects","useProjects","project","find","p","projectId","hasTxEvent","txDuration","txEvent","scoreBarPalette","Array","fill","CHART_PALETTE","Fragment","avatarSize","displayName","user","username","email","ip_address","name","displayEmail","urls","Item","SpanOperationBreakdown","TxDuration","spanOperationRelativeBreakdownRenderer","enableOnClick","TimeSinceWrapper","StyledIconCalendarWrapper","date","startedAt","seconds","duration","asSeconds","exact","abbreviation","countErrors","score","activity","palette","radius","PanelTable","props","colCount","getColCount","Link","gray500","fontSizeMedium","space","IconCalendar","Alert","QuestionTooltip"],"sourceRoot":""}