{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_views_performance_landing_vitalsCards_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import {useEffect, useMemo, useRef} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Transaction} from '@sentry/types';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboardsV2/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n  const collectedTransactionFromGetTagsListRef = useRef<boolean>(false);\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    // We will only collect a transaction once and only if the number of tags > 0\n    // This is to avoid a large number of transactions being sent to Sentry. The 0 check\n    // is to avoid collecting a transaction when tags are not loaded yet.\n    let transaction: Transaction | undefined = undefined;\n    if (!collectedTransactionFromGetTagsListRef.current && Object.keys(tags).length > 0) {\n      transaction = Sentry.startTransaction({\n        name: 'SearchBar.getTagList',\n      });\n      // Mark as collected - if code below errors, we risk never collecting\n      // a transaction in that case, but that is fine.\n      collectedTransactionFromGetTagsListRef.current = true;\n    }\n\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n\n    if (transaction) {\n      const totalCount: number = Object.keys(list).length;\n      transaction.setTag('tags.totalCount', totalCount);\n      const countGroup = [\n        1, 5, 10, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 10000,\n      ].find(n => totalCount <= n);\n      transaction.setTag('tags.totalCount.grouped', `<=${countGroup}`);\n      transaction.finish();\n    }\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={['environment']}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {WebVital} from 'sentry/utils/fields';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\n\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  good: number;\n  meh: number;\n  p75: number | null;\n  poor: number;\n  total: number;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default VitalsCardsDiscoverQuery;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Sparklines} from 'react-sparklines';\nimport * as PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import {ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  color: Color | string;\n  percent: number;\n  renderBarStatus?: (barStatus: ReactNode, key: string) => ReactNode;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        const barStatus = <BarStatus color={colorStop.color} key={colorStop.color} />;\n\n        return colorStop.renderBarStatus?.(barStatus, colorStop.color) ?? barStatus;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color | string;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color] ?? p.color};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\ntype Props = {\n  percents: Percent[];\n  vital: WebVital | WebVital[];\n  hideTooltips?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('(>[threshold][unit])', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('(>[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('(<=[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => (\n        <VitalStatus data-test-id=\"vital-status\" key={pct.vitalState}>\n          {vitalStateIcons[pct.vitalState]}\n          {props.showVitalPercentNames && pct.vitalState}{' '}\n          {formatPercentage(pct.percent, 0)}\n          {props.showVitalThresholds && getVitalStateText(props.vital, pct.vitalState)}\n        </VitalStatus>\n      ))}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Sparklines from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport toArray from 'sentry/utils/toArray';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias] as number;\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  height: number;\n  width: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  data: VitalsData | null;\n  isLoading: boolean;\n  vital: WebVital | WebVital[];\n  barHeight?: number;\n  showBar?: boolean;\n  showDetail?: boolean;\n  showDurationDetail?: boolean;\n  showStates?: boolean;\n  showTooltip?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n  value?: string;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = true,\n    showVitalThresholds = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = toArray(vital);\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames={false}\n              showVitalThresholds={false}\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div>\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n            showVitalThresholds={showVitalThresholds}\n          />\n        </BarDetail>\n      )}\n    </Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  chart: React.ReactNode;\n  title: string;\n  tooltip: string;\n  value: string | number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n  minHeight?: number;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{title}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","collectedTransactionFromGetTagsListRef","useRef","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","getFunctionTags","tagsWithKind","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","defined","Error","getTagList","measurements","transaction","current","Sentry","measurementsWithKind","getMeasurementTags","combinedTags","features","includes","assign","FieldKey","values","sort","a","b","toLowerCase","localeCompare","predefined","list","totalCount","setTag","countGroup","find","n","finish","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","withTags","getRequestPayload","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","route","tableData","rest","children","vitalsData","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","SparklinesWithCustomPropTypes","Sparklines","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","percent","colorStop","barStatus","BarStatus","color","renderBarStatus","p","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","Array","isArray","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","showVitalThresholds","fontSizeMedium","GenericCards","baseEventView","functions","withColumns","globalSelection","getPageFilters","start","datetime","getUtcToLocalDateObject","end","interval","sparkInterval","getInterval","period","referrer","isLoading","isSummaryLoading","project","projects","environment","environments","team","includePrevious","yAxis","getFields","partial","series","allSeries","oneSeries","seriesName","value","details","vitalCardDetails","VitalsContainer","func","fieldName","generateFieldAsString","cardDetail","title","tooltip","formatter","alias","getAggregateAlias","rawValue","chart","SparklineChart","VitalCard","horizontal","minHeight","isNotInteractive","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","small","large","showBar","showStates","showDurationDetail","showDetail","showTooltip","emptyState","EmptyVitalBar","counts","poor","meh","good","total","toArray","forEach","vitalName","c","countKey","p75","toFixed","getP75","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","vitalStateColors","getColorStopsFromPercents","Fragment","StyledTooltip","hideTooltips","disabled","position","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","CardContent","CardValue","Card","textColor","Tooltip","overflowEllipsis"],"sourceRoot":""}