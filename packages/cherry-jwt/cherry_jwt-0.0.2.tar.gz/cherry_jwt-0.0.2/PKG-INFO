Metadata-Version: 2.1
Name: cherry_jwt
Version: 0.0.2
Summary: Python JWT implementation
Author: Addison Cox
License: Copyright 2022 Addison Cox
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# Cherry JWT
**Warning**
<br/>
An simple implementation of JWT for educational purposes.
<br/>
Please do not use this in a real application.

# Installation
``pip install cryptography starkbank-ecdsa cherry_jwt``

# Usage

## Creating a JWT with HS256 (mac)
``` python
from cherry_jwt.jwt import JWT

jwt = JWT(
    claims={
        'message': 'hello world'
    }, 
    algorithm='HS256', 
    secret='secret'
).encode()
```

## Verifying a JWT with HS256
``` python
from cherry_jwt.verifier import JWTVerifier
from cherry_jwt.exceptions import JWTVerificationException

jwt_verifier = JWTVerifier(algorithm='HS256', key='secret', claims_validator={
    'message': 'hello world'
})

try:
    jwt_verifier.verify(jwt)
except JWTVerificationException as e:
    #handle rejection
    print(e)
```

## Creating a JWT with ECDSA

``` python
from cherry_jwt.jwt import JWT

 #can accept key as PEM or DER
private_key_pem = get_private_key_pem()
jwt = JWT(
    claims={
        'message': 'hello world'
    }, 
    algorithm='ECDSA', 
    secret=private_key_pem,
    format='PEM'
).encode()
```

## Verifying a JWT with ECDSA

``` python
from cherry_jwt.verifier import JWTVerifier
from cherry_jwt.exceptions import JWTVerificationException

jwt_verifier = JWTVerifier(
    algorithm='ECDSA', 
    key=public_key_pem, 
    claims_validator={
        'message': 'hello world'
    }),
    format='PEM'

try:
    jwt_verifier.verify(jwt)
except JWTVerificationException as e:
    #handle rejection
    print(e)
```

## Set header
```python
jwt = JWT(
    claims={
        'message': 'hello world'
    }, 
    algorithm='HS256', 
    secret='secret'
).set_header_val('FOO', 'BAR').encode()
```

## Convenience methods for common claims
```python
jwt_verifier = JWTVerifier(algorithm='HS256', key='secret', claims_validator={
    'message': 'hello world'
}).check_aud_is('xxx').check_iss_is('yyy').check_sub_is('zzz')
```


