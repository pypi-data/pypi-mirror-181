[tool.poetry]
name = "torch-conduit"
version = "0.1.7"
description = "Lightweight framework for dataloading with PyTorch and channeling the power of PyTorch Lightning"
authors = ["PAL <info@predictive-analytics-lab.com>"]
license = "Apache License 2.0"
packages = [
  { include = "conduit" },
]
include=["conduit/py.typed"]
classifiers=[
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
keywords=["typing", "python", "pytorch", "datasets", "pytorch-lightning", "lightning-bolts"]
repository="https://github.com/wearepal/conduit"
readme="README.md"

[tool.poetry.dependencies]
attrs = "^21.2.0"
numpy = "^1.22.3"
pandas = "^1.3.3"
python = ">=3.8.0,<3.11"
ranzen = {version = ">=2.0.0", extras = ["hydra"]}
scikit-learn = "^1.2.0"
typing-extensions = ">=4.0.0"

[tool.poetry.group.torch.dependencies]
pytorch-lightning = "^1.5.0"
torch = ">=1.12.0"
torchaudio = ">=0.12.0"
torchvision = ">=0.10.1"

[tool.poetry.group.download.dependencies]
gdown = "^3.13.0"
kaggle = "^1.5.12"

[tool.poetry.group.image.dependencies]
albumentations = "^1.0.0"
opencv-python = "^4.5.3"

[tool.poetry.group.audio.dependencies]
soundfile = {version = "*", markers = "platform_system == 'Windows'"}
sox = {version = "*", markers = "platform_system == 'Linux' or platform_system == 'macOS'"}

[tool.poetry.group.hydra.dependencies]
hydra-core = "^1.1.1"

[tool.poetry.group.logging.dependencies]
rich = "^12.5.1"

[tool.poetry.group.fair]
optional = true

[tool.poetry.group.fair.dependencies]
ethicml = ">=1.0.2"

[tool.poetry.group.dev.dependencies]
black = "*"
darglint = "^1.8.0"
isort = "*"
mypy = "*"
neoconfigen = {version = ">=2.3.3"}
pre-commit = "*"
pydocstyle = "*"
pylint = "^2.11.1"
pytest = "*"
python-type-stubs = {git = "https://github.com/predictive-analytics-lab/python-type-stubs.git", branch = "main" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py38']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | conduit/hydra
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''
[tool.isort]
known_third_party = ["PIL", "albumentations", "attr", "cv2", "ethicml", "hydra", "numpy", "omegaconf", "pandas", "pytest", "pytorch_lightning", "ranzen", "requests", "rich", "sklearn", "torch", "torchaudio", "torchmetrics", "torchvision", "tqdm", "typing_extensions"]
known_future_library = []
extra_standard_library = ["dataclasses", "__future__", "typing_extensions"]
line_length = 88
profile = "black"
force_sort_within_sections = "True"
classes = ["MISSING"]

[tool.pyright]
include = ["conduit"]
exclude = ["**/node_modules", "**/__pycache__"]
typeCheckingMode = "basic"
pythonVersion = "3.8"
reportUnusedImport = "error"
reportDuplicateImport  = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUntypedNamedTuple = "error"
reportConstantRedefinition = "warning"
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
strictListInference = true
strictSetInference = true
strictParameterNoneValue = true

[tool.mypy]
python_version = "3.8"
no_implicit_optional = true
allow_redefinition = true
strict_equality = true
check_untyped_defs = true
warn_unreachable = true
disallow_any_unimported = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
warn_unused_ignores = false
exclude = ["conf.py"]

[[tool.mypy.overrides]]
module = [
    "albumentations.*",
    "cv2.*",
    "ethicml.*",
    "flash.*",
    "gdown.*",
    "git.*",
    "ranzen.*",
    "pandas.*",
    "PIL.*",
    "pl_bolts.*",
    "pytest.*",
    "pytorch_lightning.*",
    "requests.*",
    "scipy.*",
    "sklearn.*",
    "torch.*",
    "torchmetrics.*",
    "torchvision.*",
    "typing_inspect.*",
    "tqdm.*",
    "wandb.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ethicml.*",
    "ranzen.*",
    "numpy.typing.*",
    "pytest.*",
    "pytorch_lightning.*",
    "torch.*",
    "torchmetrics.*"
]
follow_imports = "skip"
follow_imports_for_stubs = true
