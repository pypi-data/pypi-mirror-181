[build-system]
requires = ["setuptools>=61", "setuptools-scm"]
build-backend = "setuptools.build_meta"


[project]
name = "conan-check-updates"
version = "0.1.0"
description = "Check for updates of your conanfile.txt/conanfile.py requirements."
authors = [{ name = "Lukas Berbuer", email = "lukas.berbuer@gmail.com" }]
readme = "README.md"
license = { text = "MIT License" }
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
]
keywords = ["conan", "update", "upgrade", "package", "requirements", "node-check-updates"]
dependencies = [
    "importlib_metadata; python_version<'3.8'",
    "typing_extensions; python_version<'3.10'",
]

[project.optional-dependencies]
tests = [
    "conan>=1.0", # for e2e tests
    "coverage[toml]>=5", # pyproject.toml support
    "pytest>=6", # pyproject.toml support
    "pytest-asyncio",
]
tools = [
    "black",
    "isort",
    "mypy>=0.9", # pyproject.toml support
    "pre-commit",
    "pylint>=2.5", # pyproject.toml support
    "tox>=3.4", # pyproject.toml support
]
dev = [
    "conan-check-updates[tests,tools]", # recursive dependency since pip 21.2
]

[project.scripts]
conan-check-updates = "conan_check_updates.__main__:main"

[project.urls]
Source = "https://github.com/lukasberbuer/conan-check-updates"
Issues = "https://github.com/lukasberbuer/conan-check-updates/issues"


[tool.black]
line-length = 100


[tool.isort]
line_length = 100
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true


[tool.pylint.message_control]
good-names=[
    "e", "i", "j", "n", "r", "v", "it"
]
disable = [
    "import-error",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-many-arguments",
]

[tool.pylint.format]
max-line-length = 100


[tool.mypy]
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q" # test summary for (a)ll except passed
testpaths = ["tests"]
log_cli = true
log_cli_level = "WARNING"


[tool.coverage.run]
branch = true
source = ["conan_check_updates"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = black, isort, pylint, mypy, py37, py38, py39, py310, py311, coverage-report

[testenv:black]
skip_install = true
deps = black
commands =
    black --diff .
    black --check .

[testenv:isort]
skip_install = true
deps = isort
commands =
    isort --diff .
    isort --check-only .

[testenv:pylint]
skip_install = true
deps = pylint
commands = pylint src/

[testenv:mypy]
skip_install = true
deps = mypy>=0.9
commands =
    mypy src/

[testenv]
extras = tests
commands =
    coverage run --parallel -m pytest

[testenv:coverage-report]
skip_install = true
deps = coverage[toml]>=5
passenv = GITHUB_*
commands =
    - coverage combine
    coverage report

[testenv:coveralls]
skip_install = true
deps =
    coverage[toml]>=5
    coveralls
passenv = GITHUB_*
commands =
    - coverage combine
    coveralls --service=github
"""
