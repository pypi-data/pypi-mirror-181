Metadata-Version: 2.1
Name: Shimmy
Version: 0.2.0
Summary: API for converting popular non-gymnasium environments to a gymnasium compatible environment.
Home-page: https://github.com/Farama-Foundation/Shimmy
Author: Farama Foundation
Author-email: contact@farama.org
Keywords: Reinforcement Learning,game,RL,AI
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy (>=1.18.0)
Requires-Dist: gymnasium (>=0.27.0)
Provides-Extra: all
Requires-Dist: pettingzoo (>=1.22) ; extra == 'all'
Requires-Dist: ale-py (~=0.8.0) ; extra == 'all'
Requires-Dist: open-spiel (>=1.2) ; extra == 'all'
Requires-Dist: imageio ; extra == 'all'
Requires-Dist: dm-control (>=1.0.8) ; extra == 'all'
Requires-Dist: gym (>=0.26) ; extra == 'all'
Requires-Dist: h5py (>=3.7.0) ; extra == 'all'
Provides-Extra: atari
Requires-Dist: ale-py (~=0.8.0) ; extra == 'atari'
Provides-Extra: dm-control
Requires-Dist: dm-control (>=1.0.8) ; extra == 'dm-control'
Requires-Dist: imageio ; extra == 'dm-control'
Requires-Dist: h5py (>=3.7.0) ; extra == 'dm-control'
Provides-Extra: dm-control-multi-agent
Requires-Dist: dm-control (>=1.0.8) ; extra == 'dm-control-multi-agent'
Requires-Dist: pettingzoo (>=1.22) ; extra == 'dm-control-multi-agent'
Provides-Extra: gym
Requires-Dist: gym (>=0.26) ; extra == 'gym'
Provides-Extra: openspiel
Requires-Dist: open-spiel (>=1.2) ; extra == 'openspiel'
Requires-Dist: pettingzoo (>=1.22) ; extra == 'openspiel'
Provides-Extra: testing
Requires-Dist: pytest (==7.1.3) ; extra == 'testing'
Requires-Dist: pillow (>=9.3.0) ; extra == 'testing'
Requires-Dist: autorom[accept-rom-license] (~=0.4.2) ; extra == 'testing'

# Shimmy

An API conversion tool for popular external reinforcement learning environments to [Gymnasium](https://github.com/farama-Foundation/gymnasium) and [PettingZoo](https://github.com/farama-Foundation/pettingZoo/) APIs.

Supported APIs for Gymnasium
* OpenAI Gym
* Atari Environments
* DMControl

Supported APIs for PettingZoo
* OpenSpiel
* DmControl Multiagent Soccer
* DMLab Environments

We are open to supporting more external APIs, please create an issue or ideally, a pull request implementing the new API.

## At a glance

This is an example of using Shimmy to convert DM Control environments into a Gymnasium compatible environment:

```python
import gymnasium as gym
from shimmy.registration import DM_CONTROL_SUITE_ENVS

env_ids = [f"dm_control/{'-'.join(item)}-v0" for item in DM_CONTROL_SUITE_ENVS]
print(env_ids)

env = gym.make(env_ids[0])
env_flatten = gym.wrappers.FlattenObservation(env)
print(env_ids[0])
print("===üåé", env.observation_space)
print("===üïπÔ∏è", env.action_space)
print("---flattened üåé", env_flatten.observation_space)
print("---flattened üïπÔ∏è", env_flatten.action_space)
```
```bash
['dm_control/acrobot-swingup-v0', 'dm_control/acrobot-swingup_sparse-v0', 'dm_control/ball_in_cup-catch-v0', 'dm_control/cartpole-balance-v0', 'dm_control/cartpole-balance_sparse-v0', 'dm_control/cartpole-swingup-v0', 'dm_control/cartpole-swingup_sparse-v0', 'dm_control/cartpole-two_poles-v0', 'dm_control/cartpole-three_poles-v0', 'dm_control/cheetah-run-v0', 'dm_control/dog-stand-v0', 'dm_control/dog-walk-v0', 'dm_control/dog-trot-v0', 'dm_control/dog-run-v0', 'dm_control/dog-fetch-v0', 'dm_control/finger-spin-v0', 'dm_control/finger-turn_easy-v0', 'dm_control/finger-turn_hard-v0', 'dm_control/fish-upright-v0', 'dm_control/fish-swim-v0', 'dm_control/hopper-stand-v0', 'dm_control/hopper-hop-v0', 'dm_control/humanoid-stand-v0', 'dm_control/humanoid-walk-v0', 'dm_control/humanoid-run-v0', 'dm_control/humanoid-run_pure_state-v0', 'dm_control/humanoid_CMU-stand-v0', 'dm_control/humanoid_CMU-run-v0', 'dm_control/lqr-lqr_2_1-v0', 'dm_control/lqr-lqr_6_2-v0', 'dm_control/manipulator-bring_ball-v0', 'dm_control/manipulator-bring_peg-v0', 'dm_control/manipulator-insert_ball-v0', 'dm_control/manipulator-insert_peg-v0', 'dm_control/pendulum-swingup-v0', 'dm_control/point_mass-easy-v0', 'dm_control/point_mass-hard-v0', 'dm_control/quadruped-walk-v0', 'dm_control/quadruped-run-v0', 'dm_control/quadruped-escape-v0', 'dm_control/quadruped-fetch-v0', 'dm_control/reacher-easy-v0', 'dm_control/reacher-hard-v0', 'dm_control/stacker-stack_2-v0', 'dm_control/stacker-stack_4-v0', 'dm_control/swimmer-swimmer6-v0', 'dm_control/swimmer-swimmer15-v0', 'dm_control/walker-stand-v0', 'dm_control/walker-walk-v0', 'dm_control/walker-run-v0']
dm_control/acrobot-swingup-v0
===üåé Dict('orientations': Box(-inf, inf, (4,), float64), 'velocity': Box(-inf, inf, (2,), float64))
===üïπÔ∏è Box(-1.0, 1.0, (1,), float64)
---flattened üåé Box(-inf, inf, (6,), float64)
---flattened üïπÔ∏è Box(-1.0, 1.0, (1,), float64)
```

For most usage, we recommend applying the `gym.wrappers.FlattenObservation(env)` wrapper to reduce the `Dict` observation space to a `Box` observation space.

