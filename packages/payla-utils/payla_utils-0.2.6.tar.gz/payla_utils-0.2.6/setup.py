# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['payla_utils',
 'payla_utils.access',
 'payla_utils.logging',
 'payla_utils.management',
 'payla_utils.management.commands']

package_data = \
{'': ['*']}

install_requires = \
['Django>=4.0',
 'django-admin-interface>=0.12',
 'django-ipware>=4.0.0,<5.0.0',
 'python-json-logger>=2.0.0,<3.0.0',
 'sentry-sdk>=1.0',
 'structlog-sentry>=2.0.0,<3.0.0',
 'structlog>=22.3.0,<23.0.0']

setup_kwargs = {
    'name': 'payla-utils',
    'version': '0.2.6',
    'description': 'payla_utils python package',
    'long_description': '# payla_utils python package\n\n## Features\n\n### Structlog config\n\n#### Example, structlog configuration, django\nin django settings.py\n\n    from payla_utils.logging import LoggingConfigurator\n\n    LoggingConfigurator(\n        \'testapp\',\n        log_level=\'INFO\',\n        own_apps=settings.OWN_APPS,\n        setup_logging_dict=True,\n    ).configure_structlog(formatter=\'plain_console\')\n\n\n#### Example, structlog configuration, passing extra loggers names\nin django settings.py\n\n    from payla_utils.logging import LoggingConfigurator\n\n    LoggingConfigurator(\n        \'testapp\',\n        log_level=\'INFO\',\n        own_apps=settings.OWN_APPS,\n        setup_logging_dict=True,\n    ).configure_structlog(formatter=\'plain_console\', extra_loggers_name=[\'mylogger1\', \'mylogger2\'])\n\n\n#### If you want to use structlog in django celery\n\nin celery.py\n\n    from django.conf import settings\n    from payla_utils.logging import LoggingConfigurator\n\n    @signals.setup_logging.connect\n    def receiver_setup_logging(\n        loglevel, logfile, format, colorize, **kwargs\n    ):  # pragma: no cover\n\n        LoggingConfigurator(\n            \'testapp\',\n            log_level=\'INFO\',\n            own_apps=settings.OWN_APPS,\n            setup_logging_dict=True,\n        ).configure_structlog(formatter=\'plain_console\')\n\n#### If you want to use structlog with Sentry\n\nYou will have to set `PaylaLoggingIntegration` in sentry sdk setup\n\n```python\nsentry_sdk.init(\n    # take sentry DSN from environment or add a default value here:\n    dsn=env.str(\'SENTRY_DSN\'),\n    integrations=[DjangoIntegration(), CeleryIntegration(), PaylaLoggingIntegration()],\n    auto_session_tracking=False,\n    traces_sample_rate=0.01,\n    send_default_pii=True,\n    attach_stacktrace=True,\n    request_bodies=\'medium\',\n    release=PROJECT_VERSION,\n    environment=ENVIRONMENT,\n)\n```\n\n### If you want to use a structlog, not Django based project\n\n    from payla_utils.logging import LoggingConfigurator\n\n    LoggingConfigurator(\n        \'testapp\',\n        log_level=\'INFO\',\n        own_apps=[],\n        setup_logging_dict=True,\n    ).configure_structlog(formatter=\'plain_console\')\n\n\n#### How to use generic structured logger:\n\n    logger = structlog.get_logger(__name__)\n    logger.warning("Here is your message", key_1="value_1", key_2="value_2", key_n="value_n")\n\n\n#### Using request middleware to inject request_id and/or trace_id:\n\nThis middleware will inject reqest_id and/or trace_id to all logs producer during a request/response cycle.\n\n    MIDDLEWARE += [\'payla_utils.logging.middlewares.RequestMiddleware\']\n\n- Pass your custom request id header via the PAYLA_UTILS settings: `REQUEST_ID_HEADER`, defaults to `X-Request-ID`\n- Enable tracing (Only supports opentelemetry) via `configure_structlog(tracing_enabled=True)`\n\nExample of logging with structlog:\n\nAutomatic injection of:\n- user_id\n- IP\n- request_id\n- trace_id when available\n\nThis a console view, in prod it will be json (using python json logging to have standard logging and structlog logging as close as possible)\n\n```\n2022-12-06T12:08:49.296789Z [info     ] This is an info log message    extra_data=test_data_info ip=127.0.0.1 name=payla.urls request_id=56bd5250-aa6e-49c6-b5bc-14c1ec5a9e1f user_id=13\n2022-12-06T12:08:49.297239Z [info     ] This is an info log message and should not be an error or errors extra_data=test_data_info2 ip=127.0.0.1 name=payla.urls request_id=56bd5250-aa6e-49c6-b5bc-14c1ec5a9e1f user_id=13\n2022-12-06T12:08:49.297473Z [error    ] This is an error log message   extra_data=test_data_error ip=127.0.0.1 name=payla.urls request_id=56bd5250-aa6e-49c6-b5bc-14c1ec5a9e1f user_id=13\n2022-12-06T12:08:49.297823Z [critical ] This is a critical log message extra_data=test_data_critical ip=127.0.0.1 name=payla.urls request_id=56bd5250-aa6e-49c6-b5bc-14c1ec5a9e1f user_id=13\n```\n\n\nHow that log is produced?\n\n```python\ndef logging_test_view(request):\n    logger.debug(\'This is a debug log message\', extra_data=\'test_data_debug\')\n    logger.info(\'This is an info log message\', extra_data=\'test_data_info\')\n    # Let\'s put the word error into an info message\n    logger.info(\'This is an info log message and should not be an error or errors\', extra_data=\'test_data_info2\')\n    logger.error(\'This is an error log message\', extra_data=\'test_data_error\')\n    logger.critical(\'This is a critical log message\', extra_data=\'test_data_critical\')\n    return HttpResponse(\'Log submitted\')\n```\n\ninstead of `logger = logging.getLogger(__name__)`  it is `logger = structlog.get_logger(__name__)`\n\nBehind the scenes?\n`RequestMiddleware` is setting structlog contextvars:\n\n```python\ndef __call__(self, request: HttpRequest) -> HttpResponse:\n    ...\n    structlog.contextvars.bind_contextvars(ip=ip)\n    structlog.contextvars.bind_contextvars(user_id=user_id)\n    response = self.get_response(request)\n\n    ...\n    structlog.contextvars.clear_contextvars()\n    return response\n```\n\n[See configuration section](#Configuration-and-settings)\n\n### Why structured logger\n\n- By default, the logging frameworks outputs the traces in plain text and tools like EFK stack or Grafana Loki can’t fully process these traces.\n- Therefore, if we “structure” or send the traces in JSON format directly, all the tools can benefit of.\n- As a developer, it would be nice to be able to filter all logs by a certain customer or transaction.\n- The goal of structured logging is to solve these sorts of problems and allow additional analytics.\n\n\n- When you log something, remember that the actual consumer is the machine Grafana Loki (EFK stack), not only humans.\n- Our generic logger comes with some default context structure, but as you can see, you can introduce new keys.\n- We use structlog as wraper on standard logging library, you can check for more details [structlog](https://www.structlog.org/en/stable/).\n\n\n## Access decorator\n\nTo prohibit access to only internal IPs for a specific view it\'s possible to use the `only_internal_access` decorator.\n\nSERVER_IP is required to be set on payla_utils settings.\n\n[See configuration section](#Configuration-and-settings)\n\nExample usage\n\n```python\n@only_internal_access\ndef test_view(request):\n    return HttpResponse(\'OK\')\n```\nOr inline\n\n```python\npath(\'test/\', only_internal_access(test_view), name="test-view"),\n```\n\n## Management command to init environment\n\nThis management command will init environment based on the current env (local.dev, dev, stage, playground and prod)\n\n- load fixtures on the first run (when the DB is empty)\n- setup custom theme for admin_interface\n- create user when not in prod if `LOCAL_DJANGO_ADMIN_PASSWORD` is set\n\nAPP_NAME and ENVIRONMENT settings are required. [See configuration section](#Configuration-and-settings)\n\n## Configuration and settings\n\nSettings for Payla Utils are all namespaced in the PAYLA_UTILS setting.\nFor example your project\'s `settings.py` file might look like this:\n\n```python\nPAYLA_UTILS = {\n    \'APP_NAME\': \'My App\',\n    # Used for json logging\n    \'MICROSERVICE_NAME: \'myapp\',\n    # dev, stage, prod ...\n    \'ENVIRONMENT\': ENVIRONMENT,\n    \'INITIAL_FIXTURES\': [\n        os.path.join(BASE_DIR, \'testapp\', \'fixtures\', \'users.json\'),\n    ],\n    \'SERVER_IP\': \'192.168.1.4\',\n    \'REQUEST_ID_HEADER\': \'X-Request-ID\',\n    \'RUN_EXTRA_COMMANDS\': [\'loadinitialusers\', \'setup_something\'],\n    \'LOCAL_DJANGO_ADMIN_PASSWORD\': os.environ.get(\'LOCAL_DJANGO_ADMIN_PASSWORD\', \'admin\'),\n    # Only in case you need to change the defaults\n    \'ENV_THEMES\': {\n        \'local.dev\': {\n            \'title_color\': \'#000000\',\n            \'css_header_background_color\': \'#ffffff\',\n            \'env_color\': \'#00cb38\',\n            \'css_header_text_color\': \'#000000\',\n            \'css_header_link_color\': \'#000000\',\n            \'css_header_link_hover_color\': \'#1e00ac\',\n            \'css_module_background_color\': \'#ababab\',\n            \'css_module_background_selected_color\': \'#e3e3e3\',\n            \'css_module_text_color\': \'#000000\',\n            \'css_module_link_color\': \'#000000\',\n            \'css_module_link_hover_color\': \'#3255fe\',\n            \'css_generic_link_color\': \'#000000\',\n            \'css_save_button_background_color\': \'#6d6d6d\',\n            \'css_save_button_background_hover_color\': \'#4a4a4a\',\n        },\n        \'dev\': {\n            \'title_color\': \'#ffffff\',\n            \'env_color\': \'#00cb68\',\n            \'css_header_background_color\': \'#007b3b\',\n            \'css_header_text_color\': \'#f5dd5d\',\n            \'css_header_link_color\': \'#ffffff\',\n            \'css_header_link_hover_color\': \'#1e00ac\',\n            \'css_module_background_color\': \'#006731\',\n            \'css_module_background_selected_color\': \'#ffffff\',\n            \'css_module_text_color\': \'#ffffff\',\n            \'css_module_link_color\': \'#ffffff\',\n            \'css_module_link_hover_color\': \'#5f0000\',\n            \'css_generic_link_color\': \'#000000\',\n            \'css_save_button_background_color\': \'#006731\',\n            \'css_save_button_background_hover_color\': \'#01a74f\',\n        },\n        \'stage\': {\n            \'title_color\': \'#ffffff\',\n            \'env_color\': \'#ffcb38\',\n            \'css_header_background_color\': \'#ff9722\',\n            \'css_header_text_color\': \'#ffffff\',\n            \'css_header_link_color\': \'#ffffff\',\n            \'css_header_link_hover_color\': \'#41aad1\',\n            \'css_module_background_color\': \'#ca6a00\',\n            \'css_module_background_selected_color\': \'#ffffff\',\n            \'css_module_text_color\': \'#ffffff\',\n            \'css_module_link_color\': \'#ffffff\',\n            \'css_module_link_hover_color\': \'#41aad1\',\n            \'css_generic_link_color\': \'#000000\',\n            \'css_save_button_background_color\': \'#ca6a00\',\n            \'css_save_button_background_hover_color\': \'#ff9722\',\n        },\n        \'playground\': {\n            \'title_color\': \'#ffffff\',\n            \'env_color\': \'#00cb38\',\n            \'css_header_background_color\': \'#09137a\',\n            \'css_header_text_color\': \'#ffffff\',\n            \'css_header_link_color\': \'#ffffff\',\n            \'css_header_link_hover_color\': \'#1e00ac\',\n            \'css_module_background_color\': \'#0020bf\',\n            \'css_module_background_selected_color\': \'#e3e3e3\',\n            \'css_module_text_color\': \'#ffffff\',\n            \'css_module_link_color\': \'#ffffff\',\n            \'css_module_link_hover_color\': \'#69c2cc\',\n            \'css_generic_link_color\': \'#000000\',\n            \'css_save_button_background_color\': \'#0038ff\',\n            \'css_save_button_background_hover_color\': \'#02208b\',\n        },\n        \'prod\': {\n            \'title_color\': \'#ffffff\',\n            \'env_color\': \'#00cb38\',\n            \'css_header_background_color\': \'#720606\',\n            \'css_header_text_color\': \'#ffffff\',\n            \'css_header_link_color\': \'#ffffff\',\n            \'css_header_link_hover_color\': \'#1e00ac\',\n            \'css_module_background_color\': \'#e73f41\',\n            \'css_module_background_selected_color\': \'#e3e3e3\',\n            \'css_module_text_color\': \'#ffffff\',\n            \'css_module_link_color\': \'#ffffff\',\n            \'css_module_link_hover_color\': \'#5f0000\',\n            \'css_generic_link_color\': \'#000000\',\n            \'css_save_button_background_color\': \'#720606\',\n            \'css_save_button_background_hover_color\': \'#4a4a4a\',\n            # APP_NAME will be replaced by the correct app name set in payla utils settings\n            \'title\': \'APP_NAME\',\n        },\n    }\n}\n```\n\n# Development of this project\n\nPlease install [hatch](https://hatch.pypa.io/latest/) as this is the tool we use for releasing.\n\nTo run tests:\n\n    hatch run test-local\n\nTo format code:\n\n    hatch run format\n\nDjango pytest integration [docs](https://pytest-django.readthedocs.io/en/latest/).\n',
    'author': 'Payla Services',
    'author_email': 'tools@payla.de',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9',
}


setup(**setup_kwargs)
