{"version":3,"file":"lib_index_js.55836a5659ad18a8e256.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5C+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjCwD;AACJ;AACG;AACZ;AACM;AACjD;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB;AAChD;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA,4BAA4B,oDAAgB;AAC5C;AACA;AACA,iBAAiB;AACjB,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAO;AAC7B;AACA,wBAAwB,6DAAU;AAClC,aAAa;AACb;AACA,SAAS;AACT,0BAA0B,8CAA8C;AACxE;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;AC1CyB;AACK;AACP;AACI;AACjD;AACO,+BAA+B,yDAAY;AAClD;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAAO;AACrC;AACA,oBAAoB,6DAAU;AAC9B,SAAS;AACT;AACA,2BAA2B,sDAAiB;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9B0C;AAC1C;AACA,0BAA0B,6CAAM;AAChC,IAAI,gDAAS;AACb;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;ACpBwB;AACA;AACZ;AACC;AACI;AAC5C;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,oCAAoC,+CAAQ;AAC5C,4BAA4B,+CAAQ;AACpC,8BAA8B,+CAAQ;AACtC,IAAI,wDAAW;AACf;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D,aAAa;AACb;AACA,KAAK;AACL;AACA,eAAe,oDAAU,cAAc,IAAI;AAC3C,wDAAwD,mBAAmB,sCAAsC;AACjH;AACA,SAAS;AACT;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,0DAAmB,CAAC,uDAAc;AACxE,gBAAgB,0DAAmB,SAAS,+CAA+C;AAC3F,gBAAgB,0DAAmB,UAAU,+CAA+C,0GAA0G,0DAAmB,CAAC,uDAAc;AACxO,gBAAgB,0DAAmB,SAAS,+CAA+C;AAC3F,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,SAAS,+CAA+C;AAC3F,gBAAgB,0DAAmB,SAAS,+CAA+C;AAC3F,2CAA2C,0DAAmB,UAAU,uCAAuC;AAC/G;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,SAAS,+CAA+C;AAC3F,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,sDAAsD,0DAAmB,UAAU,uCAAuC;AAC1H;AACA;AACA;AACA,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC,gBAAgB,0DAAmB,UAAU,uCAAuC;AACpF;AACA,oBAAoB,yDAAgB;AACpC;AACA;AACA,WAAW,0DAAmB;AAC9B;AACO,gCAAgC,6DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,gBAAgB,0GAA0G;AAC7J;AACA;;;;;;;;;;;;;;;AC3JA,iEAAe,mWAAmW,m8CAAm8C","sources":["webpack://jupyterlab-kernel-usage/./lib/format.js","webpack://jupyterlab-kernel-usage/./lib/handler.js","webpack://jupyterlab-kernel-usage/./lib/index.js","webpack://jupyterlab-kernel-usage/./lib/panel.js","webpack://jupyterlab-kernel-usage/./lib/useInterval.js","webpack://jupyterlab-kernel-usage/./lib/widget.js","webpack://jupyterlab-kernel-usage/./style/tachometer.svg"],"sourcesContent":["// Taken from https://github.com/jupyter-server/jupyter-resource-usage/blob/e6ec53fa69fdb6de8e878974bcff006310658408/packages/labextension/src/memoryUsage.tsx#L272\nconst MEMORY_UNIT_LIMITS = {\n    B: 1,\n    KB: 1024,\n    MB: 1048576,\n    GB: 1073741824,\n    TB: 1099511627776,\n    PB: 1125899906842624\n};\nexport function formatForDisplay(numBytes) {\n    const lu = convertToLargestUnit(numBytes);\n    return lu[0].toFixed(2) + ' ' + lu[1];\n}\n/**\n * Given a number of bytes, convert to the most human-readable\n * format, (GB, TB, etc).\n * Taken from https://github.com/jupyter-server/jupyter-resource-usage/blob/e6ec53fa69fdb6de8e878974bcff006310658408/packages/labextension/src/memoryUsage.tsx#L272\n */\nfunction convertToLargestUnit(numBytes) {\n    if (!numBytes) {\n        return [0, 'B'];\n    }\n    if (numBytes < MEMORY_UNIT_LIMITS.KB) {\n        return [numBytes, 'B'];\n    }\n    else if (MEMORY_UNIT_LIMITS.KB === numBytes ||\n        numBytes < MEMORY_UNIT_LIMITS.MB) {\n        return [numBytes / MEMORY_UNIT_LIMITS.KB, 'KB'];\n    }\n    else if (MEMORY_UNIT_LIMITS.MB === numBytes ||\n        numBytes < MEMORY_UNIT_LIMITS.GB) {\n        return [numBytes / MEMORY_UNIT_LIMITS.MB, 'MB'];\n    }\n    else if (MEMORY_UNIT_LIMITS.GB === numBytes ||\n        numBytes < MEMORY_UNIT_LIMITS.TB) {\n        return [numBytes / MEMORY_UNIT_LIMITS.GB, 'GB'];\n    }\n    else if (MEMORY_UNIT_LIMITS.TB === numBytes ||\n        numBytes < MEMORY_UNIT_LIMITS.PB) {\n        return [numBytes / MEMORY_UNIT_LIMITS.TB, 'TB'];\n    }\n    else {\n        return [numBytes / MEMORY_UNIT_LIMITS.PB, 'PB'];\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab_kernel_usage', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { KernelUsagePanel } from './panel';\nimport tachometer from '../style/tachometer.svg';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.getKernelUsage = 'kernel-usage:get';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the kernelusage extension.\n */\nconst plugin = {\n    id: 'kernelusage:plugin',\n    requires: [ICommandPalette, INotebookTracker],\n    autoStart: true,\n    activate: (app, palette, notebookTracker) => {\n        const { commands, shell } = app;\n        const category = 'Kernel Resource';\n        let panel = null;\n        function createPanel() {\n            if (!panel || panel.isDisposed) {\n                panel = new KernelUsagePanel({\n                    widgetAdded: notebookTracker.widgetAdded,\n                    currentNotebookChanged: notebookTracker.currentChanged\n                });\n                shell.add(panel, 'right', { rank: 200 });\n            }\n        }\n        commands.addCommand(CommandIDs.getKernelUsage, {\n            label: 'Kernel Usage',\n            caption: 'Kernel Usage',\n            icon: new LabIcon({\n                name: 'jupyterlab-kernel-usage:icon',\n                svgstr: tachometer\n            }),\n            execute: createPanel\n        });\n        palette.addItem({ command: CommandIDs.getKernelUsage, category });\n        createPanel();\n    }\n};\nexport default plugin;\n","import { StackedPanel } from '@lumino/widgets';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { KernelUsageWidget } from './widget';\nimport tachometer from '../style/tachometer.svg';\nconst PANEL_CLASS = 'jp-KernelUsage-view';\nexport class KernelUsagePanel extends StackedPanel {\n    constructor(props) {\n        super();\n        this.addClass(PANEL_CLASS);\n        this.id = 'kernelusage-panel-id';\n        this.title.caption = 'Kernel Usage';\n        this.title.icon = new LabIcon({\n            name: 'jupyterlab-kernel-usage:icon',\n            svgstr: tachometer\n        });\n        this.title.closable = true;\n        const widget = new KernelUsageWidget({\n            widgetAdded: props.widgetAdded,\n            currentNotebookChanged: props.currentNotebookChanged,\n            panel: this\n        });\n        this.addWidget(widget);\n    }\n    dispose() {\n        super.dispose();\n    }\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n}\n","import { useEffect, useRef } from 'react';\nconst useInterval = (callback, delay) => {\n    const savedCallback = useRef();\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    useEffect(() => {\n        function tick() {\n            if (savedCallback.current) {\n                savedCallback.current();\n            }\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [callback, delay]);\n};\nexport default useInterval;\n","import React, { useState, useEffect } from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nimport useInterval from './useInterval';\nimport { formatForDisplay } from './format';\nconst POLL_INTERVAL_SEC = 5;\nlet kernelChangeCallback = null;\nconst KernelUsage = (props) => {\n    var _a;\n    const { panel } = props;\n    const [kernelId, setKernelId] = useState();\n    const [path, setPath] = useState();\n    const [usage, setUsage] = useState();\n    useInterval(async () => {\n        if (kernelId && panel.isVisible) {\n            requestUsage(kernelId)\n                .then(usage => setUsage(usage))\n                .catch(() => {\n                console.warn(`Request failed for ${kernelId}. Kernel restarting?`);\n            });\n        }\n    }, POLL_INTERVAL_SEC * 1000);\n    const requestUsage = (kid) => {\n        return requestAPI(`get_usage/${kid}`).then(data => {\n            const usage = Object.assign(Object.assign({}, data.content), { kernelId: kid, timestamp: new Date() });\n            return usage;\n        });\n    };\n    useEffect(() => {\n        const createKernelChangeCallback = (panel) => {\n            return (_sender, args) => {\n                var _a, _b;\n                const newKernelId = (_a = args.newValue) === null || _a === void 0 ? void 0 : _a.id;\n                if (newKernelId) {\n                    setKernelId(newKernelId);\n                    const path = (_b = panel === null || panel === void 0 ? void 0 : panel.sessionContext.session) === null || _b === void 0 ? void 0 : _b.model.path;\n                    setPath(path);\n                    requestUsage(newKernelId).then(usage => setUsage(usage));\n                }\n                else {\n                    // Kernel was disposed\n                    setKernelId(newKernelId);\n                }\n            };\n        };\n        const notebookChangeCallback = (sender, panel) => {\n            var _a, _b, _c, _d, _e;\n            if (panel === null) {\n                // Ideally we would switch to a new \"select a notebook to get kernel\n                // usage\" screen instead of showing outdated info.\n                return;\n            }\n            if (kernelChangeCallback) {\n                kernelChangeCallback.panel.sessionContext.kernelChanged.disconnect(kernelChangeCallback.callback);\n            }\n            kernelChangeCallback = {\n                callback: createKernelChangeCallback(panel),\n                panel\n            };\n            panel.sessionContext.kernelChanged.connect(kernelChangeCallback.callback);\n            if (((_b = (_a = panel.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.id) !== kernelId) {\n                const kernelId = (_d = (_c = panel.sessionContext.session) === null || _c === void 0 ? void 0 : _c.kernel) === null || _d === void 0 ? void 0 : _d.id;\n                if (kernelId) {\n                    setKernelId(kernelId);\n                    const path = (_e = panel.sessionContext.session) === null || _e === void 0 ? void 0 : _e.model.path;\n                    setPath(path);\n                    requestUsage(kernelId).then(usage => setUsage(usage));\n                }\n            }\n        };\n        props.currentNotebookChanged.connect(notebookChangeCallback);\n        return () => {\n            props.currentNotebookChanged.disconnect(notebookChangeCallback);\n            // In the ideal world we would disconnect kernelChangeCallback from\n            // last panel here, but this can lead to a race condition. Instead,\n            // we make sure there is ever only one callback active by holding\n            // it in a global state.\n        };\n    }, [kernelId]);\n    if (kernelId) {\n        if (usage) {\n            return !usage.hostname ? (React.createElement(React.Fragment, null,\n                React.createElement(\"h3\", { className: \"jp-KernelUsage-section-separator\" }, \"Kernel usage details are not available\"),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-section-separator\" }, \"Please check with your system administrator that you running IPyKernel version 6.10.0 or above.\"))) : (React.createElement(React.Fragment, null,\n                React.createElement(\"h3\", { className: \"jp-KernelUsage-section-separator\" }, \"Kernel usage\"),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Kernel Host: \",\n                    usage.hostname),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Notebook: \",\n                    path),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Kernel ID: \",\n                    kernelId),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Timestamp: \", (_a = usage.timestamp) === null || _a === void 0 ? void 0 :\n                    _a.toLocaleString()),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Process ID: \",\n                    usage.pid),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"CPU: \",\n                    usage.kernel_cpu,\n                    \"% used\"),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Memory: \",\n                    formatForDisplay(usage.kernel_memory)),\n                React.createElement(\"hr\", { className: \"jp-KernelUsage-section-separator\" }),\n                React.createElement(\"h4\", { className: \"jp-KernelUsage-section-separator\" }, \"Host CPU\"),\n                usage.host_cpu_percent && (React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    usage.host_cpu_percent.toFixed(1),\n                    \"% used on \",\n                    usage.cpu_count,\n                    ' ',\n                    \"CPUs\")),\n                React.createElement(\"h4\", { className: \"jp-KernelUsage-section-separator\" }, \"Host Virtual Memory\"),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Active: \",\n                    formatForDisplay(usage.host_virtual_memory.active)),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Available: \",\n                    formatForDisplay(usage.host_virtual_memory.available)),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Free: \",\n                    formatForDisplay(usage.host_virtual_memory.free)),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Inactive: \",\n                    formatForDisplay(usage.host_virtual_memory.inactive)),\n                usage.host_virtual_memory.percent && (React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Percent used: \",\n                    usage.host_virtual_memory.percent.toFixed(1),\n                    \"%\")),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Total: \",\n                    formatForDisplay(usage.host_virtual_memory.total)),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Used: \",\n                    formatForDisplay(usage.host_virtual_memory.used)),\n                React.createElement(\"div\", { className: \"jp-KernelUsage-separator\" },\n                    \"Wired: \",\n                    formatForDisplay(usage.host_virtual_memory.wired))));\n        }\n    }\n    return React.createElement(\"h3\", null, \"Kernel usage is not available\");\n};\nexport class KernelUsageWidget extends ReactWidget {\n    constructor(props) {\n        super();\n        this._widgetAdded = props.widgetAdded;\n        this._currentNotebookChanged = props.currentNotebookChanged;\n        this._panel = props.panel;\n    }\n    render() {\n        return (React.createElement(KernelUsage, { widgetAdded: this._widgetAdded, currentNotebookChanged: this._currentNotebookChanged, panel: this._panel }));\n    }\n}\n","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 512 512\\\" style=\\\"enable-background:new 0 0 512 512;\\\" xml:space=\\\"preserve\\\">\\r\\n<g>\\r\\n\\t<path d=\\\"M256,42.7c-141.2,0-256,114.8-256,256c0,61.8,22.1,118.4,58.7,162.7l6,8h382.7l6-8c36.6-44.3,58.7-100.9,58.7-162.7\\r\\n\\t\\tC512,157.5,397.2,42.7,256,42.7z M256,85.3c118.1,0,213.3,95.2,213.3,213.3c0,48.3-16.9,92.3-44,128H86.7\\r\\n\\t\\tc-27.1-35.8-44-79.7-44-128C42.7,180.6,137.9,85.3,256,85.3z M256,106.7c-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3\\r\\n\\t\\ts21.3-9.6,21.3-21.3S267.8,106.7,256,106.7z M170.7,129.3c-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3\\r\\n\\t\\tS182.4,129.3,170.7,129.3z M341.3,129.3c-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3\\r\\n\\t\\tS353.1,129.3,341.3,129.3z M108,192c-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3S119.8,192,108,192z\\r\\n\\t\\t M398,192.7L277.3,262c-6.3-3.7-13.6-6-21.3-6c-23.6,0-42.7,19.1-42.7,42.7c0,23.6,19.1,42.7,42.7,42.7c23.3,0,42.3-18.8,42.7-42\\r\\n\\t\\tv-0.7L419.3,230L398,192.7z M85.3,277.3c-11.8,0-21.3,9.6-21.3,21.3S73.6,320,85.3,320s21.3-9.6,21.3-21.3S97.1,277.3,85.3,277.3z\\r\\n\\t\\t M426.7,277.3c-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3S438.4,277.3,426.7,277.3z M108,362.7\\r\\n\\t\\tc-11.8,0-21.3,9.6-21.3,21.3s9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3S119.8,362.7,108,362.7z M404,362.7c-11.8,0-21.3,9.6-21.3,21.3\\r\\n\\t\\ts9.6,21.3,21.3,21.3s21.3-9.6,21.3-21.3S415.8,362.7,404,362.7z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\\r\\n<!--\\r\\nDownloaded from https://seekicon.com/free-icon/tachometer-alt_1 under MIT License.\\r\\n-->\";"],"names":[],"sourceRoot":""}