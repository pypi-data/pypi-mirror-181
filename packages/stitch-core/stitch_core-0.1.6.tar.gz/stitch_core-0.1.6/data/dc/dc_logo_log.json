{
    "CPUs": 2,
    "arity": 2,
    "verbose": false,
    "collect_data": false,
    "bs": 3000,
    "aic": 1,
    "structurePenalty": 2,
    "topK": 2,
    "DSL": {
        "logVariable": 0,
        "productions": [{
                "logProbability": 0,
                "expression": "map"
            },
            {
                "logProbability": 0,
                "expression": "unfold"
            },
            {
                "logProbability": 0,
                "expression": "range"
            },
            {
                "logProbability": 0,
                "expression": "index"
            },
            {
                "logProbability": 0,
                "expression": "fold"
            },
            {
                "logProbability": 0,
                "expression": "length"
            },
            {
                "logProbability": 0,
                "expression": "if"
            },
            {
                "logProbability": 0,
                "expression": "+"
            },
            {
                "logProbability": 0,
                "expression": "-"
            },
            {
                "logProbability": 0,
                "expression": "empty"
            },
            {
                "logProbability": 0,
                "expression": "cons"
            },
            {
                "logProbability": 0,
                "expression": "car"
            },
            {
                "logProbability": 0,
                "expression": "cdr"
            },
            {
                "logProbability": 0,
                "expression": "empty?"
            },
            {
                "logProbability": 0,
                "expression": "0"
            },
            {
                "logProbability": 0,
                "expression": "1"
            },
            {
                "logProbability": 0,
                "expression": "*"
            },
            {
                "logProbability": 0,
                "expression": "mod"
            },
            {
                "logProbability": 0,
                "expression": "gt?"
            },
            {
                "logProbability": 0,
                "expression": "eq?"
            },
            {
                "logProbability": 0,
                "expression": "is-prime"
            },
            {
                "logProbability": 0,
                "expression": "is-square"
            }
        ]
    },
    "frontiers": [{
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ $0 1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (length (range 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 1)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (length (range $0)) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (length (range 1)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (length (range $0)))) $0))"
                }
            ],
            "task": "add-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ $0 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ 1 (+ 1 (+ 1 $0)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 $0)) (map (lambda (+ 1 (+ 1 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ $0 1))) (map (lambda (+ 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 $0))) (map (lambda (+ 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 $0)))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 (length (range $0)))))) $0))"
                }
            ],
            "task": "add-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ $0 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ $0 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 (+ $0 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 (+ 1 $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ 1 (+ 1 (+ 1 (+ 1 $0))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 $0)) (map (lambda (+ 1 (+ 1 (+ 1 $0)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 $0))) (map (lambda (+ 1 (+ 1 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 $0)))) (map (lambda (+ 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (+ 1 (+ 1 (+ 1 $0))))) (map (lambda $0) $0)))"
                }
            ],
            "task": "add-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (index 1 $0) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr $0)) (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (car (cdr (map (lambda (cons $0 empty)) $0))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (index 1 (map (lambda (cons $0 empty)) $0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr $0)) (range (length empty))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (map (lambda $0) $0))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr $0) $0 (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr $0) empty (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (car (cdr $0))) (cons $0 empty)) (lambda (lambda (cons $1 $0)))))"
                }
            ],
            "task": "append-index-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr $0))) (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (car (cdr (cdr $1)))) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (car (cdr (cdr (map (lambda (cons $0 empty)) $0)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr $0))) (range (length empty))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr (cdr $0)) $0 (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr (cdr $0)) empty (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr (map (lambda $0) $0)))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (car (cdr (cdr $0)))) (cons $0 empty)) (lambda (lambda (cons $1 $0)))))"
                }
            ],
            "task": "append-index-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (index 1 (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr (cdr $0)))) (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (car (cdr (cdr (cdr (map (lambda (cons $0 empty)) $0))))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (car (cdr (cdr (map (lambda (cons $0 empty)) (cdr $0))))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr (cdr $0)))) (range (length empty))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr (cdr (map (lambda $0) $0))))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (fold (cdr (cdr (cdr $0))) empty (lambda (lambda (cons $1 empty)))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (car (cdr (cdr (cdr $0))))) (cons $0 empty)) (lambda (lambda (cons $1 $0)))))"
                }
            ],
            "task": "append-index-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (length empty) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons 0 (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range (length (range 1))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 (range 1) (lambda (lambda (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda $0) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda 0) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons (length (range $1)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 (map (lambda $0) $0))))))"
                }
            ],
            "task": "append-k with k=0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (+ 1 (+ 1 1)) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (+ 1 (+ 1 1)) (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (+ 1 (+ 1 1))) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (+ 1 (+ 1 1)) (range (length empty))) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (length (range (+ 1 (+ 1 1)))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 (cons (+ 1 (+ 1 1)) empty) (lambda (lambda (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (+ 1 (+ 1 1))) (cons $0 empty)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (+ 1 (+ 1 (+ 1 $0)))) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (if (is-prime 1) 0 (+ 1 (+ 1 1))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cdr (cdr (cdr (range (+ 1 (+ 1 (+ 1 1))))))) (lambda (lambda (cons $1 $0)))))"
                }
            ],
            "task": "append-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (+ 1 (+ 1 (+ 1 1))) empty) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cons (+ 1 (+ 1 (+ 1 1))) (range 0)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (+ 1 (+ 1 (+ 1 1)))) (range 1)) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 (cons (+ 1 (+ 1 (+ 1 1))) empty) (lambda (lambda (cons $1 $0))))))"
                }
            ],
            "task": "append-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                "logLikelihood": 0,
                "program": "(lambda (fold $0 (cons (+ 1 (+ 1 (+ 1 (+ 1 1)))) empty) (lambda (lambda (cons $1 $0)))))"
            }],
            "task": "append-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (empty? (range (- 0 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (length (range $0)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (- 0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (+ $0 1) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (+ 1 $0) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? 1 (- 0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (empty? (range (- (length empty) $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (- (length empty) 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (+ $0 1) (length empty))) $0))"
                }
            ],
            "task": "bool-identify-geq-k with k=0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (length empty))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (gt? $0 0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (empty? (range (- 1 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (car (range 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (length (range 0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (length (range $0)) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (- $0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (- 0 $0))) $0))"
                }
            ],
            "task": "bool-identify-geq-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (- $0 (+ 1 1)) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (- $0 1) (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? (- (- $0 1) 1) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (gt? $0 (+ 1 (+ 1 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (+ 1 (+ 1 (length (range 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (+ 1 (+ 1 1)))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? $0 (+ 1 1))) (map (lambda (- $0 1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 (+ 1 (+ 1 1))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda (gt? $0 (+ 1 (+ 1 1)))) $0) (lambda (lambda $0))))"
                }
            ],
            "task": "bool-identify-geq-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (empty? (range (mod $0 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (mod $0 (+ 1 (+ 1 1))) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 0 (mod $0 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (gt? 1 (mod $0 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (length empty) (mod $0 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 0)) (map (lambda (mod $0 (+ 1 (+ 1 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ $0 (mod $0 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ (mod $0 (+ 1 (+ 1 1))) $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (mod $0 1) (mod $0 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 1 (+ 1 (mod $0 (+ 1 (+ 1 1)))))) $0))"
                }
            ],
            "task": "bool-identify-is-mod-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (empty? (range (mod $0 (+ 1 (+ 1 (+ 1 1))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (mod $0 (+ 1 (+ 1 (+ 1 1)))) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 0 (mod $0 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (length empty) (mod $0 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 0)) (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ $0 (mod $0 (+ 1 (+ 1 (+ 1 1))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ (mod $0 (+ 1 (+ 1 (+ 1 1)))) $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (mod $0 (+ 1 (+ 1 (+ 1 1)))) (mod $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (mod $0 1) (mod $0 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 1 (+ 1 (mod $0 (+ 1 (+ 1 (+ 1 1))))))) $0))"
                }
            ],
            "task": "bool-identify-is-mod-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (+ 1 (+ 1 1)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (+ 1 1) (- $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (- $0 (+ 1 1)) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (- $0 1) (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (- (- $0 1) 1) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 1 (- $0 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? 1 (- (- $0 1) 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (eq? $0 (+ 1 (+ 1 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 1)))) (map (lambda $0) $0)))"
                }
            ],
            "task": "bool-identify-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "bool"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? (- $0 1) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (eq? $0 (+ 1 (+ 1 (+ 1 1))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 (+ 1 1))))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 1)))) (map (lambda (- $0 1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (eq? $1 (+ 1 (+ 1 (+ 1 1)))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (+ 1 (+ 1 (+ 1 (length empty))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (is-square (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 $0))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (+ 1 (if (is-prime $0) 0 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (eq? $0 (if (is-prime $0) 0 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                }
            ],
            "task": "bool-identify-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (- 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- (length (range 1)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (fold (range $0) 1 (lambda (lambda 0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (- 1 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (- 0 $0) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (- 0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 0 (- $0 1))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=1 and n=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-square $0) (+ $0 1) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-square $0) (+ 1 $0) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) (length empty) (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 1) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (if (is-prime $0) 0 (+ 1 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 $0))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 (length (range $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime (length (range $0))) 0 (+ 1 $0))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=1 and n=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime (- $0 (+ 1 1))) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 (+ 1 (+ 1 1))) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 (+ 1 (+ 1 1))) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 (+ 1 (+ 1 1))) (length empty) (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ $0 1) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 $0) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (eq? $0 (+ 1 (+ 1 (+ 1 1)))) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (eq? $0 (+ 1 (+ 1 (+ 1 1)))) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda (+ $0 1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda (+ 1 $0)) $0)))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=1 and n=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (- 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- (length (range 1)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (fold (range $0) 1 (lambda (lambda 0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (- 1 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (- 0 $0) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (- 0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 0 (- $0 1))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=3 and n=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cons (+ 1 (+ 1 1)) (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 0) (- $0 1) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cons (+ 1 (+ 1 (+ 1 $0))) (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length $0) (cons (+ 1 (+ 1 1)) $0))) (map (lambda (range $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ $0 (+ 1 (+ 1 1))) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 (+ $0 (+ 1 1))) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 (+ 1 (+ $0 1))) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 (+ 1 (+ 1 $0))) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) (map (lambda (+ 1 (+ 1 (+ $0 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) (map (lambda (+ 1 (+ 1 (+ 1 $0)))) $0)))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=3 and n=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-square $0) (+ $0 1) 0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) (length empty) (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 1) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (if (is-prime $0) 0 (+ 1 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 $0))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 (length (range $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime (length (range $0))) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 (* $0 $0)))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=4 and n=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (- 1 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- (length (range 1)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (fold (range $0) 1 (lambda (lambda 0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (- 1 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (- 0 $0) 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ 1 (- 0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 0 (- $0 1))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=5 and n=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cons (+ 1 1) (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 0) (- $0 1) (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cons (+ 1 (+ 1 $0)) (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ $0 (+ 1 1)) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 (+ $0 1)) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 (+ 1 $0)) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 1)))) (map (lambda (+ $0 (+ 1 1))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 1)))) (map (lambda (+ 1 (+ $0 1))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 1)))) (map (lambda (+ 1 (+ 1 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car (map (lambda (+ 1 (+ 1 $1))) $1)) (+ 1 (+ 1 1)))) $0))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=5 and n=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime (- $0 1)) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime (- $0 1)) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 (+ 1 1)) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (gt? $0 (+ 1 1)) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ $0 1) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (+ 1 $0) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (eq? $0 (+ 1 (+ 1 1))) 0 (+ $0 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (eq? $0 (+ 1 (+ 1 1))) 0 (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (if (is-prime $0) 0 (+ 1 (+ 1 $0)))) (map (lambda (- $0 1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) (map (lambda (+ 1 $0)) $0)))"
                }
            ],
            "task": "caesar-cipher-k-modulo-n with k=5 and n=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (fold (range $1) (+ 1 $0) (lambda (lambda $2)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 0) $0 (+ $0 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 0) $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 1) $0 (+ $0 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 1) $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (length empty) (lambda (lambda (if (gt? $1 0) $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (map (lambda (gt? $0 0)) $0) 0 (lambda (lambda (if $1 $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (map (lambda (gt? $0 1)) $0) 0 (lambda (lambda (if $1 $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 (- 1 1)) $0 (+ 1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 (+ 1 $0)) $0 (+ 1 $0))))))"
                }
            ],
            "task": "count-k with k=0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (map (lambda $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (map (lambda $0) (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda $0) (cdr (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cdr (cdr (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cdr (cdr (cdr $1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (car (map (lambda (cdr (cdr $1))) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (car (map (lambda (cdr $1)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (car (map (lambda $1) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (fold $0 (cdr (cdr $0)) (lambda (lambda $0)))))"
                }
            ],
            "task": "drop-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (cdr (cdr (map (lambda $0) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (cdr (map (lambda $0) (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (map (lambda $0) (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (map (lambda $0) (cdr (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda $0) (cdr (cdr (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cdr (cdr (cdr (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cdr (cdr (cdr (cdr (cdr $1)))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (car (map (lambda (cdr (cdr (cdr (cdr $1))))) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (car (map (lambda (cdr (cdr $1))) $0))))))"
                }
            ],
            "task": "drop-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (empty? $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (length $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (length $0) 0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 0 (length $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? 1 (length $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (map (lambda 0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (map (lambda 1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (map (lambda empty) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (map (lambda $1) $0)))"
                }
            ],
            "task": "empty"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr $0) 1 (lambda (lambda (* $0 (- (car $2) $1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr $0) 1 (lambda (lambda (* (- (car $2) $1) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (fold (range (mod $1 (length $2))) (is-square $1) (lambda (lambda $2)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (fold (range (mod $1 (length $2))) (is-square $1) (lambda (lambda $2)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr $0) 1 (lambda (lambda (if (eq? $1 (car $2)) 0 $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr $0) (length $0) (lambda (lambda (* (- (car $2) $1) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr $0) 1 (lambda (lambda (* (- (index 0 $2) $1) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr (map (lambda (- (car $1) $0)) $0)) 1 (lambda (lambda (* $0 $1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold (cdr (map (lambda (- (car $1) $0)) $0)) 1 (lambda (lambda (* $1 $0)))))))"
                }
            ],
            "task": "has-head-in-tail"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $0 $1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $1 $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (fold $0 1 (lambda (lambda (* $0 $1)))) 0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (fold $0 1 (lambda (lambda (* $1 $0)))) 0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 0 (fold $0 1 (lambda (lambda (* $0 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 0 (fold $0 1 (lambda (lambda (* $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $0 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (length $0) (fold $0 1 (lambda (lambda (* $0 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (length $0) (fold $0 1 (lambda (lambda (* $1 $0))))))"
                }
            ],
            "task": "has-k with k=0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ 1 (length $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-prime 1) (lambda (lambda (if (is-square (+ 1 $1)) (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) (- 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (is-prime $1) (is-prime $1) (is-square (length $2)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (is-prime (length $2)) (is-prime $1) (is-square 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (is-square (+ $1 1)) (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (is-square (+ 1 $1)) (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 (+ 1 1))) (lambda (lambda (if (is-square (+ 1 $1)) (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (eq? $1 (+ 1 (+ 1 1))) (is-prime $1) $0)))))"
                }
            ],
            "task": "has-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-square (length $0)) (is-prime 1) (is-prime (fold (cdr (cdr $0)) 1 (lambda (lambda $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (gt? (length $0) (+ 1 1)) (is-prime (car (cdr (cdr $0)))) (is-prime 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (gt? (length $0) (+ 1 1)) (is-prime (car (cdr (cdr $0)))) (is-prime 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (gt? (length $0) (+ 1 1)) (is-prime (car (cdr (cdr $0)))) (is-prime (length empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (index (length $0) (cons 0 $0)) (+ 1 (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (index (length $0) (cons 1 $0)) (+ 1 (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (index (length $0) (cons (length $0) $0)) (+ 1 (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (index (length $0) (cons (length empty) $0)) (+ 1 (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (index (length $0) (cons (+ 1 1) $0)) (+ 1 (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (+ 1 1)) (lambda (lambda (if (eq? $1 (+ 1 (+ 1 (+ 1 (+ 1 1))))) (is-prime $1) $0)))))"
                }
            ],
            "task": "has-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (car $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 0 $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length empty) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (car $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda $1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda $1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (mod 0 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (mod 1 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (index 0 $0))))"
                }
            ],
            "task": "head"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (car $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 0 $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length empty) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (car $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda $1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda $1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (mod 0 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (mod 1 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (index 0 $0))))"
                }
            ],
            "task": "index-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (+ 1 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 0 (cdr (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length (range 1)) (cdr $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length empty) (cdr (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (car (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (index 1 (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (map (lambda $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda $0) (cdr (cdr $0)))))"
                }
            ],
            "task": "index-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (cdr (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (+ 1 1) (cdr (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 0 (cdr (cdr (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (+ 1 (+ 1 1)) (cdr $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length (range 1)) (cdr (cdr (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length empty) (cdr (cdr (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (car (cdr (cdr (cdr (cdr $0))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (index 1 (cdr (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (cdr (cdr (map (lambda $0) $0)))))))"
                }
            ],
            "task": "index-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold $0 0 (lambda (lambda (+ (mod $1 (+ 1 1)) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (fold (range $1) $0 (lambda (lambda (if $0 (is-prime 0) $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (fold (range $1) $0 (lambda (lambda (if $0 (is-prime 1) $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (eq? 0 (mod $1 (+ 1 1))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (eq? 0 (mod $1 (+ 1 1))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (fold (range $1) (is-square 1) (lambda (lambda (if $0 (is-prime 1) $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 1 (mod (fold $0 1 (lambda (lambda (* $0 (+ 1 $1))))) (+ 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if (eq? 1 (mod $1 (+ 1 1))) (is-prime 1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if (eq? 1 (mod $1 (+ 1 1))) (is-prime 0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if (eq? 1 (mod $1 (+ 1 1))) (is-prime 1) $0)))))"
                }
            ],
            "task": "is-mod-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold $0 0 (lambda (lambda (+ $0 (mod $1 (+ 1 (+ 1 1))))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (range (fold $0 0 (lambda (lambda (+ (mod $1 (+ 1 (+ 1 1))) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (eq? 0 (mod $1 (+ 1 (+ 1 1)))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (eq? 0 (mod $1 (+ 1 (+ 1 1)))) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 1 (mod (fold $0 1 (lambda (lambda (* $0 (+ 1 $1))))) (+ 1 (+ 1 1)))))"
                }
            ],
            "task": "is-mod-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (mod (car $0) (+ 1 1)) 1))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 1 (mod (car $0) (+ 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (mod (car $0) (+ 1 1)) 0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? (mod (index 0 $0) (+ 1 1)) 1))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (eq? 1 (mod (index 0 $0) (+ 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (mod (index 0 $0) (+ 1 1)) 0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (is-prime (+ (mod (car $0) (+ 1 1)) 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (is-prime (+ 1 (mod (car $0) (+ 1 1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (mod (car $0) (+ 1 1)) (length empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (gt? (fold $0 1 (lambda (lambda (* $0 $1)))) (car $0)))"
                }
            ],
            "task": "is-odds"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "bool"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (is-prime (if $0 $1 0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (is-prime (if $0 $1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (is-prime (if $0 $1 0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (is-prime (if $0 $1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (empty? (fold $0 empty (lambda (lambda (if (is-prime $1) $0 $2))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (empty? (range 0)) (lambda (lambda (if $0 (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square (length empty)) (lambda (lambda (if $0 (is-prime $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) (empty? $2))))))"
                }
            ],
            "task": "is-primes"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 $1) $0 $1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 $0) $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 $0) $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 (- $1 1)) $0 $1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 (- $1 1)) $0 $1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 (- $0 1)) $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (eq? $1 (mod $1 $0)) $0 $1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (eq? $0 (mod $0 (+ 1 $1))) $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (eq? $1 (mod $1 (+ 1 $0))) $0 $1)))))"
                }
            ],
            "task": "kth-largest with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (index (length (cdr $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (- (length $0) 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length $0) (cons 0 $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length $0) (cons 1 $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length $0) (cons (car $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length $0) (cons (length $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length $0) (cons (length empty) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length (cdr (range (length $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index (length (range (length (cdr $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (index (length (cdr $0)) $0))))"
                }
            ],
            "task": "last"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (length $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (range (length $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (map (lambda 0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (map (lambda 1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (map (lambda empty) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (length (map (lambda $1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (+ (length $0) (length empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (+ (length empty) (length $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (- (length $0) (length empty)))"
                }
            ],
            "task": "len"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda 0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length empty)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda 0) (range (length $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda 0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (range 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range 0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- $0 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod 0 1)) $0))"
                }
            ],
            "task": "modulo-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (mod $0 (+ 1 1))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (mod $0 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ (length (range 1)) 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (length (range 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 1))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (length (range (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length (range $0)) (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (- (- 0 1) 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (* $0 $0) (+ 1 1))) $0))"
                }
            ],
            "task": "modulo-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (mod $0 (+ 1 (+ 1 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 1)))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length (range $0)) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (length empty)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (map (lambda (mod $1 (+ 1 (+ 1 1)))) $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length $0) (+ 1 (+ 1 1)))) (map (lambda (range $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (mod $0 (+ 1 $0)) (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (mod $0 (+ 1 (+ 1 1))) (+ 1 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car $0) (+ 1 (+ 1 1)))) (map (lambda (cons $0 $1)) $0)))"
                }
            ],
            "task": "modulo-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 1))))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length (range $0)) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 (length empty))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (map (lambda (mod $1 (+ 1 (+ 1 (+ 1 1))))) $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length $0) (+ 1 (+ 1 (+ 1 1))))) (map (lambda (range $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (mod $0 (+ 1 $0)) (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car $0) (+ 1 (+ 1 (+ 1 1))))) (map (lambda (cons $0 $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car $0) (+ 1 (+ 1 (+ 1 1))))) (map (lambda (cons $0 empty)) $0)))"
                }
            ],
            "task": "modulo-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length (range $0)) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (length empty)))))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (map (lambda (mod $1 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (length $0) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda (range $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (mod $0 (+ 1 $0)) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car $0) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda (cons $0 $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod (car $0) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) (map (lambda (cons $0 empty)) $0)))"
                }
            ],
            "task": "modulo-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda 0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length empty)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda 0) (range (length $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda 0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (range 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range 0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- $0 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- 1 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod $0 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (mod 0 1)) $0))"
                }
            ],
            "task": "mult-k with k=0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (length (range $0)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (+ $0 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* (+ 1 1) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- $0 (- 0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (+ $0 $0)) (cons 0 $0))))"
                }
            ],
            "task": "mult-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ $0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (+ $0 (+ $0 $0))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ $0 $0))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ $0 (length (range $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (+ (length (range $0)) $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ $0 (length (range (+ $0 $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (length (range $0)) (+ $0 $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (+ (length (range (+ $0 $0))) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (+ $0 (+ $0 $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 (+ 1 (+ 1 1)))) $0))"
                }
            ],
            "task": "mult-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr (range (length $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (range (length (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (index $0 $1)) (range (length (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda $0) (range (length (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range $0)) $1)) (range (length (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr (map (lambda empty) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (fold $0 1 (lambda (lambda (length (cdr $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr (map (lambda (gt? $0 0)) $0))))))"
                }
            ],
            "task": "pop"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (* $0 $0)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 $0)) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 (length (range $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* (length (range $0)) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (* $0 $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (* $0 $0)) (cons 0 $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (* $0 $0)) (cons 1 $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (* $0 (+ $0 (length empty)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (- (* $0 $0) (length empty))) $0))"
                }
            ],
            "task": "pow-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 $0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cons $0 $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (length empty) $0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (car $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (map (lambda $0) $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cons (car $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (fold $0 0 (lambda (lambda $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (fold $0 1 (lambda (lambda $1))) $0))"
                }
            ],
            "task": "prepend-index-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 $0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 (cdr $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (map (lambda (cons $0 $1)) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (map (lambda (cons $0 $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cons $0 $1)) (cdr $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (length (range 1)) $0) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (length empty) (cdr $0)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (car (cdr $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (index 1 $0))) $0))"
                }
            ],
            "task": "prepend-index-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr (cdr (cdr (cdr $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 (cdr (cdr (cdr $0)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 (cdr (cdr (cdr (cdr $0))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (+ 1 1) (cdr (cdr $0))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (cdr (cdr (map (lambda (cons $0 $1)) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (cdr (cdr (map (lambda (cons $0 $1)) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (cdr (map (lambda (cons $0 $1)) (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (cdr (map (lambda (cons $0 $1)) (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (map (lambda (cons $0 $1)) (cdr (cdr $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (map (lambda (cons $0 $1)) (cdr (cdr $0))))))"
                }
            ],
            "task": "prepend-index-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ (length (range 1)) 1) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (length (range 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (- 1 (- 0 1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (+ 1 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 1) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cons (+ 1 1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (cons 0 (range 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (cons 1 (range 1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ (length empty) 1)) $0))"
                }
            ],
            "task": "prepend-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 (length (range 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 1)))) (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cons (+ 1 (+ 1 (+ 1 (+ 1 1)))) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ (length empty) (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 (+ (length empty) 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (length empty)))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (if (is-prime 0) 0 (+ 1 (+ 1 (+ 1 (+ 1 1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (if (is-prime 1) 0 (+ 1 (+ 1 (+ 1 (+ 1 1))))) $0))"
                }
            ],
            "task": "prepend-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [],
                        "constructor": "int"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (range $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (length (range $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (range $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (+ $0 (length empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (+ (length empty) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (- $0 (length empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 0 (cons (range $0) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-prime 0) empty (range $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-prime 1) empty (range $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (if (is-square 1) (range $0) empty))"
                }
            ],
            "task": "range"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons (length (range $1)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 $0 (lambda (lambda (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 (map (lambda $0) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (map (lambda $0) (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (map (lambda $0) $0) $0 (lambda (lambda (cons $1 $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons (+ $1 (length empty)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons (+ (length empty) $1) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons (- $1 (length empty)) $0)))))"
                }
            ],
            "task": "repeat-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car $1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 0 $1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (map (lambda $1) $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car $1)) (range (length $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (car $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length empty) $1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (length (range (car $1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car $0)) (map (lambda $1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (map (lambda $2) $2)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (map (lambda $2) $2)))))"
                }
            ],
            "task": "replace-all-with-index-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr $1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 1 (cdr $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 0 (cdr (cdr $1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (+ 1 1) $1)) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (map (lambda (map (lambda $1) $1)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr $1))) (map (lambda 1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (map (lambda (map (lambda $1) $1)) (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (map (lambda (map (lambda $1) $1)) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (map (lambda $1) $1)) (cdr (cdr $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (map (lambda (map (lambda $1) $1)) (cdr $0))))"
                }
            ],
            "task": "replace-all-with-index-k with k=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr $1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 1 (cdr (cdr $1)))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 0 (cdr (cdr (cdr $1))))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (+ 1 1) (cdr $1))) $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (cdr (map (lambda (map (lambda $1) $1)) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (map (lambda (map (lambda $1) $1)) (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (cdr (map (lambda (map (lambda $1) $1)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (map (lambda 1) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (map (lambda (map (lambda $1) $1)) (cdr (cdr $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (cdr (map (lambda (map (lambda $1) $1)) (cdr $0)))))"
                }
            ],
            "task": "replace-all-with-index-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 0) (lambda (lambda (cons (index (length $0) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (fold $0 empty (lambda (lambda (cons (length $0) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range (length empty)) (lambda (lambda (cons (index (length $0) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (range (length $0)) empty (lambda (lambda (cons (index (length $0) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length (range (length $0))) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $0 (cons $1 empty) (lambda (lambda (cons $1 $0))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length (map (lambda empty) $0)) $2) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range (- 1 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))"
                }
            ],
            "task": "reverse"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (range (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda $0) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range $0)) $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 (length empty))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (empty? $0) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 0) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 1 (+ 1 (+ 1 (+ 1 1)))))))"
                }
            ],
            "task": "slice-k-n with k=1 and n=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr $0)) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 $0) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr $0)) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 (cdr $0)) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 $0) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr $1))) (range 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 1 $1)) (range 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (map (lambda (cons $0 empty)) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (index 1 (map (lambda (cons $0 empty)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cons $0 empty)) (cdr $0))))"
                }
            ],
            "task": "slice-k-n with k=2 and n=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr $1))) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (+ $0 1) $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (+ 1 $0) $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range $0)) (cdr $1))) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda (+ $0 1)) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda (+ 1 $0)) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range (+ 1 $0))) $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr $1))) (range (if (is-prime 1) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                }
            ],
            "task": "slice-k-n with k=2 and n=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr $1))) (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (+ 1 $0) $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 1)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 1)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda (+ 1 $0)) (range (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                }
            ],
            "task": "slice-k-n with k=2 and n=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr (cdr $0))) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 (cdr $0)) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr (cdr $0))) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (+ 1 1) $0) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 (cdr (cdr $0))) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 1 (cdr $0)) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr $1)))) (range 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index 1 (cdr $1))) (range 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (cdr (map (lambda (cons $0 empty)) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (cdr (map (lambda (cons $0 empty)) (cdr $0)))))"
                }
            ],
            "task": "slice-k-n with k=3 and n=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr (cdr $1))))) (range (+ 1 (+ 1 1)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda (index $0 (cdr (cdr $1)))) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr $0))))) (cons $0 (cons (cdr $0) (cons (cdr (cdr $0)) empty)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (cdr (cdr (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 1)))))))))))"
                }
            ],
            "task": "slice-k-n with k=4 and n=3"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr (cdr $1))))) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (cdr (cdr (cdr (range (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 1))))))))))))"
                }
            ],
            "task": "slice-k-n with k=4 and n=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                "logLikelihood": 0,
                "program": "(lambda (map (lambda (index $0 (cdr (cdr (cdr $1))))) (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))"
            }],
            "task": "slice-k-n with k=4 and n=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr (cdr (cdr $1)))))) (range (+ 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr (cdr $0)))))) (cons $0 (cons (cdr $0) empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr $0))))) (cons (cdr $0) (cons (cdr (cdr $0)) empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (cdr (cdr (cdr (cdr $0)))) (range 1) (lambda (lambda (cons $1 (cons (car $0) empty))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr (cdr (cdr $0))))))) (cons (cons 0 $0) (cons $0 empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr (cdr (cdr $0))))))) (cons (cons 1 $0) (cons $0 empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr (cdr $0)))))) (cons $0 (map (lambda (cdr $0)) (cons $0 empty)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car (cdr (cdr (cdr (cdr $0))))) (cons (car (cdr (cdr (cdr (cdr (cdr $0)))))) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car (cdr (cdr (cdr (cdr (cdr $0))))))) (cons (cons (car $0) $0) (cons $0 empty))))"
                }
            ],
            "task": "slice-k-n with k=5 and n=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cdr $0))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (map (lambda $0) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (cdr $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cdr $1)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (car (map (lambda $1) $0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (fold $0 $0 (lambda (lambda $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (fold $0 $0 (lambda (lambda $2)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cdr (fold $0 empty (lambda (lambda $2)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cdr $2)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cdr $0) (lambda (lambda $0))))"
                }
            ],
            "task": "tail"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 $0) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car $1)) (range 1)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (car (map (lambda (cons $0 empty)) $0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cdr (range 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (range (length empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index (length empty) $0) empty))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 $0) (range 0)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (length (range (car $0))) empty))"
                }
            ],
            "task": "take-k with k=1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cons (car (cdr $0)) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cons (index 1 $0) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 1))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cons (car (cdr $0)) (range 0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cons (index 0 (cdr $0)) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (car $0) (cons (index 1 $0) (range 0))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 $0) (cons (car (cdr $0)) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (cons (index 0 $0) (cons (index 1 $0) empty)))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (cons 0 (cons 1 empty))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (car $0)) (cons $0 (cons (cdr $0) empty))))"
                }
            ],
            "task": "take-k with k=2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (range (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda $0) (range (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range $0)) $1)) (range (+ 1 (+ 1 (+ 1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 (length empty))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (empty? $0) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 0) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 0 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 1 (+ 1 (+ 1 (+ 1 1)))))))"
                }
            ],
            "task": "take-k with k=4"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (map (lambda $0) (range (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index (length (range $0)) $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (length empty)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (empty? $0) 0 (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 0) 0 (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 0 (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda (index $0 $1)) (range (if (is-prime 1) 1 (+ 1 (+ 1 (+ 1 (+ 1 1))))))))"
                }
            ],
            "task": "take-k with k=5"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [],
                        "constructor": "int"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 $1) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 (+ $1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 (+ $1 1)) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ $1 1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 (+ $1 1)) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 1 (lambda (lambda (if (eq? $1 (mod $1 $0)) $0 (+ 1 $1))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (length $0) (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ 1 $1))))))"
                }
            ],
            "task": "+1 maximum list"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (range (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 (+ 1 $1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (fold $0 0 (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ 1 $1)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (range (fold $0 1 (lambda (lambda (if (gt? $0 (+ 1 $1)) $0 (+ 1 $1)))))))"
                }
            ],
            "task": "range +1 maximum list"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [{
                                "arguments": [],
                                "constructor": "bool"
                            }],
                            "constructor": "list"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [{
                                "arguments": [],
                                "constructor": "bool"
                            }],
                            "constructor": "list"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $1 $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (empty? $1) $0 (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (map (lambda $0) (fold $0 empty (lambda (lambda (fold $1 $0 (lambda (lambda (cons $3 $2)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold (range (length $1)) $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $1 $0 (lambda (lambda (cons $3 (map (lambda $0) $2)))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $1 $0 (lambda (lambda (cons (map (lambda $0) $3) $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold (cons empty $0) empty (lambda (lambda (fold $1 $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold $1 $0 (lambda (lambda (fold $3 empty (lambda (lambda (cons $5 $4)))))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (cdr (cdr (cdr (cdr $0)))) (lambda (lambda (fold $1 $0 (lambda (lambda (cons $3 $2))))))))"
                }
            ],
            "task": "remove empty lists"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (empty? (range $1)) $0 (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 0) $0 (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 0) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 0) (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 0) (lambda (lambda (if (gt? $1 0) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range (length empty)) (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 (- 0 $1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 (- 1 $1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 (- 1 1)) (cons $1 $0) $0)))))"
                }
            ],
            "task": "remove eq 0"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 1) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 1) (cons 1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? 1 $1) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? 1 $1) (cons 1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 $0 (lambda (lambda (if (eq? $1 1) $0 (cdr (map (lambda 1) $0)))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 0) (lambda (lambda (if (eq? $1 1) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (is-prime (+ $1 $1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (is-prime (+ $1 $1)) (cons 1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 (mod 1 (+ 1 1))) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? 1 (mod $1 (+ 1 $1))) (cons $1 $0) $0)))))"
                }
            ],
            "task": "keep eq 1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                "logLikelihood": 0,
                "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 1) (cons $1 $0) $0)))))"
            }],
            "task": "keep gt 1"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 (+ 1 1)) $0 (cons $1 $0))))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (is-square (+ 1 (+ 1 $1))) $0 (cons $1 $0))))))"
                }
            ],
            "task": "remove eq 2"
        },
        {
            "request": {
                "arguments": [{
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    },
                    {
                        "arguments": [{
                            "arguments": [],
                            "constructor": "int"
                        }],
                        "constructor": "list"
                    }
                ],
                "constructor": "->"
            },
            "programs": [{
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 (+ 1 1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range 0) (lambda (lambda (if (gt? $1 (+ 1 1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (gt? $1 (- (length $2) $1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 (range (length empty)) (lambda (lambda (if (gt? $1 (+ 1 1)) (cons $1 $0) $0)))))"
                },
                {
                    "logLikelihood": 0,
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 (mod $1 (+ 1 (+ 1 1)))) $0 (cons $1 $0))))))"
                }
            ],
            "task": "keep gt 2"
        }
    ],
    "pseudoCounts": 10,
    "topI": 100
}