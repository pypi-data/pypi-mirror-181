/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// SparseTensor Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterSparseTensorPasses() {
  registerSparseTensorPasses();
}

MlirPass mlirCreateSparseTensorPostSparsificationRewrite() {
  return wrap(mlir::createPostSparsificationRewritePass().release());
}
void mlirRegisterSparseTensorPostSparsificationRewrite() {
  registerPostSparsificationRewrite();
}


MlirPass mlirCreateSparseTensorPreSparsificationRewrite() {
  return wrap(mlir::createPreSparsificationRewritePass().release());
}
void mlirRegisterSparseTensorPreSparsificationRewrite() {
  registerPreSparsificationRewrite();
}


MlirPass mlirCreateSparseTensorSparseBufferRewrite() {
  return wrap(mlir::createSparseBufferRewritePass().release());
}
void mlirRegisterSparseTensorSparseBufferRewrite() {
  registerSparseBufferRewrite();
}


MlirPass mlirCreateSparseTensorSparseTensorCodegen() {
  return wrap(mlir::createSparseTensorCodegenPass().release());
}
void mlirRegisterSparseTensorSparseTensorCodegen() {
  registerSparseTensorCodegen();
}


MlirPass mlirCreateSparseTensorSparseTensorConversionPass() {
  return wrap(mlir::createSparseTensorConversionPass().release());
}
void mlirRegisterSparseTensorSparseTensorConversionPass() {
  registerSparseTensorConversionPass();
}


MlirPass mlirCreateSparseTensorSparseVectorization() {
  return wrap(mlir::createSparseVectorizationPass().release());
}
void mlirRegisterSparseTensorSparseVectorization() {
  registerSparseVectorization();
}


MlirPass mlirCreateSparseTensorSparsificationPass() {
  return wrap(mlir::createSparsificationPass().release());
}
void mlirRegisterSparseTensorSparsificationPass() {
  registerSparsificationPass();
}

