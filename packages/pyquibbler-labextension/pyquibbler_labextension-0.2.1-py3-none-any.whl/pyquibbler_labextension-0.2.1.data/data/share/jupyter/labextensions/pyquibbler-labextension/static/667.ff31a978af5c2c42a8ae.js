"use strict";(self.webpackChunkpyquibbler_labextension=self.webpackChunkpyquibbler_labextension||[]).push([[667],{667:(e,o,n)=>{n.r(o),n.d(o,{default:()=>p});var t=n(145),a=n(215),s=n.n(a),r=n(760),i=n.n(r);const l=e=>{s().fire({icon:"error",title:"Oops...",text:e})},c=e=>{const o=e.shell.widgets("main");let n=o.next();for(;n;){if(n.sessionContext&&"notebook"===n.sessionContext.type&&n.isVisible)return n;n=o.next()}return null};var u=n(898),d=n(835);class b{constructor(e,o){this.label=e,this.callback=o,this.button=new d.ToolbarButton}createNew(e){const o=new d.ToolbarButton({label:this.label,onClick:this.callback});return e.toolbar.insertItem(10,this.label,o),o.enabled=!1,this.button=o,o}}var g=n(231);let h=!0;const m=()=>h,p={id:"quibbler:plugin",autoStart:!0,requires:[t.INotebookTracker,u.IDocumentManager],activate:(e,o,n)=>{console.log("Starting quibbler plugin...");const{commands:t}=e,a=new Map,r=new b("Undo",(()=>v("undo",{}))),u=new b("Redo",(()=>v("redo",{})));e.docRegistry.addWidgetExtension("Notebook",u),e.docRegistry.addWidgetExtension("Notebook",r);const d=(e,o)=>{var t;e.content.model.metadata.set("quibs_archive",o),null===(t=n.contextForWidget(e))||void 0===t||t.save()},p=e=>{var o,n;const t=null===(o=e.sessionContext.session)||void 0===o?void 0:o.kernel;if(Window.pyquibblerKernel=null===(n=e.sessionContext.session)||void 0===n?void 0:n.kernel,null==t)throw new Error("No kernel exists for panel");return a.has(t.id)||a.set(t.id,((e,o,n,t,a)=>{let r=null,l=null;o.statusChanged.connect(((e,o)=>{"terminating"!==o&&"restarting"!==o&&"autorestarting"!==o||c().request("cleanup",{})}));const c=()=>{if(null==l)throw new Error("No requester exists - you need to run `initialize_quibbler` to initialize pyquibbler.");return l},u=()=>{if(null===r)throw new Error("No comm available yet!");l=(e=>{const o=new Map,n=new Map,t=e=>{o.delete(e),n.delete(e)};return{request:(t,a)=>{console.log("Sending action",t);const s=(0,g.v4)();return new Promise(((r,i)=>{o.set(s,r),n.set(s,i);const l=o.size>1?100:0;setTimeout((()=>{try{e.send({action:t,parameters:a,requestId:s})}catch(e){throw console.log("Failed with error",e),new Error(`Cannot send ${t} - is pyquibbler running? (You need to run \`initialize_quibbler\`)`)}}),l)}))},handleSuccessResponse:(e,n)=>{console.log("Resolving",e,o),o.has(e)&&o.get(e)(n),t(e)},handleErrorResponse:(e,a)=>{o.has(e)&&n.get(e)(a),t(e)},cancelPendingRequests:()=>{o.clear(),n.clear()}}})(r),r.onMsg=o=>{const r=o.content.data;console.log("Received message",r);const l=r.type,u=r.data;switch(l){case"dialog":d=u,s().fire(d);break;case"requestDialog":(async(e,o,n,t)=>{let a="";Object.keys(n).forEach((e=>{a+=e+": "+n[e]+"\n"}));const{value:r}=await s().fire({title:e,input:"text",inputLabel:`${o}\n${a}`,inputValue:n,showCancelButton:!1,icon:"warning",inputPlaceholder:"Choose a number (e.g. 1) from the options",allowOutsideClick:!1,inputValidator:e=>{if(!(e in n))return"You must choose from the given options"}});await i().post(`http://localhost:${t}/answer`,{option:r})})(u.title,u.message,u.options,u.port);break;case"quibsArchiveUpdate":a(e,u);break;case"setUndoRedoButtons":n.button.enabled="True"==u.undoEnabled,t.button.enabled="True"==u.redoEnabled;break;case"response":c().handleSuccessResponse(r.requestId,u);break;case"error":c().handleErrorResponse(r.requestId,u)}var d;return new Promise((e=>e()))}};return(async()=>{const e=(await o.requestCommInfo({target_name:"pyquibbler"})).content.comms,n=Object.keys(e).find((o=>"pyquibbler"===e[o].target_name));console.log("Registering comm target for pyquibbler"),o.registerCommTarget("pyquibbler",(e=>{r=e,console.log("Callback: registering comm"),u()})),n&&(console.log("Found existing comm id, recreating and reregistering"),r=o.createComm("pyquibbler",n),u())})(),{runAction:(e,o)=>c().request(e,o)}})(e,t,r,u,d)),a.get(t.id)},v=async(o,n,t)=>{let a;console.log("Running",o),t=!1!==t;try{a=p(c(e))}catch(e){if(t)return void l(e);throw e}try{await a.runAction(o,n)}catch(e){if(t)return void l(e);throw e}};[{command:"save",label:"Save Quibs",action:"save"},{command:"load",label:"Load Quibs",action:"load"},{command:"sync",label:"Sync Quibs",action:"sync"}].map((({command:o,action:a,label:s})=>{t.addCommand(`quibbler:${o}`,{label:s,execute:o=>{var t;const s=c(e);null!=s?null===(t=n.contextForWidget(s))||void 0===t||t.save().then((()=>{v(a,{})})):l("There is no open notebook!")}})})),t.addCommand("quibbler:save-in-notebook",{label:"Save/Load inside Notebook",execute:e=>{var o;o=!m(),h=o;for(let e of a.values())e.runAction("setShouldSaveLoadWithinNotebook",{should_save_load_within_notebook:m()})},isToggled:()=>m()}),t.addCommand("quibbler:clear-data",{label:"Clear Quib Data in Notebook",execute:o=>{var t;const a=c(e);null!=a?(d(a,null),null===(t=n.contextForWidget(a))||void 0===t||t.save().then((()=>{v("clearData",{},!1).catch((e=>{console.log(`Not sending clear data to server, because of error ${e}`)}))}))):l("There is no open notebook!")}}),o.widgetAdded.connect(((e,o)=>{o.sessionContext.ready.then((()=>{console.log("Session context ready- preparing session..."),p(o)})),o.sessionContext.sessionChanged.connect(((e,o)=>{e.kernelChanged.connect(((e,o)=>{null===o.newValue&&a.delete(o.oldValue.id)}))}))}))}}}}]);