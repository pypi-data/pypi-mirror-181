{"version":3,"file":"lib_index_js.ba4b3fa335edae72b764.js","mappings":";;;;;;;;;;;;;;;AAAiD;AACjD;AACA;AACA;AACO,gCAAgC,2DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpBwD;AACN;AACH;AACI;AACnD;AACA;AACA,eAAe,kEAAY;AAC3B;AACA,cAAc,4DAAS;AACvB;AACA;AACA,4BAA4B,uEAAoB;AAChD,0CAA0C,uEAAoB;AAC9D,gBAAgB,cAAc;AAC9B,6BAA6B,wDAAiB;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iEAAe,gBAAgB,EAAC","sources":["webpack://@jupyteach/jupyterlite-contents/./lib/contents.js","webpack://@jupyteach/jupyterlite-contents/./lib/index.js"],"sourcesContent":["import { Contents } from '@jupyterlite/contents';\n/**\n * A class to handle requests to /api/contents\n */\nexport class JupyteachContents extends Contents {\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the file is saved.\n     */\n    async save(path, options = {}) {\n        // call the superclass method\n        const out = super.save(path, options);\n        // now do custom stuffs\n        console.log('I am in the custom save method!!!', { path, options, out });\n        return out;\n    }\n}\n","import { ILocalForage } from '@jupyterlite/localforage';\nimport { IContents } from '@jupyterlite/contents';\nimport { JupyteachContents } from './contents';\nimport { PageConfig } from '@jupyterlab/coreutils';\nconst contentsPlugin = {\n    id: '@jupyteach/server-extension:contents',\n    requires: [ILocalForage],\n    autoStart: true,\n    provides: IContents,\n    activate: (app, forage) => {\n        console.log('activating custom contents plugin');\n        const storageName = PageConfig.getOption('contentsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('contentsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const contents = new JupyteachContents({\n            storageName,\n            storageDrivers,\n            localforage\n        });\n        app.started.then(() => contents.initialize().catch(console.warn));\n        return contents;\n    }\n};\nexport default [contentsPlugin];\n"],"names":[],"sourceRoot":""}