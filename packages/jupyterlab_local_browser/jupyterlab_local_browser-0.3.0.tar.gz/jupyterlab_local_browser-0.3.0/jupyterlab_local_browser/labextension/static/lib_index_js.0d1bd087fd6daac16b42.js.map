{"version":3,"file":"lib_index_js.0d1bd087fd6daac16b42.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA0D;AACY;AACvB;AACX;AACU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,oEAAe,EAAE,yDAAQ;AACzD;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,wCAAM;AACvE,+BAA+B,uDAAkB,GAAG,8BAA8B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,oCAAoC;AAC1D;AACA,wBAAwB,+DAAa;AACrC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;AChD4F;AACpC;AACT;AACrB;AAC1B;AACA;AACA;AACO,iCAAiC,gEAAc;AACtD;AACA;AACA,yBAAyB,wDAAM;AAC/B;AACA,aAAa;AACb,yBAAyB,iEAAe;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B,+EAA6B;AAC5D,2BAA2B,8DAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,8DAAW;AACtC,QAAQ,8EAA4B,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,6DAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAmB,aAAa,+CAA+C;AACvG;AACA,eAAe,0DAAmB,aAAa,qCAAqC;AACpF;AACA;AACA,yBAAyB,6DAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,YAAY,uEAAuE;AACtH;AACA;AACA,2BAA2B,6DAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,aAAa;AAChD;AACA,eAAe;AACf,YAAY,0DAAmB,UAAU,SAAS,+BAA+B,wBAAwB;AACzG,gBAAgB,0DAAmB,WAAW,kPAAkP;AAChS;AACA","sources":["webpack://local_browser/./lib/index.js","webpack://local_browser/./lib/widget.js"],"sourcesContent":["import { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { v4 as uuidv4 } from 'uuid';\nimport { LocalBrowserWidget } from './widget';\n/**\n * Initialization data for the jupyterlab_local_browser extension.\n */\nconst plugin = {\n    id: 'jupyterlab_local_browser',\n    autoStart: true,\n    requires: [ICommandPalette, ILayoutRestorer, IStateDB],\n    activate: activate\n};\nexport default plugin;\n/**\n * Activate the Local Browser widget extension.\n */\nasync function activate(app, palette, restorer, statedb) {\n    // Add the command to open the local browser\n    const command = 'jupyterlab_local_browser:open';\n    app.commands.addCommand(command, {\n        label: 'Start a new Local Browser',\n        execute: (args) => {\n            // Create the widget\n            const uuid = args && args.uuid ? args.uuid : 'lb-' + uuidv4();\n            const widget = new LocalBrowserWidget({ uuid: uuid, statedb: statedb });\n            // Track the state of the widget for later restoration\n            tracker.add(widget);\n            app.shell.add(widget, 'main');\n            widget.content.update();\n            // Activate the widget\n            app.shell.activateById(widget.id);\n        }\n    });\n    // Add the command to the palette.\n    palette.addItem({ command, category: 'Local Browser' });\n    // Track and restore the widget state\n    const tracker = new WidgetTracker({\n        namespace: 'local_browser'\n    });\n    restorer.restore(tracker, {\n        command,\n        name: obj => obj.node.id,\n        args: obj => {\n            return { uuid: obj.node.id };\n        }\n    });\n}\n","import { MainAreaWidget, IFrame, ReactiveToolbar, ReactWidget } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport React from 'react';\n/**\n * A widget providing a browser for local servers.\n */\nexport class LocalBrowserWidget extends MainAreaWidget {\n    constructor(options) {\n        super({\n            content: new IFrame({\n                sandbox: ['allow-same-origin', 'allow-scripts']\n            }),\n            toolbar: new ReactiveToolbar()\n        });\n        this._loadPortsInterval = -1;\n        this.id = options.uuid;\n        this.title.label = 'Local Browser';\n        this.title.closable = true;\n        this.content.addClass('lb-localBrowser');\n        this._portsWidget = new SelectWidget({\n            onChange: () => {\n                this.toolbarChanged();\n            },\n            value: '_placeholder'\n        });\n        this.toolbar.addItem('ports', this._portsWidget);\n        this._pathWidget = new PathWidget({\n            onChange: () => {\n                this.toolbarChanged();\n            },\n            value: ''\n        });\n        this.toolbar.addItem('path', this._pathWidget);\n        const reloadButton = new ReloadWidget({\n            onClick: () => {\n                this.toolbarChanged();\n            }\n        });\n        this.toolbar.addItem('reload', reloadButton);\n        this._statedb = options.statedb;\n        this._serverSettings = ServerConnection.makeSettings();\n        this.content.url = URLExt.join(this._serverSettings.baseUrl, 'jupyterlab-local-browser', 'public', 'index.html');\n        options.statedb.fetch(options.uuid).then((data) => {\n            if (data) {\n                this._portsWidget.value = data.port;\n                this._pathWidget.value = data.pathname.charAt(0) === '/' ? data.pathname.substring(1) : data.pathname;\n                const url = '/' +\n                    data.mode +\n                    '/' +\n                    data.port +\n                    data.pathname +\n                    data.search +\n                    data.hash;\n                this.content.url = url;\n            }\n        });\n        this.content.node.children[0].addEventListener('load', this);\n        this._loadPortsInterval = setInterval(() => {\n            this._evtLoadPortsTimer();\n        }, 10000);\n        this._evtLoadPortsTimer();\n    }\n    handleEvent(evt) {\n        if (evt.type === 'load') {\n            this._evtIFrameLoad();\n        }\n        else {\n            console.log(evt);\n        }\n    }\n    toolbarChanged() {\n        if (this._portsWidget.value === '_placeholder') {\n            this.content.url = URLExt.join(this._serverSettings.baseUrl, 'jupyterlab-local-browser', 'public', 'index.html');\n        }\n        else {\n            this.content.url =\n                '/proxy/' + this._portsWidget.value + '/' + this._pathWidget.value;\n        }\n    }\n    onCloseRequest(msg) {\n        this.content.node.children[0].removeEventListener('load', this);\n        clearInterval(this._loadPortsInterval);\n        super.onCloseRequest(msg);\n    }\n    _evtIFrameLoad() {\n        const contentDocument = this.content.node.children[0]\n            .contentDocument;\n        if (contentDocument) {\n            this.title.label = contentDocument.title;\n            const iFrameLocation = contentDocument.location;\n            if (iFrameLocation.pathname.indexOf('/jupyterlab-local-browser/public/index.html') >= 0) {\n                this._statedb.remove(this.id);\n            }\n            else {\n                let pathname = iFrameLocation.pathname.substring(1);\n                const mode = pathname.substring(0, pathname.indexOf('/'));\n                pathname = pathname.substring(pathname.indexOf('/') + 1);\n                const port = pathname.substring(0, pathname.indexOf('/'));\n                pathname = pathname.substring(pathname.indexOf('/'));\n                this._statedb.save(this.id, {\n                    mode: mode,\n                    port: port,\n                    pathname: pathname,\n                    search: iFrameLocation.search,\n                    hash: iFrameLocation.hash\n                });\n            }\n        }\n    }\n    _evtLoadPortsTimer() {\n        const requestUrl = URLExt.join(this._serverSettings.baseUrl, 'jupyterlab-local-browser', 'open-ports');\n        ServerConnection.makeRequest(requestUrl, {}, this._serverSettings).then(response => {\n            response.json().then((data) => {\n                const baseUrl = new URL(this._serverSettings.baseUrl);\n                const basePort = baseUrl.port;\n                const values = data\n                    .map(([port, label]) => {\n                    if (port !== basePort) {\n                        return [port, label];\n                    }\n                    else {\n                        return null;\n                    }\n                })\n                    .filter(value => value !== null);\n                values.splice(0, 0, ['_placeholder', 'Select a Port']);\n                this._portsWidget.values = values;\n            });\n        });\n    }\n}\nclass SelectWidget extends ReactWidget {\n    constructor(options) {\n        super();\n        this._values = [];\n        this._value = options.value ? options.value : '';\n        this._onChange = options.onChange;\n    }\n    set values(value) {\n        this._values = value;\n        this.update();\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.update();\n    }\n    onChange(evt) {\n        this._value = evt.target.value;\n        this._onChange();\n        this.update();\n    }\n    render() {\n        const values = [];\n        for (const [value, label] of this._values) {\n            values.push(React.createElement(\"option\", { value: value, selected: value === this._value }, label));\n        }\n        return React.createElement(\"select\", { onChange: evt => this.onChange(evt) }, values);\n    }\n}\nclass PathWidget extends ReactWidget {\n    constructor(options) {\n        super();\n        this._onChange = options.onChange;\n        this._value = options.value ? options.value : '';\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.update();\n    }\n    onChange(evt) {\n        this._value = evt.target.value;\n        this._onChange();\n        this.update();\n    }\n    render() {\n        return (React.createElement(\"input\", { type: \"text\", value: this._value, onChange: evt => this.onChange(evt) }));\n    }\n}\nclass ReloadWidget extends ReactWidget {\n    constructor(options) {\n        super();\n        this._onClick = options.onClick;\n    }\n    onClick() {\n        this._onClick();\n    }\n    render() {\n        return (React.createElement(\"button\", { \"aria-label\": \"Reload\", onClick: evt => {\n                this._onClick();\n            } },\n            React.createElement(\"svg\", { style: { width: '16px', height: '16px' }, viewBox: \"0 0 24 24\" },\n                React.createElement(\"path\", { fill: \"currentColor\", d: \"M2 12C2 16.97 6.03 21 11 21C13.39 21 15.68 20.06 17.4 18.4L15.9 16.9C14.63 18.25 12.86 19 11 19C4.76 19 1.64 11.46 6.05 7.05C10.46 2.64 18 5.77 18 12H15L19 16H19.1L23 12H20C20 7.03 15.97 3 11 3C6.03 3 2 7.03 2 12Z\" }))));\n    }\n}\n"],"names":[],"sourceRoot":""}