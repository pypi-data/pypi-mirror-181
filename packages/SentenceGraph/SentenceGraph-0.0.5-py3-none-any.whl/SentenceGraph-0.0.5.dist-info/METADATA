Metadata-Version: 2.1
Name: SentenceGraph
Version: 0.0.5
Summary: Easily create semantic graphs from text using SentenceTransformers
Home-page: https://github.com/Hevia/SentenceGraph
Author: Hevia
Author-email: anthony@hevia.dev
License: Apache Software License 2.0
Keywords: nbdev jupyter notebook python
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: sentence-transformers
Requires-Dist: pandas
Provides-Extra: dev
Requires-Dist: twine ; extra == 'dev'

SentenceGraph
================

<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

## Install

``` sh
pip install SentenceGraph
```

## How to use

``` python
# from SentenceGraph.core import SentenceGraph, Format, TextNodeType
# from SentenceGraph.functional import create_text_nodes
```

``` python
# sentenceGraph = SentenceGraph()
```

``` python
# SentenceGraph requires all sentences to be passed as TextNode, which is just a namedtuple containing an id and text.
# There are several ways to prepare your sentence data for SentenceGraph.

# Use the builtin helper function which will just assign sequential ids for the data. Useful for experimentation.
# sentences = ['This framework generates embeddings for each input sentence',
#     'Sentences are passed as a list of string.', 
#     'The quick brown fox jumps over the lazy dog.']

# sentences = create_text_nodes(sentences)

# # 
# sentences = [TextNode(1, 'This framework generates embeddings for each input sentence'),
#     TextNode(2, 'Sentences are passed as a list of string.'), 
#     TextNode(3,'The quick brown fox jumps over the lazy dog.')]
```

``` python
# sim_graph = sentenceGraph.createGraph(sentences)
# sim_graph
```

You can also return a graph matrix in different formats.

``` python
# sim_graph = sentenceGraph.createGraph(sentences, format=Format.Numpy)
# sim_graph
```


